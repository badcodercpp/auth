{{define "loginBody"}}



	<script type="text/babel">
		"use strict";
		//let h=`${document.getElementById('_body').clientHeight-50}px`;

		const loginBodyMainStyle={width:"100%",height:"100%",marginTop:"50px"};
		const logicalContainerStyle={width:"100%",height:"300px",border:"1px solid lightgrey",borderRadius:"2%",backgroundColor:"white"};
		const partitionStyle_1={wisth:"100%",height:"240px",borderRadius:"4%"};
		const partitionStyle_2={wisth:"100%",height:"60px",backgroundColor:"#f4f4f4",borderRadius:"4%"}
		const individualStyle_1={width:"15%",height:"100%",display:"inline",float:"left"};
		const individualStyle_2={width:"85%",height:"100%",display:"inline",float:"right"};
		const contPsudoStyle={width:"100%",height:"100%"};
		const againInnerSt={width:"100%",height:"60px"};
		const dFlexStyle={width:"100%",height:"100%",display:"flex",justifyContent:"flex-start",alignItems:"center"};
		const textCodeStyle={fontFamily:"cursive"};
		const emOphnStyle={width:"50%",height:"30px",borderRadius:"3px",border:"1px solid #e6ecf0",textIndent:"10px"};
		const loginButtonContStyle={width:"100%",height:"100%"};
		const indiLoginBtContStyle={width:"20%",height:"100%",display:"inline",float:"left"};
		const logBtStyle={width:"70%",height:"55%",cursor:"pointer",backgroundColor:"#3b88c3",fontSize:"larger",fontFamily:"cursive",color:"white",borderRadius:"10%",border:"none"};
		const rememberMeStyle={width:"100%",height:"55%",display:"flex",justifyContent:"flex-start",alignItems:"center"};
		const fontStyleForgotStyle={cursor:"pointer"};
		const newUserStyle={width:"100%",height:"100%"};
		const newStyle={wisth:"100%",height:"50%",display:"flex",justifyContent:"flex-start",alignItems:"center"};
		const newStyle_c={wisth:"100%",height:"50%",display:"flex",justifyContent:"center",alignItems:"center"};
		const blankCopyright={width:"15%",height:"100%",display:"inline",float:"left"};
		const blankCopyrightNo={width:"85%",height:"100%",display:"inline",float:"right"};
		const spanningHello={marginLeft:"10px",color:"red"};
		const spanningHello_ok={marginLeft:"10px",color:"green",fontSize:"18px"};
		class LoginBody extends React.Component {
			constructor(props){
				super(props);
				this.state = {
					logMsg:"Log in to theLinkedface",
					emOphnVal:localStorage.email?localStorage.email:"",
					pwdVal:localStorage.password?localStorage.password:"",
					fpDecoration:"none",
					chkd:true,
					innerSpanningEm:"",
					innerSpanningPas:""
				};
				this._em_o_phn_change=this._em_o_phn_change.bind(this);
				this._pwd_change=this._pwd_change.bind(this);
				this._underline_me=this._underline_me.bind(this);
				this._deunderline_me=this._deunderline_me.bind(this);
				this._ok_clk=this._ok_clk.bind(this);
				this._rem_me_chk_chng=this._rem_me_chk_chng.bind(this);
				this._mm_to_signup_clk=this._mm_to_signup_clk.bind(this);
				//this.fontStyleForgotStyle={cursor:"pointer",textDecoration:this.state.fpDecoration};
			}
			_mm_to_signup_clk(evt){
				evt.preventDefault();
				evt.stopPropagation();
				top.location.href=`${top.location.href.split('/')[0]}/signup`;
			}
			_rem_me_chk_chng(evt){
				if (evt.target.checked) {
					localStorage.email = this.state.emOphnVal;
					localStorage.password = this.state.pwdVal;
				}else {
					localStorage.email = undefined;
					localStorage.password = undefined;
				}
				this.setState({
					chkd:!this.state.chkd
				});
			}
			_ok_clk(evt){
				evt.preventDefault();
				evt.stopPropagation();
				let ac={Email:this.state.emOphnVal,Password:this.state.pwdVal};
				var formData=new FormData();
				formData.append("email",this.state.emOphnVal)
				formData.append("password",this.state.pwdVal)
				console.log(ac)
				/*var xhttp = new XMLHttpRequest();
							xhttp.open("POST", "linkAuth", true);
							xhttp.setRequestHeader('Content-Type','application/json');
							xhttp.onreadystatechange = function(data){
    							if (xhttp.readyState==4) {
    								console.log(this.responseText)

    							}
							};
						xhttp.send(JSON.stringify(ac));
						console.log(JSON.stringify(bvgh))*/
						/*var xhttp = new XMLHttpRequest();
									xhttp.open("GET", "redirect", true);
								xhttp.send();*/
			}
			_underline_me(evt){
				evt.preventDefault();
				evt.stopPropagation();
				evt.target.style.textDecoration="underline";
			}
			_deunderline_me(evt){
				evt.preventDefault();
				evt.stopPropagation();
				evt.target.style.textDecoration="none";
			}
			_pwd_change(evt){
				evt.preventDefault();
				evt.stopPropagation();
				if(evt.target.value ==""){
					this.setState({
						innerSpanningPas:"we require a password ",
						pwdVal:evt.target.value
					});
				}else if(!sName(evt.target.value)){
					this.setState({
						innerSpanningPas:"please enter a valid password",
						pwdVal:evt.target.value
					});
				}else{
					this.setState({
						innerSpanningPas:"",
						pwdVal:evt.target.value
					});
				}
			}
			_em_o_phn_change(evt){
				evt.preventDefault();
				evt.stopPropagation();
				evt.persist();
				if(evt.target.value ==""){
					this.setState({
						innerSpanningEm:"what's your email or mobile ?",
						emOphnVal:evt.target.value
					});
				}else if(!sEmail(evt.target.value) && !sMobile(evt.target.value) ){
					this.setState({
						innerSpanningEm:"please enter a valid email or mobile",
						emOphnVal:evt.target.value
					});
				}else{
					this.setState({
						innerSpanningEm:"",
						emOphnVal:evt.target.value
					});
				}
				//console.log(sEmail(evt.target.value))
			}
			render(){
				return (
					<div style={loginBodyMainStyle}>
						<div style={logicalContainerStyle}>
							<div style={partitionStyle_1}>
								<div style={individualStyle_1}>

								</div>
								<div style={individualStyle_2}>
									<div style={contPsudoStyle}>
										<div style={againInnerSt}>
											<div style={dFlexStyle}>
												<code style={textCodeStyle}>
													<font size={5}>
														{this.state.logMsg}
													</font>
												</code>
											</div>
										</div>
										<form method="POST" action="/linkAuth"><div style={againInnerSt}>
											<div style={dFlexStyle}>
												<input type="text" name="_em_o_phn" id="_em_o_phn" style={emOphnStyle} value={this.state.emOphnVal} placeholder="email or mobile" onChange={this._em_o_phn_change} />{(this.state.emOphnVal!="" && sEmail(this.state.emOphnVal) || this.state.emOphnVal!="" && sMobile(this.state.emOphnVal) )?(<span style={spanningHello_ok}>&#8730;</span>):(<span style={spanningHello}>{this.state.innerSpanningEm}</span>)}
											</div>
										</div>
										<div style={againInnerSt}>
											<input type="password" name="_pwd" id="_pwd" style={emOphnStyle} value={this.state.pwdVal} placeholder="password" onChange={this._pwd_change} />{(this.state.pwdVal!="" && sPassword(this.state.pwdVal))?(<span style={spanningHello_ok}>&#8730;</span>):(<span style={spanningHello}>{this.state.innerSpanningPas}</span>)}
										</div>
										<div style={againInnerSt}>
											<div style={loginButtonContStyle}>
												<div style={indiLoginBtContStyle}>
													<input type="submit" value="login" style={logBtStyle}  />
												</div>
												<div style={indiLoginBtContStyle}>
													<div style={rememberMeStyle}>
														<input type="checkbox" checked={this.state.chkd} onChange={this._rem_me_chk_chng} /> Remember me
													</div>
												</div>
												<div style={indiLoginBtContStyle}>
													<div style={rememberMeStyle}>
														<code style={textCodeStyle}><font color="#3b88c3" style={fontStyleForgotStyle} onMouseOut={this._deunderline_me} onMouseEnter={this._underline_me}>Forgot password</font></code>
													</div>
												</div>
												<div style={indiLoginBtContStyle}>

												</div>
												<div style={indiLoginBtContStyle}>

												</div>
											</div>
										</div></form>
									</div>
								</div>
							</div>
							<div style={partitionStyle_2}>
								<div style={newUserStyle}>
									<div style={blankCopyright}>

									</div>
									<div style={blankCopyrightNo}>
									<div style={newStyle}>
										<code style={textCodeStyle}><font size={3}>New to Linkedface &nbsp;</font></code><code style={textCodeStyle}><font size={3} color="#3b88c3" onMouseOut={this._deunderline_me} onMouseEnter={this._underline_me} style={fontStyleForgotStyle} onClick={this._mm_to_signup_clk}>Sign up</font></code>
									</div>
									<div style={newStyle}>
										<code style={textCodeStyle}><font size={3}>Copyright &#169; &nbsp;</font></code><code style={textCodeStyle}><font size={3} color="#3b88c3" onMouseOut={this._deunderline_me} onMouseEnter={this._underline_me} style={fontStyleForgotStyle}>theLinkedface.com</font></code><code style={textCodeStyle}><font size={4}> &nbsp;all right reserved.</font></code>
									</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				)
			}
		}
		ReactDOM.render(<LoginBody />,document.getElementById('_bdy_part_2'))
	</script>
{{end}}
