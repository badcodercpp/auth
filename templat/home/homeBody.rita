{{define "homeBodyPartTwo"}}



	<script type="text/babel">
		'use strict';

		window.__my_previous=[];
		window.addEventListener("observeArray",function(evt){
			evt.preventDefault();
			evt.stopPropagation();

		})

		const myImagePopupOwnStyle={width:"99%",height:"1255px",position:"absolute",zIndex:500000,backgroundColor:"transparent"};
		const myImageSidhaSadhaBhola={width:"100%",height:"100%",display:"flex",justifyContent:"flex-end",alignItems:"center",backgroundColor:"black"};
		const myImageSidhaSadhaBhola_thikana={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center",backgroundColor:"black"};
		const sajaDoYeKeshuMujheBajuoMeChhupaLo_nflex={width:"100%",height:"90%"};
		const sajaDoYeKeshuMujheBajuoMeChhupaLo_cutter={width:"100%",height:"10%"};
		const sajaDoYeKeshuMujheBajuoMeChhupaLo={width:"80%",height:"80%"};
		const allahKareDilNaLageKisiSe={width:"80%",height:"80%"};
		const whiteSpanningCustomColor={color:"white",cursor:"pointer"}
		class ImagePopupGnuMakeGolang extends React.Component {
			constructor(props) {
				super(props);
				this.state = {
					myUrl:this.props.Url
				}
				this.componentWillMount=this.componentWillMount.bind(this);
				this.componentWillUnmount=this.componentWillUnmount.bind(this);
				this._close_my_popup=this._close_my_popup.bind(this);
			}
			_close_my_popup(evt){
				evt.preventDefault();
				evt.stopPropagation();
				ReactDOM.unmountComponentAtNode(document.getElementById('_js_root_animation'))
			}
			componentWillMount(){
				var events = new CustomEvent(
					"opacity",
					{
						detail: {
							message: 0.2,
							time: new Date(),
					},
					bubbles: true,
					cancelable: true
				}
			 );
			 window.dispatchEvent(events);
			}
			componentWillUnmount(){
				var events = new CustomEvent(
					"opacity",
					{
						detail: {
							message: 1,
							time: new Date(),
					},
					bubbles: true,
					cancelable: true
				}
			 );
			 window.dispatchEvent(events);
			}
			render(){
				return (
					<div style={myImagePopupOwnStyle}>
						<div style={sajaDoYeKeshuMujheBajuoMeChhupaLo_cutter}>
							<div style={myImageSidhaSadhaBhola}>
								<span style={whiteSpanningCustomColor} onClick={this._close_my_popup}><i className="large material-icons right">close</i></span>
							</div>
						</div>
						<div style={sajaDoYeKeshuMujheBajuoMeChhupaLo_nflex}>
							<div style={myImageSidhaSadhaBhola_thikana}>
								<img src={this.state.myUrl} style={allahKareDilNaLageKisiSe} />
							</div>
						</div>
					</div>
				)
			}
		}

		const enableBackgroundM={enableBackground:"new 0 0 50 50"};
		class Spinner extends React.Component {
				 		constructor(props){
				 			super(props);
				 			this.state = {
				 			};
				 		}
				 		render(){
				 			return (
				 				<div className="loader loader--style5" title="4">
		  							<svg version="1.1" id="Layer_1" xmlns="https://www.w3.org/2000/svg" xmlnsXlink="https://www.w3.org/1999/xlink" x="0px" y="0px"
		  width="24px" height="30px" viewBox="0 0 24 30" style={enableBackgroundM} xmlSpace="preserve">
		    <rect x="0" y="0" width="4" height="20" fill="#333">
		      <animateTransform attributeType="xml"
		        attributeName="transform" type="translate"
		        values="0 0; 0 20; 0 0"
		        begin="0" dur="0.6s" repeatCount="indefinite" />
		    </rect>
		    <rect x="10" y="0" width="4" height="10" fill="#333">
		      <animateTransform attributeType="xml"
		        attributeName="transform" type="translate"
		        values="0 0; 0 20; 0 0"
		        begin="0.2s" dur="0.6s" repeatCount="indefinite" />
		    </rect>
		    <rect x="20" y="0" width="4" height="20" fill="#333">
		      <animateTransform attributeType="xml"
		        attributeName="transform" type="translate"
		        values="0 0; 0 20; 0 0"
		        begin="0.4s" dur="0.6s" repeatCount="indefinite" />
		    </rect>
		  </svg>
		</div>
				 			)
				 		}
				 	}
		/*const abcStylePopup={width:"99%",height:"1240px",position:"absolute",zIndex:10,backgroundColor:"transparent"};
		const popupPlaylistDf={width:"100%",height:"100%",display:"flex",justifyContent:"center"};
		const actPlaylistQuestPopup={width:"400px",height:"400px",border:"1px solid #e6ecf0",marginTop:"150px"};
		const playlistPopupHead={width:"100%",height:"40px",backgroundColor:"white",marginBottom:"10px"};
		const playlistPopupBody={width:"100%",height:"340px",backgroundColor:"white"};
		const closePlaylistPopupBefore={width:"70%",height:"100%",display:"inline",float:"left"};
		const closePlaylistPopupAfter={width:"30%",height:"100%",display:"inline",float:"right"};
		const dflexCloseBefore={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
		const dflexCloseAfter={width:"100%",height:"100%",display:"flex",justifyContent:"flex-end",alignItems:"center"};
		const closingPopupFontwa={cursor:"pointer"};
		const msgInformationToAddPlaylist={width:"100%",height:"40px",display:"flex",justifyContent:"center",alignItems:"center"};
		const actPlaylistDataStyle={width:"100%",height:"260px",overflowY:"scroll"};
		const updatePlaylistStyle={width:"100%",height:"40px"};
		const createPlaylistButtonDadaji={width:"50%",height:"100%",display:"inline",float:"left"};
		const updatePlaylistButtonDadaji={width:"50%",height:"100%",display:"inline",float:"right"};
		const createPlaylistButtonDady={width:"99%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center",border:"1px solid #e6ecf0"};
		const updatePlaylistButtonDady={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
		const closingPopupFontwaOf={cursor:"pointer"};
		class PlaylistPopup extends React.Component {
			constructor(props) {
				super(props);
				this.state = {

				};
				this.componentWillMount=this.componentWillMount.bind(this);
				this.componentWillUnmount=this.componentWillUnmount.bind(this);
				this._closing_playlist_popup_bhai=this._closing_playlist_popup_bhai.bind(this);
			}
			_closing_playlist_popup_bhai(evt){
				ReactDOM.unmountComponentAtNode(document.getElementById('_js_root_animation'))
			}
			componentWillMount(){
				var events = new CustomEvent(
					"opacity",
					{
						detail: {
							message: 0.2,
							time: new Date(),
					},
					bubbles: true,
					cancelable: true
				}
			 );
			 window.dispatchEvent(events);
			}
			componentWillUnmount(){
				var events = new CustomEvent(
					"opacity",
					{
						detail: {
							message: 1,
							time: new Date(),
					},
					bubbles: true,
					cancelable: true
				}
			 );
			 window.dispatchEvent(events);
			}
			render(){
				return (
					<div style={abcStylePopup}>
						<div style={popupPlaylistDf}>
							<div style={actPlaylistQuestPopup}>
								<div style={playlistPopupHead}>
									<div style={closePlaylistPopupBefore}>
										<div style={dflexCloseBefore}>
											<font size={4}>My playlist</font>
										</div>
									</div>
									<div style={closePlaylistPopupAfter}>
										<div style={dflexCloseAfter}>
											<font style={closingPopupFontwa} size={5} onClick={this._closing_playlist_popup_bhai}>&#9932;</font>
										</div>
									</div>
								</div>
								<div style={playlistPopupBody}>
									<div style={msgInformationToAddPlaylist}>Please check the checkbox to add to the target playlist
									</div>
									<div style={actPlaylistDataStyle}>2
									</div>
									<div style={updatePlaylistStyle}>
										<div style={createPlaylistButtonDadaji}>
											<div style={createPlaylistButtonDady}>
												<font style={closingPopupFontwaOf} size={5}>Create playlist</font>
											</div>
										</div>
										<div style={updatePlaylistButtonDadaji}>
											<div style={updatePlaylistButtonDady}>
												<font style={closingPopupFontwaOf} size={5}>Update playlist</font>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				)
			}
		}*/

		class PreloderCircular extends React.Component {
			constructor(props) {
				super(props);
				this.state = {

				};
			}
			render(){
				return(
					<div className="preloader-wrapper small active">
      <div className="spinner-layer spinner-blue">
        <div className="circle-clipper left">
          <div className="circle"></div>
        </div><div className="gap-patch">
          <div className="circle"></div>
        </div><div className="circle-clipper right">
          <div className="circle"></div>
        </div>
      </div>

      <div className="spinner-layer spinner-red">
        <div className="circle-clipper left">
          <div className="circle"></div>
        </div><div className="gap-patch">
          <div className="circle"></div>
        </div><div className="circle-clipper right">
          <div className="circle"></div>
        </div>
      </div>

      <div className="spinner-layer spinner-yellow">
        <div className="circle-clipper left">
          <div className="circle"></div>
        </div><div className="gap-patch">
          <div className="circle"></div>
        </div><div className="circle-clipper right">
          <div className="circle"></div>
        </div>
      </div>

      <div className="spinner-layer spinner-green">
        <div className="circle-clipper left">
          <div className="circle"></div>
        </div><div className="gap-patch">
          <div className="circle"></div>
        </div><div className="circle-clipper right">
          <div className="circle"></div>
        </div>
      </div>
    </div>
				)
			}
		}


		var zPopStyle=(marginL)=>{
			return {width:"200px",height:"200px",zIndex:"20",position:"absolute",border:"1px solid #e6ecf0",marginLeft:marginL,marginTop:"60px",backgroundColor:"white",borderRadius:"4px"};
		};
		const addToPlaylistInnerSome={width:"100%",height:"30px"};
		const flFloatOne={width:"99%",height:"100%",display:"inline",float:"left"};
		const flFloatTwo={width:"79%",height:"100%",display:"inline",float:"right"};
		const commonDisplayFlexSt={width:"100%",height:"100%",display:"flex",justifyContent:"flex-start",alignItems:"center",textAlign:"center"};
		const commonDisplayFlexSt_text={width:"100%",height:"100%",display:"flex",justifyContent:"flex-start",alignItems:"center",textAlign:"center"};
		const zPopSunOne={width:"100%",height:"170px",overflowY:"scroll"};
		const zPopSunTwo={width:"100%",height:"30px",display:"flex",justifyContent:"center",alignItems:"center"};
		const newPlaylistBtStyle_part_2={minWidth:"100px",cursor:"pointer",backgroundColor:"white",fontSize:"larger",color:"black",borderRadius:"10%",border:"1px solid #e6ecf0",float:"left"};
		class Zpopup extends React.Component {
			constructor(props) {
				super(props);
				this.state = {
					ml:this.props.Ml,
					pl:window.__playlistArray,
					checkedValueArr:[],
					currentOperableSong:JSON.parse(this.props.SongName),
					currentOperableSongId:this.props.SongId
				};
				this._mousewa_leaving=this._mousewa_leaving.bind(this);
				this._sun_sadaye_update_pl=this._sun_sadaye_update_pl.bind(this);
				this._i_am_dying=this._i_am_dying.bind(this);
			}
			_i_am_dying(evt){
				console.log(evt.currentTarget.lastChild.value)
				if (evt.currentTarget.lastChild.value=="unchecked") {
					evt.currentTarget.firstChild.firstChild.firstChild.removeAttribute("class");
					evt.currentTarget.lastChild.value="checked"
				}else{
					evt.currentTarget.firstChild.firstChild.firstChild.setAttribute("class", "filled-in");
					evt.currentTarget.lastChild.value="unchecked"
				}

				//evt.currentTarget.checked="checked";
				/*let par=evt.target.parentElement.parentElement.parentElement.lastChild.firstChild.innerText;
				let art=this.state.checkedValueArr;
				art.push(par);
				this.setState({
					checkedValueArr:art
				})
				console.log(this.state.checkedValueArr);*/
			}
			_sun_sadaye_update_pl(evt){
				evt.preventDefault();
				evt.stopPropagation();
				evt.persist();
				let tempAllerPlFSng=[];
				let allerMal=document.getElementsByClassName('_checkable_input_music_collector_pratibha_sorry');

				for (let i = 0; i < allerMal.length; i++) {
					if (allerMal[i].value=="checked") {
						tempAllerPlFSng.push(allerMal[i].parentElement.firstChild.firstChild.lastChild.innerText)
					}
				}
				let mm_me=window.__rasoola.allah[1];
				let pKey=window.__rasoola.allah[4]
				console.log(tempAllerPlFSng);
				let dataSendable=JSON.stringify({Me:mm_me,Playlist:tempAllerPlFSng,SongName:this.state.currentOperableSong,SongId:this.state.currentOperableSongId,Pkey:pKey});
				console.log(dataSendable);
				$.ajax({
					url:"satayeMenuKyonOmyYaraIloveYou?data="+dataSendable,
					type:"GET",
					contentType:"json",
					async:true
				}).done((data)=>{
					console.log(data);
					if (data.Status=="OK") {
						Materialize.toast('all playlist updated successfully', 4000)
					}else {
						Materialize.toast('oops something went wrong! playlist is rollbacked! updation failed ! try again', 4000)
					}
				}).fail((jqXHR,statusText)=>{
					console.log(statusText);
				})
			}
			_mousewa_leaving(evt){
				evt.preventDefault();
				evt.stopPropagation();
				ReactDOM.unmountComponentAtNode(evt.currentTarget.parentElement)
			}
			render(){
				return (
					<div className="z_popup" style={zPopStyle(this.state.ml)}>
						<div className="chhoro_v_ye_ada" style={zPopSunOne}>
						{
							this.state.pl.map( (a,b) => {
								return (
									<div key={b} style={addToPlaylistInnerSome}>
										<div key={b} style={flFloatOne} >
											<div key={b} style={commonDisplayFlexSt} onClick={this._i_am_dying}>
												<form action="#"><p>
													<input type="checkbox" id="filled-in-box" className="filled-in white black-text" defaultChecked="false" />
													<label for="filled-in-box">{a}</label>
												</p></form>
												<input type="hidden" className="_checkable_input_music_collector_pratibha_sorry" value="unchecked" />
											</div>
										</div>
										{/*<div style={flFloatTwo}>
											<div style={commonDisplayFlexSt_text}>
												{a}
											</div>
										</div>
										*/}
									</div>
								)
							} )
						}
						</div>
						<div style={zPopSunTwo}>
							<input  type="button" value="update playlist" style={newPlaylistBtStyle_part_2} onClick={this._sun_sadaye_update_pl} />
						</div>
					</div>
				)
			}
		}

		const suggestionAbMusic={width:"100%",height:"400px",position:"relative",zIndex:"5",backgroundColor:"#f5f8fa",overflowY:"scroll"};
		const songSuggestTextStyle={width:"88%",backgroundColor:"white",minHeight:"50px",display:"flex",justifyContent:"center",alignItems:"center",border:"1px solid #e6ecf0",borderRadius:"4px",cursor:"pointer"};
		const spinnerFlexCont={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
		const ofBulltDaddyCursor={cursor:"pointer"};
		const songSuggestionBaap={width:"99%",marginBottom:"10px",backgroundColor:"white",minHeight:"60px",border:"1px solid #e6ecf0",borderRadius:"4px",display:"flex"};
		const songSuggestionBaapChild={width:"10%",backgroundColor:"white",minHeight:"50px",display:"flex",justifyContent:"center",alignItems:"center",borderRadius:"4px"};
		const clkClickBleFonting={cursor:"pointer",width:"50px",height:"50px",borderRadius:"50%"}
		class SuggestionOfMusic extends React.Component {
			constructor(props) {
				super(props);
				this.state={
					inputArr:this.props.Mapper,
					cnt:1
				};
				this.componentWillReceiveProps=this.componentWillReceiveProps.bind(this);
				this._peace_be_upon_muhammad=this._peace_be_upon_muhammad.bind(this);
				this._asalam_alayka_ya_nabi_allah=this._asalam_alayka_ya_nabi_allah.bind(this);
				this._ye_ham_aa_gaye_hai_kaha=this._ye_ham_aa_gaye_hai_kaha.bind(this);
			}
			_ye_ham_aa_gaye_hai_kaha(evt){
				evt.preventDefault();
				evt.stopPropagation();
				evt.persist();
				let hoho=evt.target.parentElement.lastChild.value;
				let hohoId=JSON.parse(evt.target.parentElement.parentElement.firstChild.lastChild.value).id;
				console.log("do pal ruka khabo ka karwan");
				let a=document.getElementsByClassName('z_popup')
				console.log(a);

				console.log("maulaya salllllllllllllllllllllllllllllllllllllllllllllll");
				console.log(evt.target.parentElement.clientWidth);
				let lolu=evt.target.parentElement.clientWidth+200;
				console.log("unnnnnnnnnndddddddddddeeeeeeffffffffffiiiiinnnnneeeeeedddd");
				console.log(evt.target.parentElement.parentElement.lastChild.hasChildNodes());

				let ofghtds=evt.target.parentElement.parentElement.firstChild.firstChild;
				console.log("llllpppppppppppppppppppppppppppppppppppppp");
				console.log(ofghtds);

				if (evt.target.parentElement.parentElement.lastChild.hasChildNodes()) {
					ReactDOM.unmountComponentAtNode(evt.target.parentElement.parentElement.lastChild);
				}else {
					if (a.length>0) {
						for (var i = 0; i < a.length; i++) {
	    				ReactDOM.unmountComponentAtNode(a[i].parentElement)
						}
					}
					ReactDOM.render(<Zpopup Ml={"-"+lolu+"px"} SongName={hoho} SongId={hohoId} />,evt.target.parentElement.parentElement.lastChild);
				}
				//ReactDOM.render(<Zpopup Ml={"-"+lolu+"px"} />,evt.target.parentElement.parentElement.lastChild);
				console.log(evt.target.parentElement.parentElement.lastChild.hasChildNodes());
				//console.log(evt.target.parentElement.parentElement.firstChild.lastChild.value);
				//ReactDOM.unmountComponentAtNode(document.getElementById('_js_root_animation'));
				//ReactDOM.render(<PlaylistPopup />,document.getElementById('_js_root_animation'))
			}
			_asalam_alayka_ya_nabi_allah(evt){
				evt.preventDefault();
				evt.stopPropagation();
				var that=this;
				let ofg=document.getElementById('_mm_large_textarea_breadge').value;
				let omr=this.state.inputArr;
				console.log("lollllollolololololololol11111111111111111111111111111111111111111111");
				console.log(JSON.stringify({SkipCount:that.state.cnt,Current:ofg,Present:omr}));
				let tempAuthMe=window.__rasoola.allah[1];
				let pKey=window.__rasoola.allah[4];
				if (that.state.inputArr.length<=50) {
					Rx.Observable.ajax({ url: `/anyMore?data=${JSON.stringify({SkipCount:that.state.inputArr.length,Current:ofg,Me:tempAuthMe,Pkey:pKey})}`, responseType: 'json',method:'GET'}).map(data=>data.response.all)
					.subscribe(
					function (data) {
						console.log(data);
						that.setState({
							inputArr:data
						});


					},
				function (error) {
						console.log(error);
					}
				);
				}

			}
			_peace_be_upon_muhammad(evt){
				let i=JSON.parse(evt.target.lastChild.value).id;
				var event = new CustomEvent(
					"iiffrraammee",
						{
							detail: {
								message: i,
								time: new Date(),
							},
							bubbles: true,
							cancelable: true
						}
					);
					window.dispatchEvent(event)
				//document.getElementById('_single_iframe').src+= "&autoplay=1";
				//evt.preventDefault();
				//evt.stopPropagation();
				//document.getElementById('_single_iframe').src="'https://www.youtube.com/embed/"+JSON.parse(evt.target.lastChild.value).id+"'";
			}
			componentWillReceiveProps(newProps){
				this.setState({
					inputArr:newProps.Mapper
				})
			}
			render(){
				return (
					<div className="chhoro_v_ye_ada" style={suggestionAbMusic}>
					{
						this.state.inputArr.length==0?(<div style={spinnerFlexCont}><Spinner /></div>):(
							this.state.inputArr.map( (a,b) => {
								return (
									<div style={songSuggestionBaap} key={b}>
										<div style={songSuggestTextStyle} onClick={this._peace_be_upon_muhammad}>{a.title}
											<input type="hidden" value={JSON.stringify(a)} />
										</div>
										<div style={songSuggestionBaapChild}>
										<i style={ofBulltDaddyCursor} onClick={this._ye_ham_aa_gaye_hai_kaha} className="material-icons">playlist_add</i>
											{/*<img src="/plus-button.gif" style={clkClickBleFonting}  title="Add to playlist" />*/}
											<input type="hidden" value={JSON.stringify(a.title)} />
										</div>
										<div>
										</div>
									</div>
								)
							} )
						)
					}
					<div style={songSuggestTextStyle} onClick={this._asalam_alayka_ya_nabi_allah}>Load more
						<input type="hidden" value={JSON.stringify(this.state.inputArr)} />
					</div>
					</div>
				)
			}
		}


		const actVideoPlayer={width:"99%",height:"100%"};

		class MoreIframe extends React.Component {
			constructor(props){
				super(props);
				this.state = {
					rc:this.props.Rc
				};
				this.componentWillReceiveProps=this.componentWillReceiveProps.bind(this);
				this._mm_vid_playing=this._mm_vid_playing.bind(this);
			}
			_mm_vid_playing(evt){
				alert("hi");
			}
			componentWillReceiveProps(nextProps){
				this.setState({
					rc:nextProps.Rc
				})
			}
			render(){
				return (
					<iframe style={actVideoPlayer} id="_single_iframe"  src={this.state.rc} onPlay={this._mm_vid_playing} allowFullScreen></iframe>
				);
			}
		}



		const myEnjoymentVideoBox={width:"100%",height:"100%"};
		const videoContainer={width:"100%",height:"300px"};
		const videoContainerAfter={width:"100%",height:"50px"};

		const inputTypeSerchMusic={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
		const actInputBox={width:"99%",height:"30px",textIndent:"10px",border:"1px solid #e6ecf0"};
		const searchSuggestionMusic={width:"100%"};
		class MyEnjoyment extends React.Component {
			constructor(props) {
				super(props);
				this.state = {
					searchBoxText:"",
					inputArr:[],
					maybeDangerous:false,
					urliuri:window.__current_playable_song,
					autoplay:1,
					myPlayingBool:false,
					startSeekAjax:0
				};
				this._ms="";
				this._mm_videoSearchBoxChng=this._mm_videoSearchBoxChng.bind(this);
				this._mm_ipt_serch_music_bluri=this._mm_ipt_serch_music_bluri.bind(this);
				this.componentDidMount=this.componentDidMount.bind(this);
				this.componentWillMount=this.componentWillMount.bind(this);
				this._mm_vid_playing=this._mm_vid_playing.bind(this);
				this.onPlayerStateChange=this.onPlayerStateChange.bind(this);
				this.componentWillUnmount=this.componentWillUnmount.bind(this);
			}
			onPlayerStateChange(evt){
				var evx=evt;
				var eventsVidAjax = new CustomEvent(
					"ajaxInfoVid",
					{
						detail: {
							message: this.state.urliuri,
							time: new Date(),
					},
					bubbles: true,
					cancelable: true
				}
			 );
			 //console.log(evx.data);
			 if (evx.data==1) {
				 if (!this.state.myPlayingBool) {
 					window.dispatchEvent(eventsVidAjax);
 					/*this.setState({
 						myPlayingBool:true
 					})*/
 				}
			 }


				/*if (sessionStorage.myPlayingBool==undefined && sessionStorage.myPlayingSendAjaxCount==undefined ) {
					sessionStorage.myPlayingBool=JSON.stringify({kke:true});
					sessionStorage.myPlayingSendAjaxCount=JSON.stringify({kke:0});
				}else {
					if (sessionStorage.myPlayingSendAjaxCount!=undefined) {
						let jittuKisabba=JSON.parse(sessionStorage.myPlayingSendAjaxCount).kke;
						let asalamAlayka=jittuKisabba+1;
						sessionStorage.myPlayingSendAjaxCount=JSON.stringify({kke:asalamAlayka});
					}
					if (sessionStorage.myPlayingBool==undefined) {
						sessionStorage.myPlayingBool=JSON.stringify({kke:true});
					}
				}*/

			 //alert(evx.data)
			 /*if (evx.data == 1) {
				 window.dispatchEvent(eventsVidAjax);
			 }*/

			}
			componentWillMount(){
				var that=this;
				window.addEventListener("iiffrraammee",(evt) => {
					that.setState({
						urliuri:evt.detail.message
					})
				},true)
				if (window.__current_playable_song==undefined) {
					window.__current_playable_song="eLFW---YSWE";
				}
				window.addEventListener("playMySongPratibha",(evt) => {
					//alert(evt)
					that.setState({
						urliuri:evt.detail.message
					})
				},true)
				window.addEventListener("ajaxInfoVid",(evt) => {
					//evt.preventDefault();
					//evt.stopPropagation();
					console.log(evt.detail.message);

				},true)
				window.addEventListener("CreatePlayer",(evt) => {
					var player = new YT.Player('existing-iframe-example', {
			        events: {
			          'onStateChange': that.onPlayerStateChange
			        }
			    });
					window.addEventListener("destroyPlayer",(evt) => {
						if (player) {
							player.destroy();
						}
					})
				})
			}
			componentWillUnmount(){
				window.removeEventListener("playMySongPratibha", ()=>{console.log("done");});
				window.removeEventListener("iiffrraammee", ()=>{console.log("done");});
				window.removeEventListener("CreatePlayer", ()=>{console.log("done");});
				window.removeEventListener("destroyPlayer", ()=>{console.log("done");});
				var eventsVidCrPlayerDest = new CustomEvent(
					"destroyPlayer",
					{
						detail: {
							message: "existing-iframe-example",
							time: new Date(),
					},
					bubbles: true,
					cancelable: true
				}
			 );
			 window.dispatchEvent(eventsVidCrPlayerDest);
			}
			componentDidMount(){
				/*if (window.__current_playable_song!=this.state.urliuri) {
					this.setState({
						urliuri:window.__current_playable_song
					})
				}*/
				var inp=this.refs._mm_large_textarea;
				var that=this;
				//if (window.player == undefined) {
					var eventsVidCrPlayer = new CustomEvent(
						"CreatePlayer",
						{
							detail: {
								message: "existing-iframe-example",
								time: new Date(),
						},
						bubbles: true,
						cancelable: true
					}
				 );
				 window.dispatchEvent(eventsVidCrPlayer);
				//}

				//ReactDOM.render(<MoreIframe Rc={"''https://www.youtube.com/embed/M7lc1UVf-VE?autoplay=1''"} />,document.getElementById('_more_iframe'))
				if(!this.state.maybeDangerous){
					const source = Rx.Observable.fromEvent(inp, 'input');
					const sour1=source.debounceTime(500).map(evt=>evt.target.value);
					let tempMe=window.__rasoola.allah[1];
					let pKey=window.__rasoola.allah[4];
					const subscribe = sour1.subscribe((val) => {
						console.log("valllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll");
						console.log(val);
						Rx.Observable.ajax({ url: `/any/${tempMe}/${pKey}/${val}`, responseType: 'json',method:'GET'}).map(data=>data.response.all)
	  				.subscribe(
	    			function (data) {
	      			console.log(data);
							that.setState({
								inputArr:data
							});
							if (!that.state.maybeDangerous) {
								ReactDOM.render(<SuggestionOfMusic Mapper={data} />,document.getElementById('_songs_search_suggestion'));
							}

	    			},
	    		function (error) {
		      		console.log(error);
	    			}
	  			);
					});
				}
			}
			_mm_ipt_serch_music_bluri(evt){
				evt.preventDefault();
				evt.stopPropagation();
				if (evt.target.value=="") {
					this.setState({
						maybeDangerous:true,
					});
					ReactDOM.unmountComponentAtNode(document.getElementById('_songs_search_suggestion'));
				}
			}
			_mm_videoSearchBoxChng(evt){
				evt.preventDefault();
				evt.stopPropagation();
				if(evt.target.value==""){
					this.setState({
						maybeDangerous:true,
						searchBoxText:evt.target.value
					});
				}else {
					this.setState({
						searchBoxText:evt.target.value,
					});
				}


				ReactDOM.render(<SuggestionOfMusic Mapper={this.state.inputArr} />,document.getElementById('_songs_search_suggestion'));
			}
			_mm_vid_playing(evt){
				evt.preventDefault();
				evt.stopPropagation();
				alert("hi");
			}
			render(){
				return (
					<div style={myEnjoymentVideoBox}>
						<div id="_more_iframe" style={videoContainer} onClick={this._mm_vid_playing}>
							<iframe id="existing-iframe-example" src={"https:\/\/www.youtube.com\/embed\/"+this.state.urliuri+"?enablejsapi=1"} style={actVideoPlayer} allowFullScreen ></iframe>
						</div>
						<div style={videoContainerAfter}>
							<div style={inputTypeSerchMusic}>
								<input id="_mm_large_textarea_breadge" ref="_mm_large_textarea" type="search" style={actInputBox} placeholder="search youtube videos" value={this.state.searchBoxText} onChange={this._mm_videoSearchBoxChng} onBlur={this._mm_ipt_serch_music_bluri} />
							</div>
							<div id="_songs_search_suggestion" style={searchSuggestionMusic}>

							</div>
						</div>
					</div>
				)
			}
		}


		// attachment popup for postBoxMainStyle



		const abcStylePopup_post={width:"99%",height:"1240px",position:"absolute",zIndex:10,backgroundColor:"transparent"};
		const popupPlaylistDf_post={width:"100%",height:"100%",display:"flex",justifyContent:"center"};
		const actPlaylistQuestPopup_post={width:"400px",height:"400px",border:"1px solid #e6ecf0",marginTop:"150px"};
		const playlistPopupHead_post={width:"100%",height:"40px",backgroundColor:"white",marginBottom:"10px"};
		const playlistPopupBody_post={width:"100%",height:"340px",backgroundColor:"white"};
		const closePlaylistPopupBefore_post={width:"70%",height:"100%",display:"inline",float:"left"};
		const closePlaylistPopupAfter_post={width:"30%",height:"100%",display:"inline",float:"right"};
		const dflexCloseBefore_post={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
		const dflexCloseAfter_post={width:"100%",height:"100%",display:"flex",justifyContent:"flex-end",alignItems:"center"};
		const closingPopupFontwa_post={cursor:"pointer"};
		const msgInformationToAddPlaylist_post={width:"100%",height:"40px",display:"flex",justifyContent:"center",alignItems:"center"};
		const actPlaylistDataStyle_post={width:"100%",height:"260px",overflowY:"scroll"};
		const updatePlaylistStyle_post={width:"100%",height:"40px"};
		const createPlaylistButtonDadaji_post={width:"100%",height:"100%",display:"inline",float:"left"};
		const updatePlaylistButtonDadaji_post={width:"50%",height:"100%",display:"inline",float:"right"};
		const createPlaylistButtonDady_post={width:"99%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center",border:"1px solid #e6ecf0"};
		const updatePlaylistButtonDady_post={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
		const closingPopupFontwaOf_post={cursor:"pointer"};
		const duniya_me_nahi_hai_post={width:"100%",height:"200px"};
		const kudrat_hans_paregi_post={width:"100%",height:"33%"};
		const man_amadeham_post={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"flex-end"};
		const man_amadeham_1_post={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
		const man_amadeham_2_post={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"flex-start"};
		const aa_v_ja_bahon_me_post={width:"80%",height:"25px"};
		class AttachWithPostPopup extends React.Component {
			constructor(props) {
				super(props);
				this.state = {
					statusText:"",
					initBeg:0
				};
				this.componentWillMount=this.componentWillMount.bind(this);
				this.componentWillUnmount=this.componentWillUnmount.bind(this);
				this._closing_playlist_popup_bhai=this._closing_playlist_popup_bhai.bind(this);
				this._let_me_get_typed_array=this._let_me_get_typed_array.bind(this);
			}
			_let_me_get_typed_array(evt){
				evt.preventDefault();
				evt.stopPropagation();
				evt.persist();
				var that=this;
				var reader = new FileReader();
				reader.onload = function(event) {
    				var contents = event.target.result;
    				console.log(contents.byteLength);
    				var uAr=new Uint8Array(contents);
    				console.log(uAr);
						var who=window.__rasoola.allah[1];
    				var xhttp = new XMLHttpRequest();

    				xhttp.onreadystatechange = function() {
    					if (this.readyState == 4 && this.status == 200) {
    						//console.log(this.responseText)
    						//_gotta_ok_main_shop_icon

    						let vx=JSON.parse(this.responseText);
    						console.log(vx)
    						sessionStorage.postMap=JSON.stringify({vax:vx.name});
    						that.setState({
    							statusText:`!!Success!! Total uploaded size = ${vx.size}`,
    							fDisabled:false
    						});
    						//ReactDOM.render(<FakeIcon SR={vx.name} />,document.getElementById('_gotta_ok_main_shop_icon'))
    					}
    				};

    				xhttp.open("POST", "https://pratibhash.herokuapp.com/postMyClientImagePratibha", true);
    				//xhttp.setRequestHeader('Content-Type','application/octet-stream')
    				console.log(xhttp.upload)
    				xhttp.upload.addEventListener("progress",function(e) {
						var pc = parseInt((e.loaded / e.total * 100));
						//progress.style.backgroundPosition = pc + "% 0";
						console.log(pc);
						that.setState({
							initBeg:pc
						})
					},false);
					xhttp.setRequestHeader('Content-Type', 'application/json');
					var s=JSON.stringify({val:uAr,who:who});
					xhttp.send(s);
				};
				reader.onerror = function(event) {
    				console.error("File could not be read! Code " + event.target.error.code);
				};
				reader.readAsArrayBuffer(evt.target.files[0]);
			}
			_closing_playlist_popup_bhai(evt){
				evt.preventDefault();
				evt.stopPropagation();
				ReactDOM.unmountComponentAtNode(document.getElementById('_js_root_animation'))
			}
			componentWillMount(){
				var events = new CustomEvent(
					"opacity",
					{
						detail: {
							message: 0.2,
							time: new Date(),
					},
					bubbles: true,
					cancelable: true
				}
			 );
			 window.dispatchEvent(events);
			}
			componentWillUnmount(){
				var events = new CustomEvent(
					"opacity",
					{
						detail: {
							message: 1,
							time: new Date(),
					},
					bubbles: true,
					cancelable: true
				}
			 );
			 window.dispatchEvent(events);
			}
			render(){
				return (
					<div style={abcStylePopup_post}>
						<div style={popupPlaylistDf_post}>
							<div style={actPlaylistQuestPopup_post}>
								<div style={playlistPopupHead_post}>
									<div style={closePlaylistPopupBefore_post}>
										<div style={dflexCloseBefore_post}>
											<font size={4}>Attach file</font>
										</div>
									</div>
									<div style={closePlaylistPopupAfter_post}>
										<div style={dflexCloseAfter_post}>
											<font style={closingPopupFontwa_post} size={5} onClick={this._closing_playlist_popup_bhai}>&#9932;</font>
										</div>
									</div>
								</div>
								<div style={playlistPopupBody_post}>
									<div style={msgInformationToAddPlaylist_post}>Please choose image to attach with your post.
									</div>
									<div id="_jaaniye_heeriye_oo_hs" style={actPlaylistDataStyle_post}>
										<div style={duniya_me_nahi_hai_post}>
											<div style={kudrat_hans_paregi_post}>
												<div style={man_amadeham_post}>
													<input type="file" name="change_new_dp" id="change_new_dp" className="change_new_dp" onChange={this._let_me_get_typed_array} />
												</div>
											</div>
											<div style={kudrat_hans_paregi_post}>
												<div style={man_amadeham_1_post}>
													<progress style={aa_v_ja_bahon_me_post} id="_change_dp_monitor" value={this.state.initBeg} max="100"></progress>
												</div>
											</div>
											<div style={kudrat_hans_paregi_post}>
												<div style={man_amadeham_2_post}>
													<font size={4}>{this.state.statusText}</font>
												</div>
											</div>
										</div>
									</div>
									<div style={updatePlaylistStyle_post}>
										<div style={createPlaylistButtonDadaji_post}>
											<div style={createPlaylistButtonDady_post}>
												<font style={closingPopupFontwaOf_post} size={5} onClick={this._closing_playlist_popup_bhai}>Finish</font>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				)
			}
		}




		// end of attachment popup

		//emoji queue management





		const abcStylePopup_emoji={width:"99%",height:"1240px",position:"absolute",zIndex:10,backgroundColor:"transparent"};
		const popupPlaylistDf_emoji={width:"100%",height:"100%",display:"flex",justifyContent:"center"};
		const actPlaylistQuestPopup_emoji={width:"400px",height:"400px",border:"1px solid #e6ecf0",marginTop:"150px"};
		const playlistPopupHead_emoji={width:"100%",height:"40px",backgroundColor:"white",marginBottom:"10px"};
		const playlistPopupBody_emoji={width:"100%",height:"340px",backgroundColor:"white"};
		const closePlaylistPopupBefore_emoji={width:"70%",height:"100%",display:"inline",float:"left"};
		const closePlaylistPopupAfter_emoji={width:"30%",height:"100%",display:"inline",float:"right"};
		const dflexCloseBefore_emoji={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
		const dflexCloseAfter_emoji={width:"100%",height:"100%",display:"flex",justifyContent:"flex-end",alignItems:"center"};
		const closingPopupFontwa_emoji={cursor:"pointer"};
		const msgInformationToAddPlaylist_emoji={width:"100%",height:"40px",display:"flex",justifyContent:"center",alignItems:"center"};
		const actPlaylistDataStyle_emoji={width:"100%",height:"260px",overflowY:"scroll"};
		const updatePlaylistStyle_emoji={width:"100%",height:"40px"};
		const createPlaylistButtonDadaji_emoji={width:"100%",height:"100%",display:"inline",float:"left"};
		const updatePlaylistButtonDadaji_emoji={width:"50%",height:"100%",display:"inline",float:"right"};
		const createPlaylistButtonDady_emoji={width:"99%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center",border:"1px solid #e6ecf0"};
		const updatePlaylistButtonDady_emoji={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
		const closingPopupFontwaOf_emoji={cursor:"pointer"};
		const duniya_me_nahi_hai_emoji={width:"100%",height:"200px"};
		const kudrat_hans_paregi_emoji={width:"100%",height:"33%"};
		const man_amadeham_emoji={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"flex-end"};
		const man_amadeham_1_emoji={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
		const man_amadeham_2_emoji={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"flex-start"};
		const aa_v_ja_bahon_me_emoji={width:"80%",height:"25px"};
		const tajdare_haram_ho_nigahe_karam={width:"100%",height:"30px"};
		const tajdare_haram_ho_nigahe_karam_1={width:"40%",height:"100%",display:"inline",float:"left"};
		const tajdare_haram_ho_nigahe_karam_2={width:"20%",height:"100%",display:"inline",float:"left"};
		const tajdare_haram_ho_nigahe_karam_3={width:"40%",height:"100%",display:"inline",float:"left"};
		const tajdare_haram_d_flex={width:"100%",height:"100%",display:"flex",justifyContent:"flex-end",alignItems:"center"};
		const tajdare_haram_d_flex_1={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
		const tajdare_haram_d_flex_2={width:"100%",height:"100%",display:"flex",justifyContent:"flex-start",alignItems:"center"};
		class EmojiQueueManagement extends React.Component {
			constructor(props) {
				super(props);
				this.state = {
					statusText:"",
					initBeg:0
				};
				this.componentWillMount=this.componentWillMount.bind(this);
				this.componentWillUnmount=this.componentWillUnmount.bind(this);
				this._closing_playlist_popup_bhai=this._closing_playlist_popup_bhai.bind(this);
				this._let_me_get_typed_array=this._let_me_get_typed_array.bind(this);
			}
			_let_me_get_typed_array(evt){

			}
			_closing_playlist_popup_bhai(evt){
				evt.preventDefault();
				evt.stopPropagation();
				ReactDOM.unmountComponentAtNode(document.getElementById('_js_root_animation'))
			}
			componentWillMount(){
				var events = new CustomEvent(
					"opacity",
					{
						detail: {
							message: 0.2,
							time: new Date(),
					},
					bubbles: true,
					cancelable: true
				}
			 );
			 window.dispatchEvent(events);
			}
			componentWillUnmount(){
				var events = new CustomEvent(
					"opacity",
					{
						detail: {
							message: 1,
							time: new Date(),
					},
					bubbles: true,
					cancelable: true
				}
			 );
			 window.dispatchEvent(events);
			}
			render(){
				return (
					<div style={abcStylePopup_emoji}>
						<div style={popupPlaylistDf_emoji}>
							<div style={actPlaylistQuestPopup_emoji}>
								<div style={playlistPopupHead_emoji}>
									<div style={closePlaylistPopupBefore_emoji}>
										<div style={dflexCloseBefore_emoji}>
											<font size={4}>Manage emoji queue</font>
										</div>
									</div>
									<div style={closePlaylistPopupAfter_emoji}>
										<div style={dflexCloseAfter_emoji}>
											<font style={closingPopupFontwa_emoji} size={5} onClick={this._closing_playlist_popup_bhai}>&#9932;</font>
										</div>
									</div>
								</div>
								<div style={playlistPopupBody_emoji}>
									<div style={msgInformationToAddPlaylist_emoji}>Please click on the emoji to remove it permanently from the emoji queue.
									</div>
									<div id="_jaaniye_heeriye_oo_hs" style={actPlaylistDataStyle_emoji}>
										<div style={duniya_me_nahi_hai_emoji}>
											{
												window.__m_emoji_queue.removable.map( (a,b) => {
													return (
														<div key={b} style={tajdare_haram_ho_nigahe_karam}>
															<div style={tajdare_haram_ho_nigahe_karam_1}>
																<div style={tajdare_haram_d_flex}>
																	{
																		a.pos
																	}
																</div>
															</div>
															<div style={tajdare_haram_ho_nigahe_karam_2}>
																<div style={tajdare_haram_d_flex_1}>
																</div>
															</div>
															<div style={tajdare_haram_ho_nigahe_karam_3}>
																<div style={tajdare_haram_d_flex_2}>
																	{
																		a.emoji
																	}
																</div>
															</div>
														</div>
													)
												} )
											}
										</div>
									</div>
									<div style={updatePlaylistStyle_emoji}>
										<div style={createPlaylistButtonDadaji_emoji}>
											<div style={createPlaylistButtonDady_emoji}>
												<font style={closingPopupFontwaOf_emoji} size={5} onClick={this._closing_playlist_popup_bhai}>Finish</font>
											</div>
										</div>

									</div>
								</div>
							</div>
						</div>
					</div>
				)
			}
		}





		//end emoji queue


		//emoji class for post begini

		var salla_alan_nabi= (cws) =>{
			return {width:"250px",height:"250px",position:"absolute",marginLeft:cws,backgroundColor:"white",border:"1px solid #e6ecf0",overflowY:"scroll",borderRadius:"5px",zIndex:"8"}
		}
		const sidha_rasta={marginLeft:"3px",marginLeft:"3px",marginTop:"3px",marginBottom:"3px",display:"inline-block"}
		const you_are_my_strength={textAlign:"center"};
		const cursorStylePointed={cursor:"pointer"};

		class EmojiForPost extends React.Component {
			constructor(props) {
				super(props);
				this.state = {
					barakAllahOne:"Please note that after clicking on emoji it will be added to emoji queue and it will be visible after the post have been published.",
					barakAllahTwo:"click here",
					barakAllahThree:"to manage your current emoji queue for new post."
				};
				this._habib_allah_rasool_allah=this._habib_allah_rasool_allah.bind(this);
				this.componentDidMount=this.componentDidMount.bind(this);
				this._mm_manage_emoji_queue=this._mm_manage_emoji_queue.bind(this);
			}
			_mm_manage_emoji_queue(evt){
				evt.preventDefault();
				evt.stopPropagation();
				ReactDOM.unmountComponentAtNode(document.getElementById('_js_root_animation'));
				ReactDOM.render(<EmojiQueueManagement />,document.getElementById('_js_root_animation'))
			}
			_habib_allah_rasool_allah(evt){
				evt.preventDefault();
				evt.stopPropagation();
				evt.persist()
					let emx=evt.currentTarget.parentElement.parentElement.lastChild.value;
					let alUnchi=document.getElementById('_moniterable_outside').innerHTML;
					document.getElementById('_moniterable_outside').innerHTML=`${alUnchi}<i class=${emx} contenteditable="false"></i>`;
					var eventsLora = new CustomEvent(
						"insertEmoji",
						{
							detail: {
								message: 0.2,
								time: new Date(),
						},
						bubbles: true,
						cancelable: true
					}
				 );
				 window.dispatchEvent(eventsLora);


				//alert(evt.currentTarget.parentElement.lastChild.value);
				//window.__m_emoji_queue.removable
				/*if (window.__m_emoji_queue != undefined) {
					let salaalannabi=window.__m_emoji_queue.removable;
					salaalannabi.push({pos:window.__current_charecter_position?window.__current_charecter_position:0,emoji:emx});
					window.__m_emoji_queue={removable:salaalannabi};
				}else {
					let muhammadUrl=[];
					muhammadUrl.push({pos:window.__current_charecter_position?window.__current_charecter_position:0,emoji:emx});
					window.__m_emoji_queue={removable:muhammadUrl};
				}*/
			}
			componentDidMount(){
				var that=this;
				setTimeout(function(){
					that.setState({
						barakAllahOne:"",
						barakAllahTwo:"click here",
						barakAllahThree:"to manage your current emoji queue for new post."
					})
				}, 5000);
			}
			render(){
				let uskisab_nisaan=document.getElementById('_mohhamadun_saiyidul_walkhari').clientWidth;
				let uskisab_nisaan_1=document.getElementById('_mohhamadun_saiyidul_walkhari_1').clientWidth;
				let uskisab_nisaan_2=document.getElementById('_mohhamadun_saiyidul_walkhari_2').clientWidth;
				let vfd=uskisab_nisaan+uskisab_nisaan_1+uskisab_nisaan_2+"px";
				return (
					<div id="salla_alan_nabi_ok" style={salla_alan_nabi(vfd)}>
					{/*<div style={you_are_my_strength}><font size={2}>{this.state.barakAllahOne}&nbsp;</font><font size={3} color="blue" style={cursorStylePointed} onClick={this._mm_manage_emoji_queue}>{this.state.barakAllahTwo}</font><font size={2}>&nbsp;{this.state.barakAllahThree}</font></div>*/}
						{
							window.__lord_visnu.theAbsolute.map( (a,b)=> {
								return (
									<div key={b} style={sidha_rasta}>
										<a className="btn btn-floating white black-text" ><i className={a} onClick={this._habib_allah_rasool_allah} style={cursorStylePointed}></i></a>
										<input type="hidden" value={`"${a}"`} />
									</div>
								)
							} )
						}
					</div>
				)
			}
		}



		//emoji end




		//comment box

		const postBoxMainStyle_comment={width:"100%",height:"100%"};
		const texta_cnt_comment={width:"100%",height:"50%",overflowY:"scroll"};
		const texta_after_cnt_comment={width:"100%",height:"50%"};
		const texta_act_style_comment={width:"99.7%",height:"98.5%",border:"1px solid #e6ecf0",textIndent:"10px",fontSize:"18px",cursor:"auto"};
		const dflex_bt_style_comment={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
		//const bt_nabi_rasoola_c={width:"5em",height:"50%",backgroundColor:"transparent",border:"1px solid #e6ecf0",marginRight:"2%",cursor:"pointer"};
		const bt_nabi_rasoola_billa_comment={width:"3em",height:"50%",backgroundColor:"transparent",marginLeft:"0%"};
		const bt_nabi_rasoola_nabi_comment={width:"68%",height:"50%",backgroundColor:"white",border:"none"};
		const mawlaya_sali_wa_salim_comment={width:"10%",height:"48%",backgroundColor:"transparent"};
		const khulli_hi_mi_comment_comment={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
		const khulli_hi_mi_rabbi_comment={width:"100%",height:"100%",display:"flex",justifyContent:"flex-start",alignItems:"center"};
		//const iman_abdan={border:"1px solid #e6ecf0",cursor:"pointer"}
		class CommentBox extends React.Component {
			constructor(props) {
				super(props);
				this.state = {
					totalChar:256,
					typed:0,
					textaVal:"",
					allahGuide:"",
					reference:this.props.Reference
				};
				this._mm_texta_change=this._mm_texta_change.bind(this);
				this._mm_i_believe_you=this._mm_i_believe_you.bind(this);
				this._mm_barak_allah=this._mm_barak_allah.bind(this);
				this.componentWillMount=this.componentWillMount.bind(this);
				this._thinking_about_you=this._thinking_about_you.bind(this);
				this._thinking_about_you_fuck=this._thinking_about_you_fuck.bind(this);
				this._asalam_alayka_ya_rasool_allah=this._asalam_alayka_ya_rasool_allah.bind(this);
			}
			_asalam_alayka_ya_rasool_allah(evt){
				evt.preventDefault();
				evt.stopPropagation();
				let tar=evt.currentTarget;
				let valTar=$(tar).closest('._mere_dil_ko_kuchh_nahi_bhaye_sajna').find('._temp_ref_comment').val();
				console.log("kgggggggggggggggggggrghrjggggggggggggggggggggggggggggggggggggggggggggh");
				console.log(valTar);
			}
			_thinking_about_you_fuck(evt){
				evt.preventDefault();
				evt.stopPropagation();
				if (evt.target.textContent.length==0) {
					evt.target.textContent="Wana comment on above activity ??";
				}
			}
			_thinking_about_you(evt){
				evt.preventDefault();
				evt.stopPropagation();
				if (evt.target.textContent=="Wana comment on above activity ??") {
					evt.target.textContent="";
				}
				//evt.target.textContent="";
			}
			componentDidMount(){
				window.__current_charecter_position_comment=this.state.typed;
				//HTMLCollection.prototype[Symbol.iterator] = Array.prototype.values;
				var mmmuuuuu=document.getElementsByClassName('_moniterable_outside_comment');
				for (var i=0; i< mmmuuuuu.length; i++) {
					mmmuuuuu[i].textContent="Wana comment on above activity ??"
				}
				//console.log("reference data for comment");
				//console.log(this.state.reference);
				//document.getElementById('_moniterable_outside_comment').textContent="Share your mind stuffs..";
			}
			_mm_radhitu_billahi(evt){
				//ReactDOM.unmountComponentAtNode(document.getElementById('wa_bil_islami_midina'))
				//ReactDOM.render(<EmojiForPost />,document.getElementById('wa_bil_islami_midina'))
				if (document.getElementById('wa_bil_islami_midina_comment').children[0]==undefined) {
					ReactDOM.render(<EmojiForPost />,document.getElementById('wa_bil_islami_midina_comment'))
				}else {
					ReactDOM.unmountComponentAtNode(document.getElementById('wa_bil_islami_midina_comment'))
				}
			}
			_mm_barak_allah(evt){
				evt.preventDefault();
				evt.stopPropagation();
				let who=window.__rasoola.allah[1];
				/*let sammi_meri_waar=document.getElementById('_moniterable_outside_comment').innerHTML;
				//console.log(sammi_meri_waar);
				let bt=btoa(sammi_meri_waar);
				let tb=atob(bt)
				console.log(bt);
				console.log(tb);
				let hulakumwalana=sessionStorage.postMap==undefined?"":JSON.parse(sessionStorage.postMap).vax;
				let khaiyr={content:sammi_meri_waar,who:who,attachment:hulakumwalana,when:`${Date.now()}`}
				console.log(khaiyr);
				Rx.Observable.ajax.post('/saveMyPostWithAttachment',JSON.stringify(khaiyr),{responseType: 'json',contentType:'json'}).map(data=>data.response.All)
				.subscribe(
				function (data) {
					console.log(data);


				},
			function (error) {
					console.log(error);
				}
			);*/
			}
			_mm_i_believe_you(evt){
				evt.preventDefault();
				evt.stopPropagation();
				ReactDOM.unmountComponentAtNode(document.getElementById('_js_root_animation'));
				ReactDOM.render(<AttachWithCommentPopup />,document.getElementById('_js_root_animation'))
			}
			_mm_texta_change(evt){
				evt.preventDefault();
				evt.stopPropagation();
				var that=this;
				/*if (window.__current_charecter_position <256) {
					let vl=evt.target.textContent;
						that.setState({
							typed:window.__current_charecter_position+1
						})
				}else {
					let vaxc=document.getElementById('_moniterable_outside').innerHTML.pop();
				}*/
				/*let vl=evt.target.textContent;
				//alert(vl.length)

				if(vl.length<=256){
					this.setState({
						textaVal:vl,
						typed:vl.length
					})
				}else {
					this.setState({
						textaVal:this.state.textaVal,
						typed:this.state.textaVal.length
					})
				}*/
			}
			componentWillMount(){
				var that=this;
				/*window.addEventListener("insertEmoji_comment",(evt) => {
					that.setState({
						typed:that.state.typed+1
					})
				},true)*/
			}
			render(){
				return (
					<div style={postBoxMainStyle_comment} id="_ni_azur_mustafa_allah_comment">
						<div className="_moniterable_outside_baap_comment" style={texta_cnt_comment}>
							{/*<textarea style={texta_act_style} placeholder="share your mind stuff" value={this.state.textaVal} onChange={this._mm_texta_change}></textarea>*/}
							<div className="z-depth-5 _moniterable_outside_comment" contentEditable={"true"} style={texta_act_style_comment} onInput={this._mm_texta_change} onFocus={this._thinking_about_you} onBlur={this._thinking_about_you_fuck}></div>
						</div>
						<div style={texta_after_cnt_comment}>
							<div style={postBoxMainStyle_comment}>
								<div style={dflex_bt_style_comment}>
									{/*<input type="button" style={bt_nabi_rasoola} value="share" onClick={this._mm_barak_allah} />*/}
									<a id="_mohhamadun_saiyidul_walkhari_comment" className="btn btn-floating white" onClick={this._asalam_alayka_ya_rasool_allah}><i className="material-icons black-text">publish</i></a>
									<div id="_mohhamadun_saiyidul_walkhari_1_comment" style={bt_nabi_rasoola_billa_comment}>
										<div style={khulli_hi_mi_comment_comment}>
											<div onClick={this._mm_i_believe_you}>
												<a className="btn btn-floating white"><i className="material-icons black-text">attachment</i></a>
											</div>
										</div>
									</div>
									<div id="_mohhamadun_saiyidul_walkhari_2_comment" style={mawlaya_sali_wa_salim_comment}>
										<div style={khulli_hi_mi_rabbi_comment}>
											{/*
												<div onClick={this._mm_radhitu_billahi}>
													<a className="btn btn-floating white"><i className="material-icons black-text">accessibility</i></a>
												</div>
												*/}
										</div>
									</div>
									{/*

										*/}
									<input type="button"  style={bt_nabi_rasoola_nabi_comment} disabled="true" />
									{/*<input type="button" style={bt_nabi_rasoola_billa} value="attachment" onClick={this._mm_i_believe_you} />*/}


								</div>
							</div>
						</div>
						<div id="wa_bil_islami_midina_comment">
						</div>
					</div>
				)
			}
		}

















		const postBoxMainStyle={width:"100%",height:"100%"};
		const texta_cnt={width:"100%",height:"70%",overflowY:"scroll"};
		const texta_after_cnt={width:"100%",height:"30%"};
		const texta_act_style={width:"99.7%",height:"98.5%",border:"1px solid #e6ecf0",textIndent:"10px",fontSize:"18px",cursor:"auto"};
		const dflex_bt_style={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
		const bt_nabi_rasoola={width:"5em",height:"50%",backgroundColor:"transparent",border:"1px solid #e6ecf0",marginRight:"2%",cursor:"pointer"};
		const bt_nabi_rasoola_billa={width:"3em",height:"50%",backgroundColor:"transparent",marginLeft:"0%"};
		const bt_nabi_rasoola_nabi={width:"68%",height:"50%",backgroundColor:"white",border:"none"};
		const mawlaya_sali_wa_salim={width:"10%",height:"48%",backgroundColor:"transparent"};
		const khulli_hi_mi={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
		const khulli_hi_mi_rabbi={width:"100%",height:"100%",display:"flex",justifyContent:"flex-start",alignItems:"center"};
		const iman_abdan={border:"1px solid #e6ecf0",cursor:"pointer"}
		class PostBox extends React.Component {
			constructor(props) {
				super(props);
				this.state = {
					totalChar:256,
					typed:0,
					textaVal:"",
					allahGuide:"",
					pageType:this.props.PageType
				};
				this._mm_texta_change=this._mm_texta_change.bind(this);
				this._mm_i_believe_you=this._mm_i_believe_you.bind(this);
				this._mm_barak_allah=this._mm_barak_allah.bind(this);
				this.componentWillMount=this.componentWillMount.bind(this);
				this._thinking_about_you=this._thinking_about_you.bind(this);
				this._thinking_about_you_fuck=this._thinking_about_you_fuck.bind(this);
				this.componentDidMount=this.componentDidMount.bind(this);
				this.componentWillReceiveProps=this.componentWillReceiveProps.bind(this);
			}
			componentWillReceiveProps(nextProps){
				this.setState({
					pageType:nextProps.PageType
				});
				if (nextProps.PageType=="Social") {
					document.getElementById('_moniterable_outside').textContent="Share your mind stuffs..";
				}else if (nextProps.PageType=="Professional") {
					document.getElementById('_moniterable_outside').textContent="Share your professional stuffs..";
				}else if (nextProps.PageType=="Consumer") {
					document.getElementById('_moniterable_outside').textContent="Share your shopping stuffs..";
				}else if (nextProps.PageType=="Writer") {
					document.getElementById('_moniterable_outside').textContent="Share your book reading stuffs..";
				}else if (nextProps.PageType=="Dater") {
					document.getElementById('_moniterable_outside').textContent="Write lines to impress your to be partner..";
				}else if (nextProps.PageType=="Donator") {
					document.getElementById('_moniterable_outside').textContent="Share your donated stuffs..";
				}else if (nextProps.PageType=="Sinner") {
					document.getElementById('_moniterable_outside').textContent="Feeling guilty ? Confess now .. we will not let anyone know about your real identity.";
				}
			}
			_thinking_about_you_fuck(evt){
				evt.preventDefault();
				evt.stopPropagation();
				evt.persist();
				if (evt.target.textContent.length==0) {
					if (this.state.pageType=="Social") {
						evt.target.textContent="Share your mind stuffs..";
					}else if (this.state.pageType=="Professional") {
						evt.target.textContent="Share your professional stuffs..";
					}else if (this.state.pageType=="Consumer") {
						evt.target.textContent="Share your shopping stuffs..";
					}else if (this.state.pageType=="Writer") {
						evt.target.textContent="Share your book reading stuffs..";
					}else if (this.state.pageType=="Dater") {
						evt.target.textContent="Write lines to impress your to be partner..";
					}else if (this.state.pageType=="Donator") {
						evt.target.textContent="Share your donated stuffs..";
					}else if (this.state.pageType=="Sinner") {
						evt.target.textContent="Feeling guilty ? Confess now .. we will not let anyone know about your real identity.";
					}
				}
			}
			_thinking_about_you(evt){
				evt.preventDefault();
				evt.stopPropagation();
				if (evt.target.textContent=="Share your mind stuffs..") {
					evt.target.textContent="";
				}else if (evt.target.textContent=="Share your professional stuffs..") {
					evt.target.textContent="";
				}else if (evt.target.textContent=="Share your shopping stuffs..") {
					evt.target.textContent="";
				}else if (evt.target.textContent=="Share your book reading stuffs..") {
					evt.target.textContent="";
				}else if (evt.target.textContent=="Write lines to impress your to be partner..") {
					evt.target.textContent="";
				}else if (evt.target.textContent=="Share your donated stuffs..") {
					evt.target.textContent="";
				}else if (evt.target.textContent=="Feeling guilty ? Confess now .. we will not let anyone know about your real identity.") {
					evt.target.textContent="";
				}
				//evt.target.textContent="";
			}
			componentDidMount(){
				window.__current_charecter_position=this.state.typed;
				//alert(this.state.pageType)
				if (this.state.pageType=="Social") {
					document.getElementById('_moniterable_outside').textContent="Share your mind stuffs..";
				}else if (this.state.pageType=="Professional") {
					document.getElementById('_moniterable_outside').textContent="Share your professional stuffs..";
				}else if (this.state.pageType=="Consumer") {
					document.getElementById('_moniterable_outside').textContent="Share your shopping stuffs..";
				}else if (this.state.pageType=="Writer") {
					document.getElementById('_moniterable_outside').textContent="Share your book reading stuffs..";
				}else if (this.state.pageType=="Dater") {
					document.getElementById('_moniterable_outside').textContent="Write lines to impress your to be partner..";
				}else if (this.state.pageType=="Donator") {
					document.getElementById('_moniterable_outside').textContent="Share your donated stuffs..";
				}else if (this.state.pageType=="Sinner") {
					document.getElementById('_moniterable_outside').textContent="Feeling guilty ? Confess now .. we will not let anyone know about your real identity.";
				}
				//document.getElementById('_moniterable_outside').textContent="Share your mind stuffs..";
			}
			_mm_radhitu_billahi(evt){
				//ReactDOM.unmountComponentAtNode(document.getElementById('wa_bil_islami_midina'))
				//ReactDOM.render(<EmojiForPost />,document.getElementById('wa_bil_islami_midina'))
				if (document.getElementById('wa_bil_islami_midina').children[0]==undefined) {
					ReactDOM.render(<EmojiForPost />,document.getElementById('wa_bil_islami_midina'))
				}else {
					ReactDOM.unmountComponentAtNode(document.getElementById('wa_bil_islami_midina'))
				}
			}
			_mm_barak_allah(evt){
				evt.preventDefault();
				evt.stopPropagation();
				let who=window.__rasoola.allah[1];
				let pKey=window.__rasoola.allah[4];
				let sammi_meri_waar=document.getElementById('_moniterable_outside').innerHTML;
				//console.log(sammi_meri_waar);
				let bt=btoa(sammi_meri_waar);
				let tb=atob(bt)
				console.log(bt);
				console.log(tb);
				let hulakumwalana=sessionStorage.postMap==undefined?"":JSON.parse(sessionStorage.postMap).vax;
				let khaiyr={Content:sammi_meri_waar,Who:who,Attachment:hulakumwalana,When:`${Date.now()}`,Type:this.state.pageType,Pkey:pKey}
				console.log(khaiyr);
				Rx.Observable.ajax.post('/saveMyPostWithAttachment',JSON.stringify(khaiyr),{responseType: 'json',contentType:'json'}).map(data=>data.response.All)
				.subscribe(
				function (data) {
					console.log(data);


				},
			function (error) {
					console.log(error);
				}
			);
			}
			_mm_i_believe_you(evt){
				evt.preventDefault();
				evt.stopPropagation();
				ReactDOM.unmountComponentAtNode(document.getElementById('_js_root_animation'));
				ReactDOM.render(<AttachWithPostPopup />,document.getElementById('_js_root_animation'))
			}
			_mm_texta_change(evt){
				evt.preventDefault();
				evt.stopPropagation();
				var that=this;
				/*if (window.__current_charecter_position <256) {
					let vl=evt.target.textContent;
						that.setState({
							typed:window.__current_charecter_position+1
						})
				}else {
					let vaxc=document.getElementById('_moniterable_outside').innerHTML.pop();
				}*/
				/*let vl=evt.target.textContent;
				//alert(vl.length)

				if(vl.length<=256){
					this.setState({
						textaVal:vl,
						typed:vl.length
					})
				}else {
					this.setState({
						textaVal:this.state.textaVal,
						typed:this.state.textaVal.length
					})
				}*/
			}
			componentWillMount(){
				var that=this;
				window.addEventListener("insertEmoji",(evt) => {
					that.setState({
						typed:that.state.typed+1
					})
				},true)
			}
			render(){
				return (
					<div style={postBoxMainStyle} id="_ni_azur_mustafa_allah">
						<div id="_moniterable_outside_baap" style={texta_cnt}>
							{/*<textarea style={texta_act_style} placeholder="share your mind stuff" value={this.state.textaVal} onChange={this._mm_texta_change}></textarea>*/}
							<div id="_moniterable_outside" className="z-depth-5" contentEditable={"true"} style={texta_act_style} onInput={this._mm_texta_change} onFocus={this._thinking_about_you} onBlur={this._thinking_about_you_fuck}></div>
						</div>
						<div style={texta_after_cnt}>
							<div style={postBoxMainStyle}>
								<div style={dflex_bt_style}>
									{/*<input type="button" style={bt_nabi_rasoola} value="share" onClick={this._mm_barak_allah} />*/}
									<a id="_mohhamadun_saiyidul_walkhari" className="btn btn-floating white" onClick={this._mm_barak_allah}><i className="material-icons black-text">publish</i></a>
									<div id="_mohhamadun_saiyidul_walkhari_1" style={bt_nabi_rasoola_billa}>
										<div style={khulli_hi_mi}>
											<div onClick={this._mm_i_believe_you}>
												<a className="btn btn-floating white"><i className="material-icons black-text">attachment</i></a>
											</div>
										</div>
									</div>
									<div id="_mohhamadun_saiyidul_walkhari_2" style={mawlaya_sali_wa_salim}>
										<div style={khulli_hi_mi_rabbi}>
											<div onClick={this._mm_radhitu_billahi}>
												<a className="btn btn-floating white"><i className="material-icons black-text">accessibility</i></a>
											</div>
										</div>
									</div>
									{
										this.state.pageType=="Social"?(<input type="button"  style={bt_nabi_rasoola_nabi} disabled="true" value="Social zone" />):false
									}
									{
										this.state.pageType=="Professional"?(<input type="button"  style={bt_nabi_rasoola_nabi} disabled="true" value="Professional zone" />):false
									}
									{
										this.state.pageType=="Consumer"?(<input type="button"  style={bt_nabi_rasoola_nabi} disabled="true" value="Consumer zone" />):false
									}
									{
										this.state.pageType=="Writer"?(<input type="button"  style={bt_nabi_rasoola_nabi} disabled="true" value="Reader zone" />):false
									}
									{
										this.state.pageType=="Dater"?(<input type="button"  style={bt_nabi_rasoola_nabi} disabled="true" value="Dating zone" />):false
									}
									{
										this.state.pageType=="Donator"?(<input type="button"  style={bt_nabi_rasoola_nabi} disabled="true" value="Donation zone" />):false
									}
									{
										this.state.pageType=="Sinner"?(<input type="button"  style={bt_nabi_rasoola_nabi} disabled="true" value="Sinner zone" />):false
									}
								</div>
							</div>
						</div>
						<div id="wa_bil_islami_midina">
						</div>
					</div>
				)
			}
		}


		// Action class wrapper



		const abcStylePopup_act={width:"99%",height:"1240px",position:"absolute",zIndex:15,backgroundColor:"transparent"};
		const popupPlaylistDf_act={width:"100%",height:"100%",display:"flex",justifyContent:"center"};
		const actPlaylistQuestPopup_act={width:"400px",height:"400px",border:"1px solid #e6ecf0",marginTop:"150px"};
		const playlistPopupHead_act={width:"100%",height:"40px",backgroundColor:"white",marginBottom:"10px"};
		const playlistPopupBody_act={width:"100%",height:"340px",backgroundColor:"white"};
		const closePlaylistPopupBefore_act={width:"70%",height:"100%",display:"inline",float:"left"};
		const closePlaylistPopupAfter_act={width:"30%",height:"100%",display:"inline",float:"right"};
		const dflexCloseBefore_act={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
		const dflexCloseAfter_act={width:"100%",height:"100%",display:"flex",justifyContent:"flex-end",alignItems:"center"};
		const closingPopupFontwa_act={cursor:"pointer"};
		const msgInformationToAddPlaylist_act={width:"100%",height:"40px",display:"flex",justifyContent:"center",alignItems:"center"};
		const actPlaylistDataStyle_act={width:"100%",height:"260px",overflowY:"scroll"};
		const updatePlaylistStyle_act={width:"100%",height:"40px"};
		const createPlaylistButtonDadaji_act={width:"50%",height:"100%",display:"inline",float:"left"};
		const createPlaylistButtonDadaji_act_go={width:"100%",height:"100%",display:"inline",float:"left"};
		const updatePlaylistButtonDadaji_act={width:"50%",height:"100%",display:"inline",float:"right"};
		const createPlaylistButtonDady_act={width:"99%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center",border:"1px solid #e6ecf0"};
		const createPlaylistButtonDady_act_go={width:"99%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center",border:"1px solid #e6ecf0"};
		const updatePlaylistButtonDady_act={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
		const closingPopupFontwaOf_act={cursor:"pointer"};
		const fontingStyleCursor={cursor:"pointer"};
		class ActionOnPostPopup extends React.Component {
			constructor(props) {
				super(props);
				this.state = {
					referer:this.props.Referer
				};
				this.componentWillMount=this.componentWillMount.bind(this);
				this.componentWillUnmount=this.componentWillUnmount.bind(this);
				this._closing_playlist_popup_bhai=this._closing_playlist_popup_bhai.bind(this);
			}
			_closing_playlist_popup_bhai(evt){
				ReactDOM.unmountComponentAtNode(document.getElementById('_js_root_animation'))
			}
			componentWillMount(){
				var events = new CustomEvent(
					"opacity",
					{
						detail: {
							message: 0.2,
							time: new Date(),
					},
					bubbles: true,
					cancelable: true
				}
			 );
			 window.dispatchEvent(events);
			}
			componentWillUnmount(){
				var events = new CustomEvent(
					"opacity",
					{
						detail: {
							message: 1,
							time: new Date(),
					},
					bubbles: true,
					cancelable: true
				}
			 );
			 window.dispatchEvent(events);
			}
			render(){
				return (
					<div style={abcStylePopup_act}>
						<div style={popupPlaylistDf_act}>
							<div style={actPlaylistQuestPopup_act}>
								<div style={playlistPopupHead_act}>
									<div style={closePlaylistPopupBefore_act}>
										<div style={dflexCloseBefore_act}>
											<font size={4}>My action on post</font>
										</div>
									</div>
									<div style={closePlaylistPopupAfter_act}>
										<div style={dflexCloseAfter_act}>
											<font style={closingPopupFontwa_act} size={5} onClick={this._closing_playlist_popup_bhai}>&#9932;</font>
										</div>
									</div>
								</div>
								<div style={playlistPopupBody_act}>
									<div style={msgInformationToAddPlaylist_act}>
										<font size={4} style={fontingStyleCursor}>{this.state.referer[0]}</font><font size={3}>&nbsp; posted this on &nbsp;</font><font size={4}>{timeConverter(parseInt(this.state.referer[3]))}</font>
									</div>
									<div id="_jaaniye_heeriye_oo_hs" style={actPlaylistDataStyle_act}>2
									</div>
									<div style={updatePlaylistStyle_act}>
										<div style={createPlaylistButtonDadaji_act_go}>
											<div style={createPlaylistButtonDady_act_go}>
												<font style={closingPopupFontwaOf_act} size={5} onClick={this._closing_playlist_popup_bhai}>Finish</font>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				)
			}
		}








		//end action wrapper


		var datwaHou=()=>{
			let today = Date.now();
			return today
		}



		var timeConverter= (UNIX_timestamp)=>{
			let no=new Date();
			let a = new Date(UNIX_timestamp);
			console.log(no.getDate());
			console.log(a.getDate());
			let diff=no.getDate()-a.getDate();
			if (Math.abs(diff)<=1) {
				if (no.getHours()-a.getHours()<1) {
					let all="";
					console.log("rehnuma tara tara");
					console.log(no.getHours()-a.getHours());
					console.log(a.getHours());
					let talk=no.getMinutes()-a.getMinutes();
					let talk2=no.getSeconds()-a.getSeconds();
					all=talk+" m "+talk2+" s before";
					return all;
				}else if (no.getHours()-a.getHours()==1 && ((60-a.getMinutes())+no.getMinutes())<60) {
					let all="";
					console.log(a);
					let talk=(60-a.getMinutes())+no.getMinutes()
					let talk2=(no.getSeconds()-a.getSeconds())>0?no.getSeconds()-a.getSeconds():a.getSeconds()-no.getSeconds();
					all=talk+" m "+talk2+" s before";
					return all;
				}else if (no.getHours()-a.getHours()>1 && no.getHours()-a.getHours()<24) {
					console.log(a);
					let all="";
					let talk=no.getHours()-a.getHours();
					let talk2=no.getMinutes()>a.getMinutes()?no.getMinutes()-a.getMinutes():a.getMinutes()-no.getMinutes();
					all=talk+" h "+talk2+" m before"
					return all;
				}else if (no.getHours()-a.getHours()>24 && no.getHours()-a.getHours()<24*7) {
					let all="";
					let talk=parseInt((no.getHours()-a.getHours())/24);
					all=talk+" d before"
					return all;
				}else {
					let all="";
					let x=a.toLocaleDateString();
					let hours = a.getHours() > 12 ? a.getHours() - 12 : a.getHours();
		      let am_pm = a.getHours() >= 12 ? "PM" : "AM";
		      hours = hours < 10 ? "0" + hours : hours;
		      let minutes = a.getMinutes() < 10 ? "0" + a.getMinutes() : a.getMinutes();
		      let seconds = a.getSeconds() < 10 ? "0" + a.getSeconds() : a.getSeconds();
		      let time = hours + ":" + minutes + ":" + seconds + " " + am_pm;
					all=x+" "+time
					return all;
				}
			}else if (Math.abs(diff)>1 && Math.abs(diff)<=7) {
				let all="";
				let mcv=no.getDate()-a.getDate();
				let talk=parseInt(Math.abs(mcv));
				all=talk+" d before"
				return all;
			}else {
				let all="";
				let x=a.toLocaleDateString();
				let hours = a.getHours() > 12 ? a.getHours() - 12 : a.getHours();
				let am_pm = a.getHours() >= 12 ? "PM" : "AM";
				hours = hours < 10 ? "0" + hours : hours;
				let minutes = a.getMinutes() < 10 ? "0" + a.getMinutes() : a.getMinutes();
				let seconds = a.getSeconds() < 10 ? "0" + a.getSeconds() : a.getSeconds();
				let time = hours + ":" + minutes + ":" + seconds + " " + am_pm;
				all=x+" "+time
				return all;
			}

		}

		var timeConverterOf= (UNIX_timestamp)=>{
			let no=Date.now();
			let a =(no-UNIX_timestamp)/(1000*60*60*24);
			let xmcbvg="";
			if (a>=1) {
				let m=(a+"").split(".");
				let nx=m[0];
				let nx2=m[1];
				console.log("gfrjhgfegHFhgFGHfdhFHhfGHFHGF hv GHFcstTttttttttttttttttttttttttttttttttttttCSF");

				let mnxcvbgffgfgfg="0."+nx2
				console.log(mnxcvbgffgfgfg);
				//let nx3=nx2/1000*60*60;
				console.log(mnxcvbgffgfgfg);
				mnxcvbgffgfgfg=mnxcvbgffgfgfg*24
				let hr=Math.ceil(mnxcvbgffgfgfg)+"";
				let hrx=nx2+"";
				xmcbvg=`${nx} day's ${hr} hr before`;
			}else {
				let a1=(no-UNIX_timestamp)/(1000*60*60);
				let m=(a1+"").split(".");
				let nx=m[0];
				let nx2=m[1];
				console.log("gfrjhgfegHFhgFGHfdhFHhfGHFHGF hv GHFcstTttttttttttttttttttttttttttttttttttttCSF");

				let mnxcvbgffgfgfg="0."+nx2
				console.log(mnxcvbgffgfgfg);
				//let nx3=nx2/1000*60*60;
				console.log(mnxcvbgffgfgfg);
				mnxcvbgffgfgfg=mnxcvbgffgfgfg*60
				let hr=Math.ceil(mnxcvbgffgfgfg)+"";
				let hrx=nx2+"";
				xmcbvg=`${nx} hr ${hr} min before`;
			}
			console.log("gfrjhgfegHFhgFGHfdhFHhfGHFHGF hv GHFcstTttttttttttttttttttttttttttttttttttttCSF");
			console.log(a);
			return xmcbvg
		}

		function createMarkup(htmlSant){
			console.log(htmlSant);
			return {__html:htmlSant}; };




// attach with comment as popup






const abcStylePopup_post_comment={width:"99%",height:"1240px",position:"absolute",zIndex:10,backgroundColor:"transparent"};
const popupPlaylistDf_post_comment={width:"100%",height:"100%",display:"flex",justifyContent:"center"};
const actPlaylistQuestPopup_post_comment={width:"400px",height:"400px",border:"1px solid #e6ecf0",marginTop:"150px"};
const playlistPopupHead_post_comment={width:"100%",height:"40px",backgroundColor:"white",marginBottom:"10px"};
const playlistPopupBody_post_comment={width:"100%",height:"340px",backgroundColor:"white"};
const closePlaylistPopupBefore_post_comment={width:"70%",height:"100%",display:"inline",float:"left"};
const closePlaylistPopupAfter_post_comment={width:"30%",height:"100%",display:"inline",float:"right"};
const dflexCloseBefore_post_comment={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
const dflexCloseAfter_post_comment={width:"100%",height:"100%",display:"flex",justifyContent:"flex-end",alignItems:"center"};
const closingPopupFontwa_post_comment={cursor:"pointer"};
const msgInformationToAddPlaylist_post_comment={width:"100%",height:"40px",display:"flex",justifyContent:"center",alignItems:"center"};
const actPlaylistDataStyle_post_comment={width:"100%",height:"260px",overflowY:"scroll"};
const updatePlaylistStyle_post_comment={width:"100%",height:"40px"};
const createPlaylistButtonDadaji_post_comment={width:"100%",height:"100%",display:"inline",float:"left"};
//const updatePlaylistButtonDadaji_post={width:"50%",height:"100%",display:"inline",float:"right"};
const createPlaylistButtonDady_post_comment={width:"99%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center",border:"1px solid #e6ecf0"};
//const updatePlaylistButtonDady_post={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
const closingPopupFontwaOf_post_comment={cursor:"pointer"};
const duniya_me_nahi_hai_post_comment={width:"100%",height:"200px"};
const kudrat_hans_paregi_post_comment={width:"100%",height:"33%"};
const man_amadeham_post_comment={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"flex-end"};
const man_amadeham_1_post_comment={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
const man_amadeham_2_post_comment={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"flex-start"};
const aa_v_ja_bahon_me_post_comment={width:"80%",height:"25px"};
class AttachWithCommentPopup extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			statusText:"",
			initBeg:0
		};
		this.componentWillMount=this.componentWillMount.bind(this);
		this.componentWillUnmount=this.componentWillUnmount.bind(this);
		this._closing_playlist_popup_bhai=this._closing_playlist_popup_bhai.bind(this);
		this._let_me_get_typed_array=this._let_me_get_typed_array.bind(this);
	}
	_let_me_get_typed_array(evt){
		evt.preventDefault();
		evt.stopPropagation();
		evt.persist();
		var that=this;
		var reader = new FileReader();
		reader.onload = function(event) {
				var contents = event.target.result;
				console.log(contents.byteLength);
				var uAr=new Uint8Array(contents);
				console.log(uAr);
				var who=window.__rasoola.allah[1];
				var xhttp = new XMLHttpRequest();

				xhttp.onreadystatechange = function() {
					if (this.readyState == 4 && this.status == 200) {
						//console.log(this.responseText)
						//_gotta_ok_main_shop_icon

						let vx=JSON.parse(this.responseText);
						console.log(vx)
						sessionStorage.commentMap=JSON.stringify({vax:vx.name});
						that.setState({
							statusText:`!!Success!! Total uploaded size = ${vx.size}`,
							fDisabled:false
						});
						//ReactDOM.render(<FakeIcon SR={vx.name} />,document.getElementById('_gotta_ok_main_shop_icon'))
					}
				};

				xhttp.open("POST", "https://pratibhash.herokuapp.com/postMyClientImagePratibha", true);
				//xhttp.setRequestHeader('Content-Type','application/octet-stream')
				console.log(xhttp.upload)
				xhttp.upload.addEventListener("progress",function(e) {
				var pc = parseInt((e.loaded / e.total * 100));
				//progress.style.backgroundPosition = pc + "% 0";
				console.log(pc);
				that.setState({
					initBeg:pc
				})
			},false);
			xhttp.setRequestHeader('Content-Type', 'application/json');
			var s=JSON.stringify({val:uAr,who:who});
			xhttp.send(s);
		};
		reader.onerror = function(event) {
				console.error("File could not be read! Code " + event.target.error.code);
		};
		reader.readAsArrayBuffer(evt.target.files[0]);
	}
	_closing_playlist_popup_bhai(evt){
		evt.preventDefault();
		evt.stopPropagation();
		ReactDOM.unmountComponentAtNode(document.getElementById('_js_root_animation'))
	}
	componentWillMount(){
		var events = new CustomEvent(
			"opacity",
			{
				detail: {
					message: 0.2,
					time: new Date(),
			},
			bubbles: true,
			cancelable: true
		}
	 );
	 window.dispatchEvent(events);
	}
	componentWillUnmount(){
		var events = new CustomEvent(
			"opacity",
			{
				detail: {
					message: 1,
					time: new Date(),
			},
			bubbles: true,
			cancelable: true
		}
	 );
	 window.dispatchEvent(events);
	}
	render(){
		return (
			<div style={abcStylePopup_post_comment}>
				<div style={popupPlaylistDf_post_comment}>
					<div style={actPlaylistQuestPopup_post_comment}>
						<div style={playlistPopupHead_post_comment}>
							<div style={closePlaylistPopupBefore_post_comment}>
								<div style={dflexCloseBefore_post_comment}>
									<font size={4}>Attach file</font>
								</div>
							</div>
							<div style={closePlaylistPopupAfter_post_comment}>
								<div style={dflexCloseAfter_post_comment}>
									<font style={closingPopupFontwa_post_comment} size={5} onClick={this._closing_playlist_popup_bhai}>&#9932;</font>
								</div>
							</div>
						</div>
						<div style={playlistPopupBody_post_comment}>
							<div style={msgInformationToAddPlaylist_post_comment}>Please choose image to attach with your Comment.
							</div>
							<div id="_jaaniye_heeriye_oo_hs" style={actPlaylistDataStyle_post_comment}>
								<div style={duniya_me_nahi_hai_post_comment}>
									<div style={kudrat_hans_paregi_post_comment}>
										<div style={man_amadeham_post_comment}>
											<input type="file" name="change_new_dp_comment" className="change_new_dp_comment" onChange={this._let_me_get_typed_array} />
										</div>
									</div>
									<div style={kudrat_hans_paregi_post_comment}>
										<div style={man_amadeham_1_post_comment}>
											<progress style={aa_v_ja_bahon_me_post_comment} id="_change_dp_monitor" value={this.state.initBeg} max="100"></progress>
										</div>
									</div>
									<div style={kudrat_hans_paregi_post_comment}>
										<div style={man_amadeham_2_post_comment}>
											<font size={4}>{this.state.statusText}</font>
										</div>
									</div>
								</div>
							</div>
							<div style={updatePlaylistStyle_post_comment}>
								<div style={createPlaylistButtonDadaji_post_comment}>
									<div style={createPlaylistButtonDady_post_comment}>
										<font style={closingPopupFontwaOf_post_comment} size={5} onClick={this._closing_playlist_popup_bhai}>Finish</font>
									</div>
								</div>

							</div>
						</div>
					</div>
				</div>
			</div>
		)
	}
}

















		const everythingIsYouEverDreamedOf={width:"100%",height:"100%",overflowY:"scroll",overflowX:"hidden"};
		const tStyleMainText={width:"100%",height:"30px"};
		const tStyleImgText={width:"100%",height:"300px",backgroundColor:"white"};
		const tStyleImgText_open={width:"100%",height:"100px",backgroundColor:"white"};
		const tStyleExtraText_posted_data={width:"100%",backgroundColor:"white",overflow:"hidden",marginTop:"10px"};
		const tStyleExtraText_action_infy={width:"100%",height:"30px",backgroundColor:"white"};
		const tStyleExtraText={width:"100%",height:"30px"};
		const mujhseJadaMereJaisa={width:"33%",height:"100%",display:"inline",float:"left",backgroundColor:"white",border:"1px solid #e6ecf0"};
		const mujhseJadaMereJaisa_2={width:"33%",height:"100%",display:"inline",float:"left",backgroundColor:"white"};
		const mujhseJadaMereJaisa_3={width:"33%",height:"100%",display:"inline",float:"right",backgroundColor:"white",border:"1px solid #e6ecf0"};
		const asDflexStMore={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
		const raterSelect={fontSize:"larger",border:"none",backgroundColor:"transparent"};
		const mujhseJadaMereJaisa_x={width:"33%",height:"100%",display:"inline",float:"left",backgroundColor:"white"};
		const mujhseJadaMereJaisa_2_x={width:"33%",height:"100%",display:"inline",float:"left",backgroundColor:"white"};
		const mujhseJadaMereJaisa_3_x={width:"34%",height:"100%",display:"inline",float:"right",backgroundColor:"white"};
		const pImgOfPost={width:"50%",height:"95%"};
		const ooIfIcouldDen={cursor:"pointer"};
		const fHundredStyle_open={width:"100%",height:"180px",marginTop:"10px",marginBottom:"10px"};
		const raterSelect_action={fontSize:"larger",border:"none",backgroundColor:"transparent",width:"45%",maxWidth:"100%"};
		const asDflexStMore_post={width:"100%",height:"100%",wordWrap:"break-word",textIndent:"10px"};
		const spinnerFlexCont_mypost_spin={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"flex-start",marginTop:"20px"};
    const fHundredStyle_nabiya_salam={width:"100%",height:"300px",marginTop:"10px",marginBottom:"10px"};
		const fHundredStyle_nabiya_salam_same={width:"100%",height:"100%",overflowY:"hidden",overflowX:"scroll",whiteSpace:"nowrap",backgroundColor:"white"};
		const alHabibiKiKhailKhurki={width:"45%",height:"99%",marginRight:"10px",border:"1px solid #e6ecf0"};
		const jis_din_tumko_dekhegi_najar={width:"100%",height:"50%"};
		const sochenge_tumhe_pyar_kare_ki_nahi={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
		const img_style_many_more_my_related_daces={width:"135px",height:"135px",borderRadius:"67.5px"};
		const teri_ummed_tera_intejar_karte_hai={width:"100%",height:"100%"};
		const teri_ummed_tera_intejar_karte_hai_inner={width:"100%",height:"33.3%"};
		const aye_sanam_ham_to_sirf_tumse_pyar={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"}
		const barakAllah_tera_gam={width:"30%",maxWidth:"100%",backgroundColor:"transparent",fontSize:"medium",border:"1px solid #e6ecf0"};
		const sochNasake={display:"inline"};
		const asalam_alayka_ya_rasool_allah={width:"300px",height:"100%",display:"inline-block",marginRight:"10px"};
		const faceWalaBhaiya={width:"180px",height:"180px",marginLeft:"60px",borderRadius:"50%"};
		const cust_spanning_tree={display:"inline"};
		const cust_spanning_tree_bt={float:"right",width:"5%",display:"flex",justifyContent:"center",backgroundColor:"transparent"};
		const cust_spanning_tree_bt_sawan={float:"right",width:"5%",display:"inline",float:"right",backgroundColor:"transparent"};
		const myUniqueFaceSelectStyle_child_where_we_are={color:"black"};
		const uuuullllliiiiii={marginLeft:"-50% !important",width:"100px"};
		const abToEkPalKiDuriSahiJayeNa={width:"100%",height:"100%",overflowY:"scroll"};
		const dangerousStyleDiv={wordWrap:"break-word"};
		const fatherPeterDayal={width:"100%",height:"300px"};
		const chandSurajSabYaha={width:"100%",height:"100%",display:"flex",justifyContent:"center"};
		const chandSurajSabYaha_image={width:"70%",height:"100%"};
		const chandSurajSabYaha_habibKhuda={width:"100%",height:"120px"};
		const asalamuAlaykaYaRasoolAllahYaNabi={width:"100%",height:"70px"};
		//const asalamuAlaykaYaRasoolAllahYaNabi_child={width:"100%",height:"100%"}
		const allahuYaAllahLaIllah_1={width:"33%",height:"100%",display:"inline",float:"left"};
		const allahuYaAllahLaIllah_2={width:"33%",height:"100%",display:"inline",float:"left"};
		const allahuYaAllahLaIllah_3={width:"33%",height:"100%",display:"inline",float:"left"};
		const mawlayaSaliWaSalimAbdanDflex={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
		const zoomInCursorZaanPeBane={cursor:"zoom-in"};
		const friends_wala_mehboob_tlf_dot_com={display:"inline",float:"left"};
		const indi_frnd_face_cont_tlf_pratibha={width:"100%",height:"95%"};
		const lala_lala_lala_dil_ne_ye_kaha_pratibha={overflowY:"scroll"};
		const link_my_different_face_pratibha_please={width:"100%",height:"35px",display:"flex",justifyContent:"center"};
		const newPlaylistBtStylePratibhaLinkMyFace={minWidth:"100px",cursor:"pointer",backgroundColor:"white",fontSize:"larger",color:"black",border:"1px solid #e6ecf0",float:"left",marginLeft:"8%",textTransform:"capitalize"};
		class PostOrEnjoymentMapper extends React.Component {
			constructor(props) {
				super(props);
				this.state = {
					testBilla:this.props.TestBilla,
					type:this.props.Type,
					rcImgPost:"a.jpg",
					myFaceSuggest:["a","b","c","d","f","g"],
					socialFaceSelected:false,
					professionalFaceSelected:false,
					consumerFaceSelected:false,
					readerFaceSelected:false,
					daterFaceSelected:false,
					donatorFaceSelected:false,
					sinnerFaceSelected:false,
					currentGuy:""
				};
				this._chalo_madine_me=this._chalo_madine_me.bind(this);
				this.componentWillReceiveProps=this.componentWillReceiveProps.bind(this);
				this.componentWillMount=this.componentWillMount.bind(this);
				this._allah_ne_utare_muhammad=this._allah_ne_utare_muhammad.bind(this);
				this.componentDidMount=this.componentDidMount.bind(this);
				this.componentDidUpdate=this.componentDidUpdate.bind(this);
				this._checking_for_img_click=this._checking_for_img_click.bind(this);
				this._mawlaya_sali_wa_saaallli=this._mawlaya_sali_wa_saaallli.bind(this);
				this._hacking_into_material=this._hacking_into_material.bind(this);
				this._let_me_get_face_link_option_prt=this._let_me_get_face_link_option_prt.bind(this);
				this._swich_link_face_data_pratibha=this._swich_link_face_data_pratibha.bind(this);
				this._link_my_selected_face_pratibha_please=this._link_my_selected_face_pratibha_please.bind(this);
				this._proper_patola_pratibha=this._proper_patola_pratibha.bind(this);
				this._clear_currentGuy_pratibha=this._clear_currentGuy_pratibha.bind(this);
			}
			_clear_currentGuy_pratibha(evt){
				window.__currentGuy=undefined;
			}
			_proper_patola_pratibha(evt){
				let tar=evt.currentTarget.parentElement.parentElement.parentElement.firstChild
				console.log(tar);
				console.log("hehe");
				window.__currentGuy=JSON.parse(tar.value)[1];
			}
			_link_my_selected_face_pratibha_please(evt){
				evt.preventDefault();
				evt.stopPropagation();
				let meOw=window.__rasoola.allah[1];
				let pKey=window.__rasoola.allah[4];
				let currentG=window.__currentGuy;
				let socialOpt=(window.__socialFaceSelected!=undefined)?window.__socialFaceSelected:false;
				let professionalOpt=(window.__professionalFaceSelected!=undefined)?window.__professionalFaceSelected:false;
				let consumerOpt=(window.__consumerFaceSelected!=undefined)?window.__consumerFaceSelected:false;
				let readerOpt=(window.__readerFaceSelected!=undefined)?window.__readerFaceSelected:false;
				let daterOpt=(window.__daterFaceSelected!=undefined)?window.__daterFaceSelected:false;
				let donatorOpt=(window.__donatorFaceSelected!=undefined)?window.__donatorFaceSelected:false;
				let sinnerOpt=(window.__sinnerFaceSelected!=undefined)?window.__sinnerFaceSelected:false;
				let jsonSender=JSON.stringify({MeOw:meOw,CurrentG:currentG,SocialOpt:socialOpt,ProfessionalOpt:professionalOpt,ConsumerOpt:consumerOpt,ReaderOpt:readerOpt,DaterOpt:daterOpt,DonatorOpt:donatorOpt,SinnerOpt:sinnerOpt,Pkey:pKey})
				$.ajax({
					url:`LinkMyFaceWithThemPratibhaPlease?data=${jsonSender}`,
					type:"GET",
					dataType:"json",
					async:true
				}).done((data)=>{
					console.log(data);
				}).fail((jqXHR,statusText)=>{
					console.log(statusText);
				})
			}
			_swich_link_face_data_pratibha(evt){
				evt.stopPropagation();
				let that=this;
				let tar=evt.currentTarget?evt.currentTarget:evt.target;
				let val=tar.parentElement.parentElement.lastChild;
				console.log(val);
				console.log(val.value);
				switch (val.value) {
					case "Social Face":
						window.__socialFaceSelected=true;
						// that.setState({
						// 	socialFaceSelected:true
						// });
						break;
					case "Professional Face":
						window.__professionalFaceSelected=true;
						// that.setState({
						// 	professionalFaceSelected:true
						// });
						break;
					case "Consumer Face":
						window.__consumerFaceSelected=true;
						// that.setState({
						// 	consumerFaceSelected:true
						// });
						break;
					case "Reader Face":
						window.__readerFaceSelected=true;
						// that.setState({
						// 	readerFaceSelected:true
						// });
						break;
					case "Dater Face":
						window.__daterFaceSelected=true;
						// that.setState({
						// 	daterFaceSelected:true
						// });
						break;
					case "Donator Face":
						window.__donatorFaceSelected=true;
						// that.setState({
						// 	donatorFaceSelected:true
						// });
						break;
					case "Sinner Face":
						window.__sinnerFaceSelected=true;
						// that.setState({
						// 	sinnerFaceSelected:true
						// });
						break;
					default:
						break;
				}
			}
			_let_me_get_face_link_option_prt(evt){
				alert("ok")
			}
			_hacking_into_material(evt){
				$(document).ready(function(){
					$(this).closest('.dropdown-button').dropdown('open');
				})
			}
			_mawlaya_sali_wa_saaallli(evt){
				 $(document).ready(function(){
					 console.log($("#modal0"));
					 $("#modal0").modal('open');
				 })
			}
			_checking_for_img_click(evt){
				let rc=evt.currentTarget.src;
				ReactDOM.unmountComponentAtNode(document.getElementById('_js_root_animation'));
				ReactDOM.render(<ImagePopupGnuMakeGolang Url={rc} />,document.getElementById('_js_root_animation'));
				//setTimeout(function(){
						/*$(document).ready(function(){
							$("#everythingIsYouEverDreamedOf").css("overflow-y","scroll")
							$("#everythingIsYouEverDreamedOf").css("overflow-x","hidden")
						})*/
				 //}, 3000);
			}
			componentDidUpdate(prevProps, prevState){
				console.log("kldksjljskljlksjkjslkjkljklsjelkjklsjfkljklsjflkjseljflkjslejflkjseflkjklsfejkljeskfljkl");
				//console.log(document.getElementById('everythingIsYouEverDreamedOf').style.overflowY);
			}
			_allah_ne_utare_muhammad(evt){

			}
			_chalo_madine_me(evt){
				evt.preventDefault();
				evt.stopPropagation();
				console.log(evt.target.parentElement.lastChild.value);
				let bharDoJholiMeriYaMuhammad=JSON.parse(evt.target.parentElement.lastChild.value)
				ReactDOM.unmountComponentAtNode(document.getElementById('_js_root_animation'));
				ReactDOM.render(<ActionOnPostPopup Referer={bharDoJholiMeriYaMuhammad} />,document.getElementById('_js_root_animation'))
			}
			componentWillReceiveProps(nextProps){
				this.setState({
					testBilla:nextProps.TestBilla,
					type:nextProps.Type
				})
			}
			componentWillMount(){
				var that=this;
				let mNo=JSON.stringify({Me:window.__rasoola.allah[1],Pkey:window.__rasoola.allah[4]});
				Rx.Observable.ajax({ url: `/getMyAllRelatedFacesBilla?data=${mNo}`, responseType: 'json',method:'GET'}).map(data=>data.response.All)
				.subscribe(
				function (data) {
					console.log("you are the light ,guide of the life");
					console.log("asalam alayka ya rasool allah asalam alayka habibi ya nabi allah");
					console.log(data);;
					that.setState({
						myFaceSuggest:data
					})
				})
			}
			componentDidMount(){


							//$('.carousel.carousel-slider').carousel({fullWidth: true});
							$(document).ready(function(){
    						$('.tooltipped').tooltip({delay: 50});
  						});


			}
			render(){
				if (this.state.type=="post") {
					if (this.state.testBilla.length==0) {
						//alert("spinner")
						return (
							<div style={spinnerFlexCont_mypost_spin}>{/*<Spinner />*/}<PreloderCircular /></div>
						)
					}else {
						return (
							<div className="its_ok_shreya_i_am_alright_ok" id="everythingIsYouEverDreamedOf" style={everythingIsYouEverDreamedOf}>
							{
								this.state.testBilla.map( (a,b) => {
									if (a.length==2) {
										return (
											<div key={b} style={fHundredStyle_nabiya_salam}>
											<div id="fHundredStyle_nabiya_salam_same" style={fHundredStyle_nabiya_salam_same}>
												{
													this.state.myFaceSuggest.map( (e,f) => {
														if (e.length>1) {
															return (

																<div style={asalam_alayka_ya_rasool_allah} key={f}>
																<input type="hidden" value={JSON.stringify(e)} />
																<div id={f} className="card hoverable" style={indi_frnd_face_cont_tlf_pratibha} >
																	<div className="card-image waves-effect waves-block waves-light">
																		<img className="activator" style={faceWalaBhaiya} src={e[3]} />
																	</div>
																	<div className="card-content">
																		<span className="card-title activator grey-text text-darken-4" style={friends_wala_mehboob_tlf_dot_com} onClick={this._proper_patola_pratibha}>{e[0]}</span>
																		<a style={cust_spanning_tree_bt_sawan} className="dropdown-button btn black-text tooltipped" data-activates={`dropdownholo__ch__${f}`} data-position="bottom" data-delay="50" data-tooltip="Click to take some deep action" ref={()=>{
																			$(document).ready(function(){
																				$('.tooltipped').tooltip({delay: 50});
																			});
																		}} ><i className="small material-icons right">more_vert</i></a>
																		<ul style={uuuullllliiiiii} id={`dropdownholo__ch__${f}`} className='dropdown-content' ref={(elem) => {
																			$('.dropdown-button').dropdown({
																				 inDuration: 300,
																				 outDuration: 225,
																				 constrainWidth: true, // Does not change width of dropdown to that of the activator
																				 hover: false, // Activate on hover
																				 gutter: 200, // Spacing from edge
																				 belowOrigin: false, // Displays dropdown below the button
																				 alignment: 'right', // Displays dropdown with edge aligned to the left of button
																				 stopPropagation: true // Stops event propagation
																			 }
																		 );
																		}}>
																			<li className="divider"></li>
																			<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Ignore</a></li>
																			<li className="divider"></li>
																			<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Blame</a></li>
																			<li className="divider"></li>
																			<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Poke</a></li>
																			<li className="divider"></li>
												  					</ul>

																	</div>
																	<div className="card-reveal" style={lala_lala_lala_dil_ne_ye_kaha_pratibha} >

																			<span style={sochNasake} className="card-title grey-text text-darken-4"><i className="material-icons right" onClick={this._clear_currentGuy_pratibha}>close</i></span>
																			<p className="truncate">{e[0]}</p>
																			<p className="truncate">{e[2]}</p>
																			<p className="truncate">Please select the desire face to link</p>
																			<ul>
																				<li>
																					{/*<form action="#"><p>
																			      <input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_soc" defaultChecked="false"  />
																			      <label for="filled-in-box_tlf_link_soc">Social face</label>
																			    </p></form>*/}
																					<div className="switch" >
																				    <label className="black-text _design_my_font_weight_pratibha">
																				      <input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																				      <span className="lever"></span>
																				      Social Face
																				    </label>
																						<input type="hidden" value="Social Face" />
																				  </div>
																				</li>
																				<li>
																					{/*
																						<form action="#">
																				      <input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_prof" defaultChecked="false"  />
																				      <label for="filled-in-box_tlf_link_prof">Professional face</label>
																				    </form>
																						*/}
																						<div className="switch">
																					    <label className="black-text _design_my_font_weight_pratibha">
																					      <input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																					      <span className="lever"></span>
																					      Professional Face
																					    </label>
																							<input type="hidden" value="Professional Face" />
																					  </div>
																				</li>
																				<li>
																					<div className="switch">
																						<label className="black-text _design_my_font_weight_pratibha">
																							<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																							<span className="lever"></span>
																							Consumer Face
																						</label>
																						<input type="hidden" value="Consumer Face" />
																					</div>
																					{/*
																						<form action="#">
																				      <input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_con" defaultChecked="false"  />
																				      <label for="filled-in-box_tlf_link_con">Consumer face</label>
																				    </form>
																						*/}
																				</li>
																				<li>
																					<div className="switch">
																						<label className="black-text _design_my_font_weight_pratibha">
																							<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																							<span className="lever"></span>
																							Reader Face
																						</label>
																						<input type="hidden" value="Reader Face" />
																					</div>
																					{/*
																						<form action="#">
																				      <input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_read" defaultChecked="false"  />
																				      <label for="filled-in-box_tlf_link_read">Reader face</label>
																				    </form>
																						*/}
																				</li>
																				<li>
																					{/*
																						<form action="#">
																				      <input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_date" defaultChecked="false"  />
																				      <label for="filled-in-box_tlf_link_date">Dater face</label>
																				    </form>
																						*/}
																						<div className="switch">
																							<label className="black-text _design_my_font_weight_pratibha">
																								<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																								<span className="lever"></span>
																								Dater Face
																							</label>
																							<input type="hidden" value="Dater Face" />
																						</div>
																				</li>
																				<li>
																				{/*
																					<form action="#">
																			      <input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_donate" defaultChecked="false" />
																			      <label for="filled-in-box_tlf_link_donate">Donator face</label>
																			    </form>
																					*/}
																					<div className="switch">
																						<label className="black-text _design_my_font_weight_pratibha">
																							<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																							<span className="lever"></span>
																							Donator Face
																						</label>
																						<input type="hidden" value="Donator Face" />
																					</div>
																				</li>
																				<li>
																					{/*
																						<form action="#">
																				      <input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_sin" defaultChecked="false"  />
																				      <label for="filled-in-box_tlf_link_sin">Sinner face</label>
																			    	</form>
																						*/}
																					<div className="switch">
																						<label className="black-text _design_my_font_weight_pratibha">
																							<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																							<span className="lever"></span>
																							Sinner Face
																						</label>
																						<input type="hidden" value="Sinner Face" />
																					</div>
																				</li>
																			</ul>
																			<br />
																			<div style={link_my_different_face_pratibha_please}>
																				<input type="button" value="Link face" style={newPlaylistBtStylePratibhaLinkMyFace} className="dropdown-button btn" onClick={this._link_my_selected_face_pratibha_please} />
																			</div>
																	</div>
																</div>
																</div>
															)
														}else {
															return false
														}
													} )
												}
											</div>
											</div>

										)
									}else {
										let subhanallah=atob(a[0]);
										//applying materializecss
										return (
											<div className="card hoverable" key={b} >
												<div className="card-image">
      										<img style={zoomInCursorZaanPeBane} src={a[2]} ref={() => {
														{/*}$(document).ready(function(){
    													$('.materialboxed').materialbox();
															//onClick={this._checking_for_img_click}
  													});*/}
													}} onClick={this._checking_for_img_click} />
    										</div>
    										<div className="card-content">
      										<span className="card-title activator grey-text text-darken-4 " onClick={this._hacking_into_material}  >{a[0]}</span><a style={cust_spanning_tree_bt} className="dropdown-button btn black-text tooltipped" data-activates={`dropdownAA${b}`} data-position="bottom" data-delay="50" data-tooltip="Click to take some deep action" ref={()=>{
														$(document).ready(function(){
															$('.tooltipped').tooltip({delay: 50});
														});
													}} ><i className="large material-icons right">more_vert</i></a>
													<ul style={uuuullllliiiiii} id={`dropdownAA${b}`} className='dropdown-content' ref={() => {
														$('.dropdown-button').dropdown({
															 inDuration: 300,
															 outDuration: 225,
															 constrainWidth: true, // Does not change width of dropdown to that of the activator
															 hover: false, // Activate on hover
															 gutter: 50, // Spacing from edge
															 belowOrigin: true, // Displays dropdown below the button
															 alignment: 'right', // Displays dropdown with edge aligned to the left of button
															 stopPropagation: true // Stops event propagation
														 }
													 );
													}}>
														<li className="divider"></li>
														<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Ignore</a></li>
														<li className="divider"></li>
							    					<li><a style={myUniqueFaceSelectStyle_child_where_we_are} href="#!">Blame</a></li>
														<li className="divider"></li>
												    <li><a style={myUniqueFaceSelectStyle_child_where_we_are} href="#!">Share</a></li>
												    <li className="divider"></li>

							  					</ul>
													<div id={`modal${b}`} className="modal bottom-sheet" ref={()=>{
														$(document).ready(function(){
										    // the "href" attribute of the modal trigger must specify the modal ID that wants to be triggered
										    $('.modal').modal();
										  });
													}}>
												    <div className="modal-content">
												      <h4>Modal Header</h4>
												      <p>A bunch of text</p>
												    </div>
												    <div className="modal-footer">
												      <a href="#!" className="modal-action modal-close waves-effect waves-green btn-flat">Agree</a>
												    </div>
												  </div>
      										<p>{
														timeConverterOf(parseInt(a[3]))
													}</p>
													<p className="truncate" dangerouslySetInnerHTML={createMarkup(a[4])}></p>
													<br />
													<p>Average rating</p>
    										</div>
    										<div className="card-reveal">
													<div className="its_ok_shreya_i_am_alright_ok main_agar_samne" style={abToEkPalKiDuriSahiJayeNa}>
	      										<span className="">{a[0]}</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>{timeConverterOf(parseInt(a[3]))}</span><span style={sochNasake} className="card-title grey-text text-darken-4"><i className="material-icons right">close</i></span>

	      										<div style={dangerousStyleDiv} dangerouslySetInnerHTML={createMarkup(a[4])}></div>
														<br />
														<div style={fatherPeterDayal}>
															<div style={chandSurajSabYaha}>
																<img src={a[2]} style={chandSurajSabYaha_image} />
															</div>
														</div>
														<br />
														<div style={asalamuAlaykaYaRasoolAllahYaNabi}>
															<div style={allahuYaAllahLaIllah_1}>
																<div style={mawlayaSaliWaSalimAbdanDflex}>
																	{/*<a className="btn btn-floating "><i className="material-icons">attachment</i></a>*/}
																</div>
															</div>
															<div style={allahuYaAllahLaIllah_2}>
																<div style={mawlayaSaliWaSalimAbdanDflex}>
																	<a className='dropdown-button btn white black-text _pratibha_capitalize_my_text' href='#' data-activates={"dropdownnabi"+b}>Rate</a>
																	<ul id={'dropdownnabi'+b} className='dropdown-content' ref={() => {
																		$('.dropdown-button').dropdown({
																			 inDuration: 300,
																			 outDuration: 225,
																			 constrainWidth: false, // Does not change width of dropdown to that of the activator
																			 hover: false, // Activate on hover
																			 gutter: 50, // Spacing from edge
																			 belowOrigin: true, // Displays dropdown below the button
																			 alignment: 'right', // Displays dropdown with edge aligned to the left of button
																			 stopPropagation: true // Stops event propagation
																		 }
																	 );
																	}}>
																	<li className="divider"></li>
																	<li><a href="#!" className="black-text">-1</a></li>
																	<li className="divider"></li>
																	<li><a href="#!" className="black-text">0</a></li>
																	<li className="divider"></li>
																	<li><a href="#!" className="black-text">1</a></li>
																	<li className="divider"></li>
																	</ul>
																</div>
															</div>
															<div style={allahuYaAllahLaIllah_3}>
																<div style={mawlayaSaliWaSalimAbdanDflex}>
																	{/*<a className="btn btn-floating "><i className="material-icons">attachment</i></a>*/}
																</div>
															</div>
														</div>
														<br />
														<div style={chandSurajSabYaha_habibKhuda} className="_mere_dil_ko_kuchh_nahi_bhaye_sajna">
															<CommentBox Reference={a} />
															<input type="hidden" className="_temp_ref_comment" value={JSON.stringify(a)} />
														</div>
													</div>
    										</div>
											{/*<div key={b} style={fHundredStyle}>*/}
												{/*<div style={tStyleMainText}>
													<div style={mujhseJadaMereJaisa}>
														<div style={asDflexStMore}>
															<font size={5}>
																{
																	a[0]
																}
															</font>
															<input type="hidden" value={JSON.stringify(a)} />
														</div>
													</div>
													<div style={mujhseJadaMereJaisa_2}>
														<div style={asDflexStMore}>
															<font style={ooIfIcouldDen} size={3}>
																shared this
															</font>
														</div>
													</div>
													<div style={mujhseJadaMereJaisa_3}>
														<div style={asDflexStMore}>
															<font size={3}>
																{
																	timeConverter(parseInt(a[3]))
																}
															</font>
														</div>
													</div>
												</div>
												<div style={tStyleExtraText_posted_data}>
													<div dangerouslySetInnerHTML={createMarkup(a[4])} style={asDflexStMore_post} title="Please click me to read it in full size text only">

													</div>
												</div>
												<div style={tStyleImgText}>
													<div style={asDflexStMore}>
														<img src={a[2]} style={pImgOfPost} />
													</div>
												</div>
												<div style={tStyleExtraText_action_infy}>
												<div style={mujhseJadaMereJaisa_x}>
													<div style={asDflexStMore}>

														<font style={ooIfIcouldDen} size={2}>
															Total action - {a[6]}
														</font>
													</div>
												</div>
												<div style={mujhseJadaMereJaisa_2_x}>
													<div style={asDflexStMore}>
														<font style={ooIfIcouldDen} size={2}>
															Average rating - {a[7]}
														</font>
													</div>
												</div>
												<div style={mujhseJadaMereJaisa_3_x}>
													<div style={asDflexStMore}>
														<font style={ooIfIcouldDen} size={2}>
															Total ignore - {a[8]}
														</font>
													</div>
												</div>
												</div>
												<div style={tStyleExtraText}>
													<div style={mujhseJadaMereJaisa_x}>
														<div style={asDflexStMore}>

															<select style={raterSelect_action} onChange={this._chalo_madine_me}>
																<option value="" disabled="true" selected="true">Action</option>
																<option value="Hook up">Hook up</option>
																<option value="Hook down">Hook down</option>
																<option value="Emojis">Emojis</option>
																<option value="Comment">Comment</option>
																<option value="Blame">Blame</option>
																<option value="Save post">Save post</option>
															</select>
															<input type="hidden" value={JSON.stringify(a)} />
														</div>
													</div>
													<div style={mujhseJadaMereJaisa_2_x}>
														<div style={asDflexStMore}>
															<select style={raterSelect} onChange={this._allah_ne_utare_muhammad}>
																<option value="" disabled="true" selected="true">Rate</option>
																<option value="5">+5</option>
																<option value="4">+4</option>
																<option value="3">+3</option>
																<option value="2">+2</option>
																<option value="1">+1</option>
																<option value="0">0</option>
																<option value="-1">-1</option>
																<option value="-2">-2</option>
																<option value="-3">-3</option>
																<option value="-4">-4</option>
																<option value="-5">-5</option>
															</select>
															<input type="hidden" value={JSON.stringify(a)} />
														</div>
													</div>
													<div style={mujhseJadaMereJaisa_3_x}>
														<div style={asDflexStMore}>
															<font style={ooIfIcouldDen} size={4}>
																Ignore
															</font>
														</div>
													</div>
												</div>*/}
											</div>
										)
									}
								} )
							}
							</div>
						)
					}
				}else {
					return (
						<div style={everythingIsYouEverDreamedOf}>
						{
							this.state.testBilla.map( (a,b) => {
								return (
									<div key={b} style={fHundredStyle_open}>
										<div style={tStyleMainText}>
											<div style={mujhseJadaMereJaisa}>
												<div style={asDflexStMore}>
													<font size={5}>
														{
															a
														}
													</font>
												</div>
											</div>
											<div style={mujhseJadaMereJaisa_2}>
												<div style={asDflexStMore}>
													<font style={ooIfIcouldDen} size={3}>
														watched this
													</font>
												</div>
											</div>
											<div style={mujhseJadaMereJaisa_3}>
												<div style={asDflexStMore}>
													<font size={3}>
														{
															datwaHou()
														}
													</font>
												</div>
											</div>
										</div>
										<div style={tStyleImgText_open}>
											<div style={asDflexStMore}>
												heh
											</div>
										</div>
										<div style={tStyleExtraText}>
											<div style={mujhseJadaMereJaisa_x}>
												<div style={asDflexStMore}>
													<font style={ooIfIcouldDen} size={4}>
														Action
													</font>
												</div>
											</div>
											<div style={mujhseJadaMereJaisa_2_x}>
												<div style={asDflexStMore}>
													<select style={raterSelect}>
														<option value="" disabled="true" selected="true">Rate</option>
														<option value="5">+5</option>
														<option value="4">+4</option>
														<option value="3">+3</option>
														<option value="2">+2</option>
														<option value="1">+1</option>
														<option value="0">0</option>
														<option value="-1">-1</option>
														<option value="-2">-2</option>
														<option value="-3">-3</option>
														<option value="-4">-4</option>
														<option value="-5">-5</option>
													</select>
												</div>
											</div>
											<div style={mujhseJadaMereJaisa_3_x}>
												<div style={asDflexStMore}>
													<font style={ooIfIcouldDen} size={4}>
														Ignore
													</font>
												</div>
											</div>
										</div>
									</div>
								)
							} )
						}
						</div>
					)
				}
			}
		}

		const professionalSass={width:"100%",display:"flex",justifyContent:"center"};
		//const professionalBillaMain={width:"100%",height:""}
		class ProfessionalJobs extends React.Component {
			constructor(props) {
				super(props);
				this.state = {
					spinMe:true,
					professionalBilla:this.props.TestBilla,
					professionalPatola:"theLinkedFace",
					professionalTlfBilla:[],
					myFaceSuggest:[]
				};
				this.componentWillMount=this.componentWillMount.bind(this);
				this.componentDidMount=this.componentDidMount.bind(this);
				this._tenu_karda_suitSuitHohoOne=this._tenu_karda_suitSuitHohoOne.bind(this);
				this._tenu_karda_suitSuitHohoTwo=this._tenu_karda_suitSuitHohoTwo.bind(this);
			}
			_tenu_karda_suitSuitHohoOne(evt){
					evt.preventDefault();
					evt.stopPropagation();
					this.setState({
						professionalPatola:"theLinkedFace"
					});
			}
			_tenu_karda_suitSuitHohoTwo(evt){
				evt.preventDefault();
				evt.stopPropagation();
				this.setState({
					professionalPatola:"other"
				});
			}
			componentDidMount(){
				console.log(this.state.professionalBilla);
				var that=this;
				if (this.state.professionalBilla.length!=0) {
					this.setState({
						spinMe:false
					})
				}
			}
			componentWillMount(){
				var that=this;
				$(document).ready(function(){
					$(window).on("professionalArive",function(evt,evtInfo){
						//alert(that)
						let mmBilla=evtInfo.listings.listing;
						that.setState({
							professionalBilla:mmBilla,
							spinMe:false
						})

					})
				})

				let mNo=JSON.stringify({me:window.__rasoola.allah[1],PostType:window.__pageType,Pkey:window.__rasoola.allah[4]});
				$.ajax({
					url:`getMyAllRelatedPostBilla?data=${mNo}`,
					type:"GET",
					contentType:"json",
					async:true
				}).done((data)=>{
					console.log(data);
					let updateNeed=data.All;
					let slimdaimanabdan=["face suggestion",window.__rasoola.allah[1]];
					let ranNo=Math.floor((Math.random() * data.length));
					updateNeed.splice(ranNo, 0, slimdaimanabdan);
					let prevUpdate=that.state.professionalTlfBilla;
					let newArr=updateNeed.concat(prevUpdate);
					that.setState({
						professionalTlfBilla:newArr
					})
				}).fail((jqXHR,statusText)=>{
					console.log(statusText);
				})

				//let mNoA=JSON.stringify({me:window.__rasoola.allah[1]});
				let mNoA=JSON.stringify({Me:window.__rasoola.allah[1],Pkey:window.__rasoola.allah[4]});
				$.ajax({
					url:`getMyAllRelatedFacesBilla?data=${mNoA}`,
					type:"GET",
					contentType:"json",
					async:true
				}).done((data)=>{
					console.log(data);
					let tempData=data.All;
					that.setState({
						myFaceSuggest:tempData
					})
				}).fail((jqXHR,statusText)=>{
					console.log(statusText);
				})
			}
			render(){
				return (
					<div>
					<div style={amazonPatola_tab_style}>
						<div style={amazonPatola_tab_style_beta_1_baap}>
							<div className="z-depth-1 truncate" style={amazonPatola_tab_style_beta_1} onClick={this._tenu_karda_suitSuitHohoOne}>
								theLinkedFace
							</div>
						</div>
						<div style={amazonPatola_tab_style_beta_2_baap}>
							<div className="z-depth-1 truncate" style={amazonPatola_tab_style_beta_2} onClick={this._tenu_karda_suitSuitHohoTwo}>
								Other
							</div>
						</div>
					</div>

					<div  style={paddingGhumtaObama}>
					{
						this.state.professionalPatola=="theLinkedFace"?(
							<div className="_temp_hundred_percent_style_class_width">
								{
									this.state.professionalTlfBilla.length==0?(
										<div style={readerSass_sin} >
											<PreloderCircular />
										</div>
									):(
										<div className="_temp_hundred_percent_style_class_width">
											{
												this.state.professionalTlfBilla.map( (a,b)=>{
													if (a.length==2) {
														return (
															<div key={b} style={fHundredStyle_nabiya_salam}>
															<div id="fHundredStyle_nabiya_salam_same" style={fHundredStyle_nabiya_salam_same}>
																{
																	this.state.myFaceSuggest.map( (e,f) => {
																		if (e.length>1) {
																			return (

																				<div style={asalam_alayka_ya_rasool_allah} key={f}>
																				<input type="hidden" value={JSON.stringify(e)} />
																				<div id={f} className="card hoverable" style={indi_frnd_face_cont_tlf_pratibha} >
																					<div className="card-image waves-effect waves-block waves-light">
																						<img className="activator" style={faceWalaBhaiya} src={e[3]} />
																					</div>
																					<div className="card-content">
																						<span className="card-title activator grey-text text-darken-4" style={friends_wala_mehboob_tlf_dot_com} onClick={this._proper_patola_pratibha}>{e[0]}</span>
																						<a style={cust_spanning_tree_bt_sawan} className="dropdown-button btn black-text tooltipped" data-activates={`dropdownholo__ch__${f}`} data-position="bottom" data-delay="50" data-tooltip="Click to take some deep action" ref={()=>{
																							$(document).ready(function(){
																								$('.tooltipped').tooltip({delay: 50});
																							});
																						}} ><i className="small material-icons right">more_vert</i></a>
																						<ul style={uuuullllliiiiii} id={`dropdownholo__ch__${f}`} className='dropdown-content' ref={(elem) => {
																							$('.dropdown-button').dropdown({
																								 inDuration: 300,
																								 outDuration: 225,
																								 constrainWidth: true, // Does not change width of dropdown to that of the activator
																								 hover: false, // Activate on hover
																								 gutter: 200, // Spacing from edge
																								 belowOrigin: false, // Displays dropdown below the button
																								 alignment: 'right', // Displays dropdown with edge aligned to the left of button
																								 stopPropagation: true // Stops event propagation
																							 }
																						 );
																						}}>
																							<li className="divider"></li>
																							<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Ignore</a></li>
																							<li className="divider"></li>
																							<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Blame</a></li>
																							<li className="divider"></li>
																							<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Poke</a></li>
																							<li className="divider"></li>
																						</ul>

																					</div>
																					<div className="card-reveal" style={lala_lala_lala_dil_ne_ye_kaha_pratibha} >

																							<span style={sochNasake} className="card-title grey-text text-darken-4"><i className="material-icons right" onClick={this._clear_currentGuy_pratibha}>close</i></span>
																							<p className="truncate">{e[0]}</p>
																							<p className="truncate">{e[2]}</p>
																							<p className="truncate">Please select the desire face to link</p>
																							<ul>
																								<li>
																									{/*<form action="#"><p>
																										<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_soc" defaultChecked="false"  />
																										<label for="filled-in-box_tlf_link_soc">Social face</label>
																									</p></form>*/}
																									<div className="switch" >
																										<label className="black-text _design_my_font_weight_pratibha">
																											<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																											<span className="lever"></span>
																											Social Face
																										</label>
																										<input type="hidden" value="Social Face" />
																									</div>
																								</li>
																								<li>
																									{/*
																										<form action="#">
																											<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_prof" defaultChecked="false"  />
																											<label for="filled-in-box_tlf_link_prof">Professional face</label>
																										</form>
																										*/}
																										<div className="switch">
																											<label className="black-text _design_my_font_weight_pratibha">
																												<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																												<span className="lever"></span>
																												Professional Face
																											</label>
																											<input type="hidden" value="Professional Face" />
																										</div>
																								</li>
																								<li>
																									<div className="switch">
																										<label className="black-text _design_my_font_weight_pratibha">
																											<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																											<span className="lever"></span>
																											Consumer Face
																										</label>
																										<input type="hidden" value="Consumer Face" />
																									</div>
																									{/*
																										<form action="#">
																											<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_con" defaultChecked="false"  />
																											<label for="filled-in-box_tlf_link_con">Consumer face</label>
																										</form>
																										*/}
																								</li>
																								<li>
																									<div className="switch">
																										<label className="black-text _design_my_font_weight_pratibha">
																											<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																											<span className="lever"></span>
																											Reader Face
																										</label>
																										<input type="hidden" value="Reader Face" />
																									</div>
																									{/*
																										<form action="#">
																											<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_read" defaultChecked="false"  />
																											<label for="filled-in-box_tlf_link_read">Reader face</label>
																										</form>
																										*/}
																								</li>
																								<li>
																									{/*
																										<form action="#">
																											<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_date" defaultChecked="false"  />
																											<label for="filled-in-box_tlf_link_date">Dater face</label>
																										</form>
																										*/}
																										<div className="switch">
																											<label className="black-text _design_my_font_weight_pratibha">
																												<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																												<span className="lever"></span>
																												Dater Face
																											</label>
																											<input type="hidden" value="Dater Face" />
																										</div>
																								</li>
																								<li>
																								{/*
																									<form action="#">
																										<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_donate" defaultChecked="false" />
																										<label for="filled-in-box_tlf_link_donate">Donator face</label>
																									</form>
																									*/}
																									<div className="switch">
																										<label className="black-text _design_my_font_weight_pratibha">
																											<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																											<span className="lever"></span>
																											Donator Face
																										</label>
																										<input type="hidden" value="Donator Face" />
																									</div>
																								</li>
																								<li>
																									{/*
																										<form action="#">
																											<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_sin" defaultChecked="false"  />
																											<label for="filled-in-box_tlf_link_sin">Sinner face</label>
																										</form>
																										*/}
																									<div className="switch">
																										<label className="black-text _design_my_font_weight_pratibha">
																											<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																											<span className="lever"></span>
																											Sinner Face
																										</label>
																										<input type="hidden" value="Sinner Face" />
																									</div>
																								</li>
																							</ul>
																							<br />
																							<div style={link_my_different_face_pratibha_please}>
																								<input type="button" value="Link face" style={newPlaylistBtStylePratibhaLinkMyFace} className="dropdown-button btn" onClick={this._link_my_selected_face_pratibha_please} />
																							</div>
																					</div>
																				</div>
																				</div>
																			)
																		}else {
																			return false
																		}
																	} )
																}
															</div>
															</div>

														)
													}else if (a.length==9) {
														return (
															<div className="card hoverable" key={b} >
																<div className="card-image">
																	<img style={zoomInCursorZaanPeBane} src={a[2]} ref={() => {
																		{/*}$(document).ready(function(){
																			$('.materialboxed').materialbox();
																			//onClick={this._checking_for_img_click}
																		});*/}
																	}} onClick={this._checking_for_img_click} />
																</div>
																<div className="card-content">
																	<span className="card-title activator grey-text text-darken-4 " onClick={this._hacking_into_material}  >{a[0]}</span><a style={cust_spanning_tree_bt} className="dropdown-button btn black-text tooltipped" data-activates={`dropdownAA${b}`} data-position="bottom" data-delay="50" data-tooltip="Click to take some deep action" ref={()=>{
																		$(document).ready(function(){
																			$('.tooltipped').tooltip({delay: 50});
																		});
																	}} ><i className="large material-icons right">more_vert</i></a>
																	<ul style={uuuullllliiiiii} id={`dropdownAA${b}`} className='dropdown-content' ref={() => {
																		$('.dropdown-button').dropdown({
																			 inDuration: 300,
																			 outDuration: 225,
																			 constrainWidth: true, // Does not change width of dropdown to that of the activator
																			 hover: false, // Activate on hover
																			 gutter: 50, // Spacing from edge
																			 belowOrigin: true, // Displays dropdown below the button
																			 alignment: 'right', // Displays dropdown with edge aligned to the left of button
																			 stopPropagation: true // Stops event propagation
																		 }
																	 );
																	}}>
																		<li className="divider"></li>
																		<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Ignore</a></li>
																		<li className="divider"></li>
																		<li><a style={myUniqueFaceSelectStyle_child_where_we_are} href="#!">Blame</a></li>
																		<li className="divider"></li>
																		<li><a style={myUniqueFaceSelectStyle_child_where_we_are} href="#!">Share</a></li>
																		<li className="divider"></li>

																	</ul>
																	<div id={`modal${b}`} className="modal bottom-sheet" ref={()=>{
																		$(document).ready(function(){
																// the "href" attribute of the modal trigger must specify the modal ID that wants to be triggered
																$('.modal').modal();
															});
																	}}>
																		<div className="modal-content">
																			<h4>Modal Header</h4>
																			<p>A bunch of text</p>
																		</div>
																		<div className="modal-footer">
																			<a href="#!" className="modal-action modal-close waves-effect waves-green btn-flat">Agree</a>
																		</div>
																	</div>
																	<p>{
																		timeConverterOf(parseInt(a[3]))
																	}</p>
																	<p className="truncate" dangerouslySetInnerHTML={createMarkup(a[4])}></p>
																	<br />
																	<p>Average rating</p>
																</div>
																<div className="card-reveal">
																	<div className="its_ok_shreya_i_am_alright_ok main_agar_samne" style={abToEkPalKiDuriSahiJayeNa}>
																		<span className="">{a[0]}</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>{timeConverter(parseInt(a[3]))}</span><span style={sochNasake} className="card-title grey-text text-darken-4"><i className="material-icons right">close</i></span>

																		<div style={dangerousStyleDiv} dangerouslySetInnerHTML={createMarkup(a[4])}></div>
																		<br />
																		<div style={fatherPeterDayal}>
																			<div style={chandSurajSabYaha}>
																				<img src={a[2]} style={chandSurajSabYaha_image} />
																			</div>
																		</div>
																		<br />
																		<div style={asalamuAlaykaYaRasoolAllahYaNabi}>
																			<div style={allahuYaAllahLaIllah_1}>
																				<div style={mawlayaSaliWaSalimAbdanDflex}>
																					{/*<a className="btn btn-floating "><i className="material-icons">attachment</i></a>*/}
																				</div>
																			</div>
																			<div style={allahuYaAllahLaIllah_2}>
																				<div style={mawlayaSaliWaSalimAbdanDflex}>
																					<a className='dropdown-button btn white black-text _pratibha_capitalize_my_text' href='#' data-activates={"dropdownnabi"+b}>Rate</a>
																					<ul id={'dropdownnabi'+b} className='dropdown-content' ref={() => {
																						$('.dropdown-button').dropdown({
																							 inDuration: 300,
																							 outDuration: 225,
																							 constrainWidth: false, // Does not change width of dropdown to that of the activator
																							 hover: false, // Activate on hover
																							 gutter: 50, // Spacing from edge
																							 belowOrigin: true, // Displays dropdown below the button
																							 alignment: 'right', // Displays dropdown with edge aligned to the left of button
																							 stopPropagation: true // Stops event propagation
																						 }
																					 );
																					}}>
																					<li className="divider"></li>
																					<li><a href="#!" className="black-text">-1</a></li>
																					<li className="divider"></li>
																					<li><a href="#!" className="black-text">0</a></li>
																					<li className="divider"></li>
																					<li><a href="#!" className="black-text">1</a></li>
																					<li className="divider"></li>
																					</ul>
																				</div>
																			</div>
																			<div style={allahuYaAllahLaIllah_3}>
																				<div style={mawlayaSaliWaSalimAbdanDflex}>
																					{/*<a className="btn btn-floating "><i className="material-icons">attachment</i></a>*/}
																				</div>
																			</div>
																		</div>
																		<br />
																		<div style={chandSurajSabYaha_habibKhuda}>
																			<CommentBox />
																		</div>
																	</div>
																</div>
															</div>
														)
													}else {
														return false
													}
												} )
											}
										</div>
									)
								}
							</div>
						):(
							<div>
								{
									this.state.spinMe?(
										<div style={readerSass_sin} >
											<PreloderCircular />
										</div>
									):(
										<div>
											{
												this.state.professionalBilla.map( (a,b)=>{
													let ctr="Job category - "+a.category.name;
													let desc="Full description - "+a.description;
													let howToApply="How to apply - "+a.howto_apply?a.howto_apply:"N.A.";
													return (
														<div className="card" key={b}>
															<div className="card-image waves-effect waves-block waves-light">
																<img className="activator" src={a.company.hero?(a.company.hero.replace("https://d2fcz5no062gar.cloudfront.net","")):"img-not-available.png"} />
															</div>
															<div className="card-content">
																<span className="card-title activator grey-text text-darken-4">Job title - {a.title}<i className="material-icons right">more_vert</i></span>
																<p>Company name - {a.company.name}</p>
																<p dangerouslySetInnerHTML={createMarkup(ctr)}></p>
																<p>Tagline - {a.company.tagline}</p>
																<p>Location - {a.company.location?a.company.location.name:"N.A."}</p>
																<p>Posted on - {a.post_date?a.post_date:"N.A."}</p>
															</div>
															<div className="card-reveal">
																<span className="card-title grey-text text-darken-4">Job title - {a.title}<i className="material-icons right">close</i></span>
																<div dangerouslySetInnerHTML={createMarkup(desc)}></div>
																<br />
																<div dangerouslySetInnerHTML={createMarkup(howToApply)}></div>
															</div>
														</div>
													)
												} )
											}
										</div>
									)
								}
							</div>
						)
					}
					</div>
					</div>
				)
			}
		}



		const myImagePopupOwnStyle_book={width:"99%",height:"1255px",position:"absolute",zIndex:500000,backgroundColor:"transparent"};
		const myImageSidhaSadhaBhola_book={width:"100%",height:"100%",display:"flex",justifyContent:"flex-end",alignItems:"center",backgroundColor:"black"};
		const myImageSidhaSadhaBhola_thikana_book={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center",backgroundColor:"black"};
		const sajaDoYeKeshuMujheBajuoMeChhupaLo_nflex_book={width:"100%",height:"90%"};
		const sajaDoYeKeshuMujheBajuoMeChhupaLo_cutter_book={width:"100%",height:"10%"};
		const sajaDoYeKeshuMujheBajuoMeChhupaLo_book={width:"80%",height:"80%"};
		const allahKareDilNaLageKisiSe_book={width:"80%",height:"80%"};
		const whiteSpanningCustomColor_book={color:"white",cursor:"pointer"}
		class BookPopupGnuMakeGolang extends React.Component {
			constructor(props) {
				super(props);
				this.state = {
					myUrl:this.props.Url,
					myTitle:this.props.Title
				}
				this.componentWillMount=this.componentWillMount.bind(this);
				this.componentWillUnmount=this.componentWillUnmount.bind(this);
				this._close_my_popup=this._close_my_popup.bind(this);
			}
			_close_my_popup(evt){
				evt.preventDefault();
				evt.stopPropagation();
				console.log(document.getElementById('_pratibha_u_r_beautiful_iframe').src);
				ReactDOM.unmountComponentAtNode(document.getElementById('_js_root_animation'))
			}
			componentWillMount(){
				var events = new CustomEvent(
					"opacity",
					{
						detail: {
							message: 0.2,
							time: new Date(),
					},
					bubbles: true,
					cancelable: true
				}
			 );
			 window.dispatchEvent(events);
			}
			componentWillUnmount(){
				var events = new CustomEvent(
					"opacity",
					{
						detail: {
							message: 1,
							time: new Date(),
					},
					bubbles: true,
					cancelable: true
				}
			 );
			 window.dispatchEvent(events);
			}
			render(){
				return (
					<div style={myImagePopupOwnStyle_book}>
						<div style={sajaDoYeKeshuMujheBajuoMeChhupaLo_cutter_book}>
							<div style={myImageSidhaSadhaBhola_book}>
								<span className="white-text flow-text">Title-{this.state.myTitle} </span><span style={whiteSpanningCustomColor_book} onClick={this._close_my_popup}><i className="large material-icons right">close</i></span>
							</div>
						</div>
						<div style={sajaDoYeKeshuMujheBajuoMeChhupaLo_nflex_book}>
							<div style={myImageSidhaSadhaBhola_thikana_book}>
								<iframe src={`https://archive.org/stream/${this.state.myUrl}?ref=ol#page/n1/mode/2up`} id="_pratibha_u_r_beautiful_iframe" style={allahKareDilNaLageKisiSe_book}></iframe>
							</div>
						</div>
					</div>
				)
			}
		}




		const readerSass={width:"100%",display:"flex",justifyContent:"center"};
		const myReaderFrameStyle={width:"100%",height:"100%"};
		const i_ff_read_archieve_style={width:"100%"};

		class ReadersBook extends React.Component {
			constructor(props) {
				super(props);
				this.state = {
					spinMe:true,
					bookBilla:[],
					myFaceSuggest:[]
				};
				this.componentWillMount=this.componentWillMount.bind(this);
				this._pratibha_i_l_u=this._pratibha_i_l_u.bind(this);
			}
			_pratibha_i_l_u(evt){
				//evt.preventDefault();
				//evt.stopPropagation();
				console.log("hehehe");
				console.log(evt.currentTarget.parentElement.lastChild);
				//console.log(mota);
				let garbbbage=JSON.parse(evt.currentTarget.parentElement.lastChild.value)
				let ur=garbbbage.ia;
				let titleOf=garbbbage.title;
				ReactDOM.unmountComponentAtNode(document.getElementById('_js_root_animation'));
				ReactDOM.render(<BookPopupGnuMakeGolang Url={ur} Title={titleOf} />,document.getElementById('_js_root_animation'))
			}
			componentWillMount(){
				var that=this;
				$(document).ready(function(){
					$(window).on("bookArive",function(evt,evtInfo){
						console.log(evtInfo)
						let mmBilla=evtInfo.works;
						let currentSt=that.state.bookBilla;
						let newAof=currentSt.concat(mmBilla)
						that.setState({
							bookBilla:newAof,
							spinMe:false
						})
					})
				})

				let mNo=JSON.stringify({me:window.__rasoola.allah[1],PostType:window.__pageType,Pkey:window.__rasoola.allah[4]});
				$.ajax({
					url:`getMyAllRelatedPostBilla?data=${mNo}`,
					type:"GET",
					contentType:"json",
					async:true
				}).done((data)=>{
					console.log(data);
					let updateNeed=data.All;
					let slimdaimanabdan=["face suggestion",window.__rasoola.allah[1]];
					let ranNo=Math.floor((Math.random() * data.length));
					updateNeed.splice(ranNo, 0, slimdaimanabdan);
					let prevUpdate=that.state.bookBilla;
					let newArr=updateNeed.concat(prevUpdate);
					that.setState({
						bookBilla:newArr
					})
				}).fail((jqXHR,statusText)=>{
					console.log(statusText);
				})

				let mNoA=JSON.stringify({Me:window.__rasoola.allah[1],Pkey:window.__rasoola.allah[4]});
				$.ajax({
					url:`getMyAllRelatedFacesBilla?data=${mNoA}`,
					type:"GET",
					contentType:"json",
					async:true
				}).done((data)=>{
					console.log(data);
					let tempData=data.All;
					that.setState({
						myFaceSuggest:tempData
					})
				}).fail((jqXHR,statusText)=>{
					console.log(statusText);
				})


			}
			render(){
				return (
					<div>
						{
							this.state.spinMe==true?(
								<div style={readerSass} >
									<PreloderCircular />
								</div>
							):(
								<div>
									{
										this.state.bookBilla.map( (a,b) => {
											let temTest=a instanceof Array
											if (!temTest) {
												return (
													<div key={b}>
														<div className="card">
															<div className="card-image waves-effect waves-block waves-light">
																<img src={`https://covers.openlibrary.org/b/id/${a.cover_id}-L.jpg`} width="100%" />
															</div>
															<div className="card-content">
																<span className="card-title grey-text text-darken-4"><i className="material-icons right">more_vert</i></span>
																<span className="card-title grey-text text-darken-4">By - {a.authors.map( (m,n)=>{return(<span key={n}>{m.name}</span>)} )}</span>
																<p>Available to read - {!a.checked_out?"Yes":"No"}</p>
																<p>Title - {a.title}</p>
																<p onClick={this._pratibha_i_l_u} className="_design_my_cursor_pratibha">Read this book</p>
																<input type="hidden" value={JSON.stringify(a)} />
															</div>
															{/*<div className="card-reveal">
																<span className="card-title grey-text text-darken-4">Title - {a.title}<i className="material-icons right">close</i></span>
																<div>
																	<iframe src={`https://archive.org/stream/${a.ia}?ref=ol#page/1/mode/1up`} style={i_ff_read_archieve_style} />
																</div>
																<iframe src={`https://archive.org/stream/${a.ia}?ref=ol#page/n1/mode/2up`} style={myReaderFrameStyle}></iframe>
															</div>*/}
														</div>
													</div>
												)
											}else if (a.length==2) {
												return (
													<div key={b} style={fHundredStyle_nabiya_salam}>
													<div id="fHundredStyle_nabiya_salam_same" style={fHundredStyle_nabiya_salam_same}>
														{
															this.state.myFaceSuggest.map( (e,f) => {
																if (e.length>1) {
																	return (

																		<div style={asalam_alayka_ya_rasool_allah} key={f}>
																		<input type="hidden" value={JSON.stringify(e)} />
																		<div id={f} className="card hoverable" style={indi_frnd_face_cont_tlf_pratibha} >
																			<div className="card-image waves-effect waves-block waves-light">
																				<img className="activator" style={faceWalaBhaiya} src={e[3]} />
																			</div>
																			<div className="card-content">
																				<span className="card-title activator grey-text text-darken-4" style={friends_wala_mehboob_tlf_dot_com} onClick={this._proper_patola_pratibha}>{e[0]}</span>
																				<a style={cust_spanning_tree_bt_sawan} className="dropdown-button btn black-text tooltipped" data-activates={`dropdownholo__ch__${f}`} data-position="bottom" data-delay="50" data-tooltip="Click to take some deep action" ref={()=>{
																					$(document).ready(function(){
																						$('.tooltipped').tooltip({delay: 50});
																					});
																				}} ><i className="small material-icons right">more_vert</i></a>
																				<ul style={uuuullllliiiiii} id={`dropdownholo__ch__${f}`} className='dropdown-content' ref={(elem) => {
																					$('.dropdown-button').dropdown({
																						 inDuration: 300,
																						 outDuration: 225,
																						 constrainWidth: true, // Does not change width of dropdown to that of the activator
																						 hover: false, // Activate on hover
																						 gutter: 200, // Spacing from edge
																						 belowOrigin: false, // Displays dropdown below the button
																						 alignment: 'right', // Displays dropdown with edge aligned to the left of button
																						 stopPropagation: true // Stops event propagation
																					 }
																				 );
																				}}>
																					<li className="divider"></li>
																					<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Ignore</a></li>
																					<li className="divider"></li>
																					<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Blame</a></li>
																					<li className="divider"></li>
																					<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Poke</a></li>
																					<li className="divider"></li>
																				</ul>

																			</div>
																			<div className="card-reveal" style={lala_lala_lala_dil_ne_ye_kaha_pratibha} >

																					<span style={sochNasake} className="card-title grey-text text-darken-4"><i className="material-icons right" onClick={this._clear_currentGuy_pratibha}>close</i></span>
																					<p className="truncate">{e[0]}</p>
																					<p className="truncate">{e[2]}</p>
																					<p className="truncate">Please select the desire face to link</p>
																					<ul>
																						<li>
																							{/*<form action="#"><p>
																								<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_soc" defaultChecked="false"  />
																								<label for="filled-in-box_tlf_link_soc">Social face</label>
																							</p></form>*/}
																							<div className="switch" >
																								<label className="black-text _design_my_font_weight_pratibha">
																									<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																									<span className="lever"></span>
																									Social Face
																								</label>
																								<input type="hidden" value="Social Face" />
																							</div>
																						</li>
																						<li>
																							{/*
																								<form action="#">
																									<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_prof" defaultChecked="false"  />
																									<label for="filled-in-box_tlf_link_prof">Professional face</label>
																								</form>
																								*/}
																								<div className="switch">
																									<label className="black-text _design_my_font_weight_pratibha">
																										<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																										<span className="lever"></span>
																										Professional Face
																									</label>
																									<input type="hidden" value="Professional Face" />
																								</div>
																						</li>
																						<li>
																							<div className="switch">
																								<label className="black-text _design_my_font_weight_pratibha">
																									<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																									<span className="lever"></span>
																									Consumer Face
																								</label>
																								<input type="hidden" value="Consumer Face" />
																							</div>
																							{/*
																								<form action="#">
																									<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_con" defaultChecked="false"  />
																									<label for="filled-in-box_tlf_link_con">Consumer face</label>
																								</form>
																								*/}
																						</li>
																						<li>
																							<div className="switch">
																								<label className="black-text _design_my_font_weight_pratibha">
																									<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																									<span className="lever"></span>
																									Reader Face
																								</label>
																								<input type="hidden" value="Reader Face" />
																							</div>
																							{/*
																								<form action="#">
																									<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_read" defaultChecked="false"  />
																									<label for="filled-in-box_tlf_link_read">Reader face</label>
																								</form>
																								*/}
																						</li>
																						<li>
																							{/*
																								<form action="#">
																									<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_date" defaultChecked="false"  />
																									<label for="filled-in-box_tlf_link_date">Dater face</label>
																								</form>
																								*/}
																								<div className="switch">
																									<label className="black-text _design_my_font_weight_pratibha">
																										<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																										<span className="lever"></span>
																										Dater Face
																									</label>
																									<input type="hidden" value="Dater Face" />
																								</div>
																						</li>
																						<li>
																						{/*
																							<form action="#">
																								<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_donate" defaultChecked="false" />
																								<label for="filled-in-box_tlf_link_donate">Donator face</label>
																							</form>
																							*/}
																							<div className="switch">
																								<label className="black-text _design_my_font_weight_pratibha">
																									<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																									<span className="lever"></span>
																									Donator Face
																								</label>
																								<input type="hidden" value="Donator Face" />
																							</div>
																						</li>
																						<li>
																							{/*
																								<form action="#">
																									<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_sin" defaultChecked="false"  />
																									<label for="filled-in-box_tlf_link_sin">Sinner face</label>
																								</form>
																								*/}
																							<div className="switch">
																								<label className="black-text _design_my_font_weight_pratibha">
																									<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																									<span className="lever"></span>
																									Sinner Face
																								</label>
																								<input type="hidden" value="Sinner Face" />
																							</div>
																						</li>
																					</ul>
																					<br />
																					<div style={link_my_different_face_pratibha_please}>
																						<input type="button" value="Link face" style={newPlaylistBtStylePratibhaLinkMyFace} className="dropdown-button btn" onClick={this._link_my_selected_face_pratibha_please} />
																					</div>
																			</div>
																		</div>
																		</div>
																	)
																}else {
																	return false
																}
															} )
														}
													</div>
													</div>

												)
											}else {
												return (
													<div className="card hoverable" key={b} >
														<div className="card-image">
															<img style={zoomInCursorZaanPeBane} src={a[2]} ref={() => {
																{/*}$(document).ready(function(){
																	$('.materialboxed').materialbox();
																	//onClick={this._checking_for_img_click}
																});*/}
															}} onClick={this._checking_for_img_click} />
														</div>
														<div className="card-content">
															<span className="card-title activator grey-text text-darken-4 " onClick={this._hacking_into_material}  >{a[0]}</span><a style={cust_spanning_tree_bt} className="dropdown-button btn black-text tooltipped" data-activates={`dropdownAA${b}`} data-position="bottom" data-delay="50" data-tooltip="Click to take some deep action" ref={()=>{
																$(document).ready(function(){
																	$('.tooltipped').tooltip({delay: 50});
																});
															}} ><i className="large material-icons right">more_vert</i></a>
															<ul style={uuuullllliiiiii} id={`dropdownAA${b}`} className='dropdown-content' ref={() => {
																$('.dropdown-button').dropdown({
																	 inDuration: 300,
																	 outDuration: 225,
																	 constrainWidth: true, // Does not change width of dropdown to that of the activator
																	 hover: false, // Activate on hover
																	 gutter: 50, // Spacing from edge
																	 belowOrigin: true, // Displays dropdown below the button
																	 alignment: 'right', // Displays dropdown with edge aligned to the left of button
																	 stopPropagation: true // Stops event propagation
																 }
															 );
															}}>
																<li className="divider"></li>
																<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Ignore</a></li>
																<li className="divider"></li>
																<li><a style={myUniqueFaceSelectStyle_child_where_we_are} href="#!">Blame</a></li>
																<li className="divider"></li>
																<li><a style={myUniqueFaceSelectStyle_child_where_we_are} href="#!">Share</a></li>
																<li className="divider"></li>

															</ul>
															<div id={`modal${b}`} className="modal bottom-sheet" ref={()=>{
																$(document).ready(function(){
														// the "href" attribute of the modal trigger must specify the modal ID that wants to be triggered
														$('.modal').modal();
													});
															}}>
																<div className="modal-content">
																	<h4>Modal Header</h4>
																	<p>A bunch of text</p>
																</div>
																<div className="modal-footer">
																	<a href="#!" className="modal-action modal-close waves-effect waves-green btn-flat">Agree</a>
																</div>
															</div>
															<p>{
																timeConverterOf(parseInt(a[3]))
															}</p>
															<p className="truncate" dangerouslySetInnerHTML={createMarkup(a[4])}></p>
															<br />
															<p>Average rating</p>
														</div>
														<div className="card-reveal">
															<div className="its_ok_shreya_i_am_alright_ok main_agar_samne" style={abToEkPalKiDuriSahiJayeNa}>
																<span className="">{a[0]}</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>{timeConverter(parseInt(a[3]))}</span><span style={sochNasake} className="card-title grey-text text-darken-4"><i className="material-icons right">close</i></span>

																<div style={dangerousStyleDiv} dangerouslySetInnerHTML={createMarkup(a[4])}></div>
																<br />
																<div style={fatherPeterDayal}>
																	<div style={chandSurajSabYaha}>
																		<img src={a[2]} style={chandSurajSabYaha_image} />
																	</div>
																</div>
																<br />
																<div style={asalamuAlaykaYaRasoolAllahYaNabi}>
																	<div style={allahuYaAllahLaIllah_1}>
																		<div style={mawlayaSaliWaSalimAbdanDflex}>
																			{/*<a className="btn btn-floating "><i className="material-icons">attachment</i></a>*/}
																		</div>
																	</div>
																	<div style={allahuYaAllahLaIllah_2}>
																		<div style={mawlayaSaliWaSalimAbdanDflex}>
																			<a className='dropdown-button btn white black-text _pratibha_capitalize_my_text' href='#' data-activates={"dropdownnabi"+b}>Rate</a>
																			<ul id={'dropdownnabi'+b} className='dropdown-content' ref={() => {
																				$('.dropdown-button').dropdown({
																					 inDuration: 300,
																					 outDuration: 225,
																					 constrainWidth: false, // Does not change width of dropdown to that of the activator
																					 hover: false, // Activate on hover
																					 gutter: 50, // Spacing from edge
																					 belowOrigin: true, // Displays dropdown below the button
																					 alignment: 'right', // Displays dropdown with edge aligned to the left of button
																					 stopPropagation: true // Stops event propagation
																				 }
																			 );
																			}}>
																			<li className="divider"></li>
																			<li><a href="#!" className="black-text">-1</a></li>
																			<li className="divider"></li>
																			<li><a href="#!" className="black-text">0</a></li>
																			<li className="divider"></li>
																			<li><a href="#!" className="black-text">1</a></li>
																			<li className="divider"></li>
																			</ul>
																		</div>
																	</div>
																	<div style={allahuYaAllahLaIllah_3}>
																		<div style={mawlayaSaliWaSalimAbdanDflex}>
																			{/*<a className="btn btn-floating "><i className="material-icons">attachment</i></a>*/}
																		</div>
																	</div>
																</div>
																<br />
																<div style={chandSurajSabYaha_habibKhuda}>
																	<CommentBox />
																</div>
															</div>
														</div>
													</div>
												)
											}

										} )
									}
								</div>
							)
						}
					</div>
				)
			}
		}




				const readerSass_date={width:"100%",display:"flex",justifyContent:"center"};
				//const myReaderFrameStyle={width:"100%",height:"100%"}

				class DatingLook extends React.Component {
					constructor(props) {
						super(props);
						this.state = {
							spinMe:true,
							dateBilla:[],
							myFaceSuggest:[]
						};
						this.componentWillMount=this.componentWillMount.bind(this);
					}
					componentWillMount(){
						var that=this;
						/*$(document).ready(function(){
							$(window).on("bookArive",function(evt,evtInfo){
								console.log(evtInfo)
								let mmBilla=evtInfo.works;
								that.setState({
									bookBilla:mmBilla,
									spinMe:false
								})
							})
						})*/

						let mNo=JSON.stringify({me:window.__rasoola.allah[1],PostType:window.__pageType,Pkey:window.__rasoola.allah[4]});
						$.ajax({
							url:`getMyAllRelatedPostBilla?data=${mNo}`,
							type:"GET",
							contentType:"json",
							async:true
						}).done((data)=>{
							console.log(data);
							let updateNeed=data.All;
							let slimdaimanabdan=["face suggestion",window.__rasoola.allah[1]];
							let ranNo=Math.floor((Math.random() * data.length));
							updateNeed.splice(ranNo, 0, slimdaimanabdan);
							let prevUpdate=that.state.dateBilla;
							let newArr=updateNeed.concat(prevUpdate);
							that.setState({
								dateBilla:newArr,
								spinMe:false
							})
						}).fail((jqXHR,statusText)=>{
							console.log(statusText);
						})

						let mNoA=JSON.stringify({Me:window.__rasoola.allah[1],Pkey:window.__rasoola.allah[4]});
						$.ajax({
							url:`getMyAllRelatedFacesBilla?data=${mNoA}`,
							type:"GET",
							contentType:"json",
							async:true
						}).done((data)=>{
							console.log(data);
							let tempData=data.All;
							that.setState({
								myFaceSuggest:tempData
							})
						}).fail((jqXHR,statusText)=>{
							console.log(statusText);
						})


					}
					render(){
						return (
							<div>
								{
									this.state.spinMe==true?(
										<div style={readerSass_date} >
											<PreloderCircular />
										</div>
									):(
										<div className="_temp_hundred_percent_style_class_width">
											{
												this.state.dateBilla.map( (a,b)=>{
													if (a.length==2) {
														return (
															<div key={b} style={fHundredStyle_nabiya_salam}>
															<div id="fHundredStyle_nabiya_salam_same" style={fHundredStyle_nabiya_salam_same}>
																{
																	this.state.myFaceSuggest.map( (e,f) => {
																		if (e.length>1) {
																			return (

																				<div style={asalam_alayka_ya_rasool_allah} key={f}>
																				<input type="hidden" value={JSON.stringify(e)} />
																				<div id={f} className="card hoverable" style={indi_frnd_face_cont_tlf_pratibha} >
																					<div className="card-image waves-effect waves-block waves-light">
																						<img className="activator" style={faceWalaBhaiya} src={e[3]} />
																					</div>
																					<div className="card-content">
																						<span className="card-title activator grey-text text-darken-4" style={friends_wala_mehboob_tlf_dot_com} onClick={this._proper_patola_pratibha}>{e[0]}</span>
																						<a style={cust_spanning_tree_bt_sawan} className="dropdown-button btn black-text tooltipped" data-activates={`dropdownholo__ch__${f}`} data-position="bottom" data-delay="50" data-tooltip="Click to take some deep action" ref={()=>{
																							$(document).ready(function(){
																								$('.tooltipped').tooltip({delay: 50});
																							});
																						}} ><i className="small material-icons right">more_vert</i></a>
																						<ul style={uuuullllliiiiii} id={`dropdownholo__ch__${f}`} className='dropdown-content' ref={(elem) => {
																							$('.dropdown-button').dropdown({
																								 inDuration: 300,
																								 outDuration: 225,
																								 constrainWidth: true, // Does not change width of dropdown to that of the activator
																								 hover: false, // Activate on hover
																								 gutter: 200, // Spacing from edge
																								 belowOrigin: false, // Displays dropdown below the button
																								 alignment: 'right', // Displays dropdown with edge aligned to the left of button
																								 stopPropagation: true // Stops event propagation
																							 }
																						 );
																						}}>
																							<li className="divider"></li>
																							<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Ignore</a></li>
																							<li className="divider"></li>
																							<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Blame</a></li>
																							<li className="divider"></li>
																							<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Poke</a></li>
																							<li className="divider"></li>
																						</ul>

																					</div>
																					<div className="card-reveal" style={lala_lala_lala_dil_ne_ye_kaha_pratibha} >

																							<span style={sochNasake} className="card-title grey-text text-darken-4"><i className="material-icons right" onClick={this._clear_currentGuy_pratibha}>close</i></span>
																							<p className="truncate">{e[0]}</p>
																							<p className="truncate">{e[2]}</p>
																							<p className="truncate">Please select the desire face to link</p>
																							<ul>
																								<li>
																									{/*<form action="#"><p>
																										<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_soc" defaultChecked="false"  />
																										<label for="filled-in-box_tlf_link_soc">Social face</label>
																									</p></form>*/}
																									<div className="switch" >
																										<label className="black-text _design_my_font_weight_pratibha">
																											<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																											<span className="lever"></span>
																											Social Face
																										</label>
																										<input type="hidden" value="Social Face" />
																									</div>
																								</li>
																								<li>
																									{/*
																										<form action="#">
																											<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_prof" defaultChecked="false"  />
																											<label for="filled-in-box_tlf_link_prof">Professional face</label>
																										</form>
																										*/}
																										<div className="switch">
																											<label className="black-text _design_my_font_weight_pratibha">
																												<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																												<span className="lever"></span>
																												Professional Face
																											</label>
																											<input type="hidden" value="Professional Face" />
																										</div>
																								</li>
																								<li>
																									<div className="switch">
																										<label className="black-text _design_my_font_weight_pratibha">
																											<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																											<span className="lever"></span>
																											Consumer Face
																										</label>
																										<input type="hidden" value="Consumer Face" />
																									</div>
																									{/*
																										<form action="#">
																											<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_con" defaultChecked="false"  />
																											<label for="filled-in-box_tlf_link_con">Consumer face</label>
																										</form>
																										*/}
																								</li>
																								<li>
																									<div className="switch">
																										<label className="black-text _design_my_font_weight_pratibha">
																											<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																											<span className="lever"></span>
																											Reader Face
																										</label>
																										<input type="hidden" value="Reader Face" />
																									</div>
																									{/*
																										<form action="#">
																											<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_read" defaultChecked="false"  />
																											<label for="filled-in-box_tlf_link_read">Reader face</label>
																										</form>
																										*/}
																								</li>
																								<li>
																									{/*
																										<form action="#">
																											<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_date" defaultChecked="false"  />
																											<label for="filled-in-box_tlf_link_date">Dater face</label>
																										</form>
																										*/}
																										<div className="switch">
																											<label className="black-text _design_my_font_weight_pratibha">
																												<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																												<span className="lever"></span>
																												Dater Face
																											</label>
																											<input type="hidden" value="Dater Face" />
																										</div>
																								</li>
																								<li>
																								{/*
																									<form action="#">
																										<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_donate" defaultChecked="false" />
																										<label for="filled-in-box_tlf_link_donate">Donator face</label>
																									</form>
																									*/}
																									<div className="switch">
																										<label className="black-text _design_my_font_weight_pratibha">
																											<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																											<span className="lever"></span>
																											Donator Face
																										</label>
																										<input type="hidden" value="Donator Face" />
																									</div>
																								</li>
																								<li>
																									{/*
																										<form action="#">
																											<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_sin" defaultChecked="false"  />
																											<label for="filled-in-box_tlf_link_sin">Sinner face</label>
																										</form>
																										*/}
																									<div className="switch">
																										<label className="black-text _design_my_font_weight_pratibha">
																											<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																											<span className="lever"></span>
																											Sinner Face
																										</label>
																										<input type="hidden" value="Sinner Face" />
																									</div>
																								</li>
																							</ul>
																							<br />
																							<div style={link_my_different_face_pratibha_please}>
																								<input type="button" value="Link face" style={newPlaylistBtStylePratibhaLinkMyFace} className="dropdown-button btn" onClick={this._link_my_selected_face_pratibha_please} />
																							</div>
																					</div>
																				</div>
																				</div>
																			)
																		}else {
																			return false
																		}
																	} )
																}
															</div>
															</div>

														)
													}else if (a.length==9) {
														return (
															<div className="card hoverable" key={b} >
																<div className="card-image">
																	<img style={zoomInCursorZaanPeBane} src={a[2]} ref={() => {
																		{/*}$(document).ready(function(){
																			$('.materialboxed').materialbox();
																			//onClick={this._checking_for_img_click}
																		});*/}
																	}} onClick={this._checking_for_img_click} />
																</div>
																<div className="card-content">
																	<span className="card-title activator grey-text text-darken-4 " onClick={this._hacking_into_material}  >{a[0]}</span><a style={cust_spanning_tree_bt} className="dropdown-button btn black-text tooltipped" data-activates={`dropdownAA${b}`} data-position="bottom" data-delay="50" data-tooltip="Click to take some deep action" ref={()=>{
																		$(document).ready(function(){
																			$('.tooltipped').tooltip({delay: 50});
																		});
																	}} ><i className="large material-icons right">more_vert</i></a>
																	<ul style={uuuullllliiiiii} id={`dropdownAA${b}`} className='dropdown-content' ref={() => {
																		$('.dropdown-button').dropdown({
																			 inDuration: 300,
																			 outDuration: 225,
																			 constrainWidth: true, // Does not change width of dropdown to that of the activator
																			 hover: false, // Activate on hover
																			 gutter: 50, // Spacing from edge
																			 belowOrigin: true, // Displays dropdown below the button
																			 alignment: 'right', // Displays dropdown with edge aligned to the left of button
																			 stopPropagation: true // Stops event propagation
																		 }
																	 );
																	}}>
																		<li className="divider"></li>
																		<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Ignore</a></li>
																		<li className="divider"></li>
																		<li><a style={myUniqueFaceSelectStyle_child_where_we_are} href="#!">Blame</a></li>
																		<li className="divider"></li>
																		<li><a style={myUniqueFaceSelectStyle_child_where_we_are} href="#!">Share</a></li>
																		<li className="divider"></li>

																	</ul>
																	<div id={`modal${b}`} className="modal bottom-sheet" ref={()=>{
																		$(document).ready(function(){
																// the "href" attribute of the modal trigger must specify the modal ID that wants to be triggered
																$('.modal').modal();
															});
																	}}>
																		<div className="modal-content">
																			<h4>Modal Header</h4>
																			<p>A bunch of text</p>
																		</div>
																		<div className="modal-footer">
																			<a href="#!" className="modal-action modal-close waves-effect waves-green btn-flat">Agree</a>
																		</div>
																	</div>
																	<p>{
																		timeConverterOf(parseInt(a[3]))
																	}</p>
																	<p className="truncate" dangerouslySetInnerHTML={createMarkup(a[4])}></p>
																	<br />
																	<p>Average rating</p>
																</div>
																<div className="card-reveal">
																	<div className="its_ok_shreya_i_am_alright_ok main_agar_samne" style={abToEkPalKiDuriSahiJayeNa}>
																		<span className="">{a[0]}</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>{timeConverter(parseInt(a[3]))}</span><span style={sochNasake} className="card-title grey-text text-darken-4"><i className="material-icons right">close</i></span>

																		<div style={dangerousStyleDiv} dangerouslySetInnerHTML={createMarkup(a[4])}></div>
																		<br />
																		<div style={fatherPeterDayal}>
																			<div style={chandSurajSabYaha}>
																				<img src={a[2]} style={chandSurajSabYaha_image} />
																			</div>
																		</div>
																		<br />
																		<div style={asalamuAlaykaYaRasoolAllahYaNabi}>
																			<div style={allahuYaAllahLaIllah_1}>
																				<div style={mawlayaSaliWaSalimAbdanDflex}>
																					{/*<a className="btn btn-floating "><i className="material-icons">attachment</i></a>*/}
																				</div>
																			</div>
																			<div style={allahuYaAllahLaIllah_2}>
																				<div style={mawlayaSaliWaSalimAbdanDflex}>
																					<a className='dropdown-button btn white black-text _pratibha_capitalize_my_text' href='#' data-activates={"dropdownnabi"+b}>Rate</a>
																					<ul id={'dropdownnabi'+b} className='dropdown-content' ref={() => {
																						$('.dropdown-button').dropdown({
																							 inDuration: 300,
																							 outDuration: 225,
																							 constrainWidth: false, // Does not change width of dropdown to that of the activator
																							 hover: false, // Activate on hover
																							 gutter: 50, // Spacing from edge
																							 belowOrigin: true, // Displays dropdown below the button
																							 alignment: 'right', // Displays dropdown with edge aligned to the left of button
																							 stopPropagation: true // Stops event propagation
																						 }
																					 );
																					}}>
																					<li className="divider"></li>
																					<li><a href="#!" className="black-text">-1</a></li>
																					<li className="divider"></li>
																					<li><a href="#!" className="black-text">0</a></li>
																					<li className="divider"></li>
																					<li><a href="#!" className="black-text">1</a></li>
																					<li className="divider"></li>
																					</ul>
																				</div>
																			</div>
																			<div style={allahuYaAllahLaIllah_3}>
																				<div style={mawlayaSaliWaSalimAbdanDflex}>
																					{/*<a className="btn btn-floating "><i className="material-icons">attachment</i></a>*/}
																				</div>
																			</div>
																		</div>
																		<br />
																		<div style={chandSurajSabYaha_habibKhuda}>
																			<CommentBox />
																		</div>
																	</div>
																</div>
															</div>
														)
													}else {
														return false
													}
												} )
											}
										</div>
									)
								}
							</div>
						)
					}
				}







								const readerSass_donate={width:"100%",display:"flex",justifyContent:"center"};
								//const myReaderFrameStyle={width:"100%",height:"100%"}

								class DonaterLook extends React.Component {
									constructor(props) {
										super(props);
										this.state = {
											spinMe:true,
											donationBilla:[],
											myFaceSuggest:[]
										};
										this.componentWillMount=this.componentWillMount.bind(this);
									}
									componentWillMount(){
										var that=this;
										/*$(document).ready(function(){
											$(window).on("bookArive",function(evt,evtInfo){
												console.log(evtInfo)
												let mmBilla=evtInfo.works;
												that.setState({
													bookBilla:mmBilla,
													spinMe:false
												})
											})
										})*/

										let mNo=JSON.stringify({me:window.__rasoola.allah[1],PostType:window.__pageType,Pkey:window.__rasoola.allah[4]});
										$.ajax({
											url:`getMyAllRelatedPostBilla?data=${mNo}`,
											type:"GET",
											contentType:"json",
											async:true
										}).done((data)=>{
											console.log(data);
											let updateNeed=data.All;
											let slimdaimanabdan=["face suggestion",window.__rasoola.allah[1]];
											let ranNo=Math.floor((Math.random() * data.length));
											updateNeed.splice(ranNo, 0, slimdaimanabdan);
											let prevUpdate=that.state.donationBilla;
											let newArr=updateNeed.concat(prevUpdate);
											that.setState({
												donationBilla:newArr,
												spinMe:false
											})
										}).fail((jqXHR,statusText)=>{
											console.log(statusText);
										})

										let mNoA=JSON.stringify({Me:window.__rasoola.allah[1],Pkey:window.__rasoola.allah[4]});
										$.ajax({
											url:`getMyAllRelatedFacesBilla?data=${mNoA}`,
											type:"GET",
											contentType:"json",
											async:true
										}).done((data)=>{
											console.log(data);
											let tempData=data.All;
											that.setState({
												myFaceSuggest:tempData
											})
										}).fail((jqXHR,statusText)=>{
											console.log(statusText);
										})

									}
									render(){
										return (
											<div>
												{
													this.state.spinMe==true?(
														<div style={readerSass_donate} >
															<PreloderCircular />
														</div>
													):(
														<div className="_temp_hundred_percent_style_class_width">
															{
																this.state.donationBilla.map( (a,b)=>{
																	if (a.length==2) {
																		return (
																			<div key={b} style={fHundredStyle_nabiya_salam}>
																			<div id="fHundredStyle_nabiya_salam_same" style={fHundredStyle_nabiya_salam_same}>
																				{
																					this.state.myFaceSuggest.map( (e,f) => {
																						if (e.length>1) {
																							return (

																								<div style={asalam_alayka_ya_rasool_allah} key={f}>
																								<input type="hidden" value={JSON.stringify(e)} />
																								<div id={f} className="card hoverable" style={indi_frnd_face_cont_tlf_pratibha} >
																									<div className="card-image waves-effect waves-block waves-light">
																										<img className="activator" style={faceWalaBhaiya} src={e[3]} />
																									</div>
																									<div className="card-content">
																										<span className="card-title activator grey-text text-darken-4" style={friends_wala_mehboob_tlf_dot_com} onClick={this._proper_patola_pratibha}>{e[0]}</span>
																										<a style={cust_spanning_tree_bt_sawan} className="dropdown-button btn black-text tooltipped" data-activates={`dropdownholo__ch__${f}`} data-position="bottom" data-delay="50" data-tooltip="Click to take some deep action" ref={()=>{
																											$(document).ready(function(){
																												$('.tooltipped').tooltip({delay: 50});
																											});
																										}} ><i className="small material-icons right">more_vert</i></a>
																										<ul style={uuuullllliiiiii} id={`dropdownholo__ch__${f}`} className='dropdown-content' ref={(elem) => {
																											$('.dropdown-button').dropdown({
																												 inDuration: 300,
																												 outDuration: 225,
																												 constrainWidth: true, // Does not change width of dropdown to that of the activator
																												 hover: false, // Activate on hover
																												 gutter: 200, // Spacing from edge
																												 belowOrigin: false, // Displays dropdown below the button
																												 alignment: 'right', // Displays dropdown with edge aligned to the left of button
																												 stopPropagation: true // Stops event propagation
																											 }
																										 );
																										}}>
																											<li className="divider"></li>
																											<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Ignore</a></li>
																											<li className="divider"></li>
																											<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Blame</a></li>
																											<li className="divider"></li>
																											<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Poke</a></li>
																											<li className="divider"></li>
																										</ul>

																									</div>
																									<div className="card-reveal" style={lala_lala_lala_dil_ne_ye_kaha_pratibha} >

																											<span style={sochNasake} className="card-title grey-text text-darken-4"><i className="material-icons right" onClick={this._clear_currentGuy_pratibha}>close</i></span>
																											<p className="truncate">{e[0]}</p>
																											<p className="truncate">{e[2]}</p>
																											<p className="truncate">Please select the desire face to link</p>
																											<ul>
																												<li>
																													{/*<form action="#"><p>
																														<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_soc" defaultChecked="false"  />
																														<label for="filled-in-box_tlf_link_soc">Social face</label>
																													</p></form>*/}
																													<div className="switch" >
																														<label className="black-text _design_my_font_weight_pratibha">
																															<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																															<span className="lever"></span>
																															Social Face
																														</label>
																														<input type="hidden" value="Social Face" />
																													</div>
																												</li>
																												<li>
																													{/*
																														<form action="#">
																															<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_prof" defaultChecked="false"  />
																															<label for="filled-in-box_tlf_link_prof">Professional face</label>
																														</form>
																														*/}
																														<div className="switch">
																															<label className="black-text _design_my_font_weight_pratibha">
																																<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																																<span className="lever"></span>
																																Professional Face
																															</label>
																															<input type="hidden" value="Professional Face" />
																														</div>
																												</li>
																												<li>
																													<div className="switch">
																														<label className="black-text _design_my_font_weight_pratibha">
																															<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																															<span className="lever"></span>
																															Consumer Face
																														</label>
																														<input type="hidden" value="Consumer Face" />
																													</div>
																													{/*
																														<form action="#">
																															<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_con" defaultChecked="false"  />
																															<label for="filled-in-box_tlf_link_con">Consumer face</label>
																														</form>
																														*/}
																												</li>
																												<li>
																													<div className="switch">
																														<label className="black-text _design_my_font_weight_pratibha">
																															<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																															<span className="lever"></span>
																															Reader Face
																														</label>
																														<input type="hidden" value="Reader Face" />
																													</div>
																													{/*
																														<form action="#">
																															<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_read" defaultChecked="false"  />
																															<label for="filled-in-box_tlf_link_read">Reader face</label>
																														</form>
																														*/}
																												</li>
																												<li>
																													{/*
																														<form action="#">
																															<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_date" defaultChecked="false"  />
																															<label for="filled-in-box_tlf_link_date">Dater face</label>
																														</form>
																														*/}
																														<div className="switch">
																															<label className="black-text _design_my_font_weight_pratibha">
																																<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																																<span className="lever"></span>
																																Dater Face
																															</label>
																															<input type="hidden" value="Dater Face" />
																														</div>
																												</li>
																												<li>
																												{/*
																													<form action="#">
																														<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_donate" defaultChecked="false" />
																														<label for="filled-in-box_tlf_link_donate">Donator face</label>
																													</form>
																													*/}
																													<div className="switch">
																														<label className="black-text _design_my_font_weight_pratibha">
																															<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																															<span className="lever"></span>
																															Donator Face
																														</label>
																														<input type="hidden" value="Donator Face" />
																													</div>
																												</li>
																												<li>
																													{/*
																														<form action="#">
																															<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_sin" defaultChecked="false"  />
																															<label for="filled-in-box_tlf_link_sin">Sinner face</label>
																														</form>
																														*/}
																													<div className="switch">
																														<label className="black-text _design_my_font_weight_pratibha">
																															<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																															<span className="lever"></span>
																															Sinner Face
																														</label>
																														<input type="hidden" value="Sinner Face" />
																													</div>
																												</li>
																											</ul>
																											<br />
																											<div style={link_my_different_face_pratibha_please}>
																												<input type="button" value="Link face" style={newPlaylistBtStylePratibhaLinkMyFace} className="dropdown-button btn" onClick={this._link_my_selected_face_pratibha_please} />
																											</div>
																									</div>
																								</div>
																								</div>
																							)
																						}else {
																							return false
																						}
																					} )
																				}
																			</div>
																			</div>

																		)
																	}else if (a.length==9) {
																		return (
																			<div className="card hoverable" key={b} >
																				<div className="card-image">
																					<img style={zoomInCursorZaanPeBane} src={a[2]} ref={() => {
																						{/*}$(document).ready(function(){
																							$('.materialboxed').materialbox();
																							//onClick={this._checking_for_img_click}
																						});*/}
																					}} onClick={this._checking_for_img_click} />
																				</div>
																				<div className="card-content">
																					<span className="card-title activator grey-text text-darken-4 " onClick={this._hacking_into_material}  >{a[0]}</span><a style={cust_spanning_tree_bt} className="dropdown-button btn black-text tooltipped" data-activates={`dropdownAA${b}`} data-position="bottom" data-delay="50" data-tooltip="Click to take some deep action" ref={()=>{
																						$(document).ready(function(){
																							$('.tooltipped').tooltip({delay: 50});
																						});
																					}} ><i className="large material-icons right">more_vert</i></a>
																					<ul style={uuuullllliiiiii} id={`dropdownAA${b}`} className='dropdown-content' ref={() => {
																						$('.dropdown-button').dropdown({
																							 inDuration: 300,
																							 outDuration: 225,
																							 constrainWidth: true, // Does not change width of dropdown to that of the activator
																							 hover: false, // Activate on hover
																							 gutter: 50, // Spacing from edge
																							 belowOrigin: true, // Displays dropdown below the button
																							 alignment: 'right', // Displays dropdown with edge aligned to the left of button
																							 stopPropagation: true // Stops event propagation
																						 }
																					 );
																					}}>
																						<li className="divider"></li>
																						<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Ignore</a></li>
																						<li className="divider"></li>
																						<li><a style={myUniqueFaceSelectStyle_child_where_we_are} href="#!">Blame</a></li>
																						<li className="divider"></li>
																						<li><a style={myUniqueFaceSelectStyle_child_where_we_are} href="#!">Share</a></li>
																						<li className="divider"></li>

																					</ul>
																					<div id={`modal${b}`} className="modal bottom-sheet" ref={()=>{
																						$(document).ready(function(){
																				// the "href" attribute of the modal trigger must specify the modal ID that wants to be triggered
																				$('.modal').modal();
																			});
																					}}>
																						<div className="modal-content">
																							<h4>Modal Header</h4>
																							<p>A bunch of text</p>
																						</div>
																						<div className="modal-footer">
																							<a href="#!" className="modal-action modal-close waves-effect waves-green btn-flat">Agree</a>
																						</div>
																					</div>
																					<p>{
																						timeConverterOf(parseInt(a[3]))
																					}</p>
																					<p className="truncate" dangerouslySetInnerHTML={createMarkup(a[4])}></p>
																					<br />
																					<p>Average rating</p>
																				</div>
																				<div className="card-reveal">
																					<div className="its_ok_shreya_i_am_alright_ok main_agar_samne" style={abToEkPalKiDuriSahiJayeNa}>
																						<span className="">{a[0]}</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>{timeConverter(parseInt(a[3]))}</span><span style={sochNasake} className="card-title grey-text text-darken-4"><i className="material-icons right">close</i></span>

																						<div style={dangerousStyleDiv} dangerouslySetInnerHTML={createMarkup(a[4])}></div>
																						<br />
																						<div style={fatherPeterDayal}>
																							<div style={chandSurajSabYaha}>
																								<img src={a[2]} style={chandSurajSabYaha_image} />
																							</div>
																						</div>
																						<br />
																						<div style={asalamuAlaykaYaRasoolAllahYaNabi}>
																							<div style={allahuYaAllahLaIllah_1}>
																								<div style={mawlayaSaliWaSalimAbdanDflex}>
																									{/*<a className="btn btn-floating "><i className="material-icons">attachment</i></a>*/}
																								</div>
																							</div>
																							<div style={allahuYaAllahLaIllah_2}>
																								<div style={mawlayaSaliWaSalimAbdanDflex}>
																									<a className='dropdown-button btn white black-text _pratibha_capitalize_my_text' href='#' data-activates={"dropdownnabi"+b}>Rate</a>
																									<ul id={'dropdownnabi'+b} className='dropdown-content' ref={() => {
																										$('.dropdown-button').dropdown({
																											 inDuration: 300,
																											 outDuration: 225,
																											 constrainWidth: false, // Does not change width of dropdown to that of the activator
																											 hover: false, // Activate on hover
																											 gutter: 50, // Spacing from edge
																											 belowOrigin: true, // Displays dropdown below the button
																											 alignment: 'right', // Displays dropdown with edge aligned to the left of button
																											 stopPropagation: true // Stops event propagation
																										 }
																									 );
																									}}>
																									<li className="divider"></li>
																									<li><a href="#!" className="black-text">-1</a></li>
																									<li className="divider"></li>
																									<li><a href="#!" className="black-text">0</a></li>
																									<li className="divider"></li>
																									<li><a href="#!" className="black-text">1</a></li>
																									<li className="divider"></li>
																									</ul>
																								</div>
																							</div>
																							<div style={allahuYaAllahLaIllah_3}>
																								<div style={mawlayaSaliWaSalimAbdanDflex}>
																									{/*<a className="btn btn-floating "><i className="material-icons">attachment</i></a>*/}
																								</div>
																							</div>
																						</div>
																						<br />
																						<div style={chandSurajSabYaha_habibKhuda}>
																							<CommentBox />
																						</div>
																					</div>
																				</div>
																			</div>
																		)
																	}else {
																		return false;
																	}
																} )
															}
														</div>
													)
												}
											</div>
										)
									}
								}









												const readerSass_sin={width:"100%",display:"flex",justifyContent:"center"};
												//const myReaderFrameStyle={width:"100%",height:"100%"}

												class SinnerLook extends React.Component {
													constructor(props) {
														super(props);
														this.state = {
															spinMe:true,
															sinnerBilla:[],
															myFaceSuggest:[]
														};
														this.componentWillMount=this.componentWillMount.bind(this);
													}
													componentWillMount(){
														var that=this;
														/*$(document).ready(function(){
															$(window).on("bookArive",function(evt,evtInfo){
																console.log(evtInfo)
																let mmBilla=evtInfo.works;
																that.setState({
																	bookBilla:mmBilla,
																	spinMe:false
																})
															})
														})*/


														let mNo=JSON.stringify({me:window.__rasoola.allah[1],PostType:window.__pageType,Pkey:window.__rasoola.allah[4]});
														$.ajax({
															url:`getMyAllRelatedPostBilla?data=${mNo}`,
															type:"GET",
															contentType:"json",
															async:true
														}).done((data)=>{
															console.log(data);
															let updateNeed=data.All;
															let slimdaimanabdan=["face suggestion",window.__rasoola.allah[1]];
															let ranNo=Math.floor((Math.random() * data.length));
															updateNeed.splice(ranNo, 0, slimdaimanabdan);
															let prevUpdate=that.state.sinnerBilla;
															let newArr=updateNeed.concat(prevUpdate);
															that.setState({
																sinnerBilla:newArr,
																spinMe:false
															})
														}).fail((jqXHR,statusText)=>{
															console.log(statusText);
														})

														let mNoA=JSON.stringify({Me:window.__rasoola.allah[1],Pkey:window.__rasoola.allah[4]});
														$.ajax({
															url:`getMyAllRelatedFacesBilla?data=${mNoA}`,
															type:"GET",
															contentType:"json",
															async:true
														}).done((data)=>{
															console.log(data);
															let tempData=data.All;
															that.setState({
																myFaceSuggest:tempData
															})
														}).fail((jqXHR,statusText)=>{
															console.log(statusText);
														})


													}
													render(){
														return (
															<div>
																{
																	this.state.spinMe==true?(
																		<div style={readerSass_sin} >
																			<PreloderCircular />
																		</div>
																	):(
																		<div className="_temp_hundred_percent_style_class_width">
																			{
																				this.state.sinnerBilla.map( (a,b)=>{
																					if (a.length==2) {
																						return (
																							<div key={b} style={fHundredStyle_nabiya_salam}>
																							<div id="fHundredStyle_nabiya_salam_same" style={fHundredStyle_nabiya_salam_same}>
																								{
																									this.state.myFaceSuggest.map( (e,f) => {
																										if (e.length>1) {
																											return (

																												<div style={asalam_alayka_ya_rasool_allah} key={f}>
																												<input type="hidden" value={JSON.stringify(e)} />
																												<div id={f} className="card hoverable" style={indi_frnd_face_cont_tlf_pratibha} >
																													<div className="card-image waves-effect waves-block waves-light">
																														<img className="activator" style={faceWalaBhaiya} src={e[3]} />
																													</div>
																													<div className="card-content">
																														<span className="card-title activator grey-text text-darken-4" style={friends_wala_mehboob_tlf_dot_com} onClick={this._proper_patola_pratibha}>{e[0]}</span>
																														<a style={cust_spanning_tree_bt_sawan} className="dropdown-button btn black-text tooltipped" data-activates={`dropdownholo__ch__${f}`} data-position="bottom" data-delay="50" data-tooltip="Click to take some deep action" ref={()=>{
																															$(document).ready(function(){
																																$('.tooltipped').tooltip({delay: 50});
																															});
																														}} ><i className="small material-icons right">more_vert</i></a>
																														<ul style={uuuullllliiiiii} id={`dropdownholo__ch__${f}`} className='dropdown-content' ref={(elem) => {
																															$('.dropdown-button').dropdown({
																																 inDuration: 300,
																																 outDuration: 225,
																																 constrainWidth: true, // Does not change width of dropdown to that of the activator
																																 hover: false, // Activate on hover
																																 gutter: 200, // Spacing from edge
																																 belowOrigin: false, // Displays dropdown below the button
																																 alignment: 'right', // Displays dropdown with edge aligned to the left of button
																																 stopPropagation: true // Stops event propagation
																															 }
																														 );
																														}}>
																															<li className="divider"></li>
																															<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Ignore</a></li>
																															<li className="divider"></li>
																															<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Blame</a></li>
																															<li className="divider"></li>
																															<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Poke</a></li>
																															<li className="divider"></li>
																														</ul>

																													</div>
																													<div className="card-reveal" style={lala_lala_lala_dil_ne_ye_kaha_pratibha} >

																															<span style={sochNasake} className="card-title grey-text text-darken-4"><i className="material-icons right" onClick={this._clear_currentGuy_pratibha}>close</i></span>
																															<p className="truncate">{e[0]}</p>
																															<p className="truncate">{e[2]}</p>
																															<p className="truncate">Please select the desire face to link</p>
																															<ul>
																																<li>
																																	{/*<form action="#"><p>
																																		<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_soc" defaultChecked="false"  />
																																		<label for="filled-in-box_tlf_link_soc">Social face</label>
																																	</p></form>*/}
																																	<div className="switch" >
																																		<label className="black-text _design_my_font_weight_pratibha">
																																			<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																																			<span className="lever"></span>
																																			Social Face
																																		</label>
																																		<input type="hidden" value="Social Face" />
																																	</div>
																																</li>
																																<li>
																																	{/*
																																		<form action="#">
																																			<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_prof" defaultChecked="false"  />
																																			<label for="filled-in-box_tlf_link_prof">Professional face</label>
																																		</form>
																																		*/}
																																		<div className="switch">
																																			<label className="black-text _design_my_font_weight_pratibha">
																																				<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																																				<span className="lever"></span>
																																				Professional Face
																																			</label>
																																			<input type="hidden" value="Professional Face" />
																																		</div>
																																</li>
																																<li>
																																	<div className="switch">
																																		<label className="black-text _design_my_font_weight_pratibha">
																																			<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																																			<span className="lever"></span>
																																			Consumer Face
																																		</label>
																																		<input type="hidden" value="Consumer Face" />
																																	</div>
																																	{/*
																																		<form action="#">
																																			<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_con" defaultChecked="false"  />
																																			<label for="filled-in-box_tlf_link_con">Consumer face</label>
																																		</form>
																																		*/}
																																</li>
																																<li>
																																	<div className="switch">
																																		<label className="black-text _design_my_font_weight_pratibha">
																																			<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																																			<span className="lever"></span>
																																			Reader Face
																																		</label>
																																		<input type="hidden" value="Reader Face" />
																																	</div>
																																	{/*
																																		<form action="#">
																																			<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_read" defaultChecked="false"  />
																																			<label for="filled-in-box_tlf_link_read">Reader face</label>
																																		</form>
																																		*/}
																																</li>
																																<li>
																																	{/*
																																		<form action="#">
																																			<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_date" defaultChecked="false"  />
																																			<label for="filled-in-box_tlf_link_date">Dater face</label>
																																		</form>
																																		*/}
																																		<div className="switch">
																																			<label className="black-text _design_my_font_weight_pratibha">
																																				<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																																				<span className="lever"></span>
																																				Dater Face
																																			</label>
																																			<input type="hidden" value="Dater Face" />
																																		</div>
																																</li>
																																<li>
																																{/*
																																	<form action="#">
																																		<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_donate" defaultChecked="false" />
																																		<label for="filled-in-box_tlf_link_donate">Donator face</label>
																																	</form>
																																	*/}
																																	<div className="switch">
																																		<label className="black-text _design_my_font_weight_pratibha">
																																			<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																																			<span className="lever"></span>
																																			Donator Face
																																		</label>
																																		<input type="hidden" value="Donator Face" />
																																	</div>
																																</li>
																																<li>
																																	{/*
																																		<form action="#">
																																			<input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_sin" defaultChecked="false"  />
																																			<label for="filled-in-box_tlf_link_sin">Sinner face</label>
																																		</form>
																																		*/}
																																	<div className="switch">
																																		<label className="black-text _design_my_font_weight_pratibha">
																																			<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																																			<span className="lever"></span>
																																			Sinner Face
																																		</label>
																																		<input type="hidden" value="Sinner Face" />
																																	</div>
																																</li>
																															</ul>
																															<br />
																															<div style={link_my_different_face_pratibha_please}>
																																<input type="button" value="Link face" style={newPlaylistBtStylePratibhaLinkMyFace} className="dropdown-button btn" onClick={this._link_my_selected_face_pratibha_please} />
																															</div>
																													</div>
																												</div>
																												</div>
																											)
																										}else {
																											return false
																										}
																									} )
																								}
																							</div>
																							</div>

																						)
																					}else if (a.length==9) {
																						return (
																							<div className="card hoverable" key={b} >
																								<div className="card-image">
																									<img style={zoomInCursorZaanPeBane} src={a[2]} ref={() => {
																										{/*}$(document).ready(function(){
																											$('.materialboxed').materialbox();
																											//onClick={this._checking_for_img_click}
																										});*/}
																									}} onClick={this._checking_for_img_click} />
																								</div>
																								<div className="card-content">
																									<span className="card-title activator grey-text text-darken-4 " onClick={this._hacking_into_material}  >{a[0]}</span><a style={cust_spanning_tree_bt} className="dropdown-button btn black-text tooltipped" data-activates={`dropdownAA${b}`} data-position="bottom" data-delay="50" data-tooltip="Click to take some deep action" ref={()=>{
																										$(document).ready(function(){
																											$('.tooltipped').tooltip({delay: 50});
																										});
																									}} ><i className="large material-icons right">more_vert</i></a>
																									<ul style={uuuullllliiiiii} id={`dropdownAA${b}`} className='dropdown-content' ref={() => {
																										$('.dropdown-button').dropdown({
																											 inDuration: 300,
																											 outDuration: 225,
																											 constrainWidth: true, // Does not change width of dropdown to that of the activator
																											 hover: false, // Activate on hover
																											 gutter: 50, // Spacing from edge
																											 belowOrigin: true, // Displays dropdown below the button
																											 alignment: 'right', // Displays dropdown with edge aligned to the left of button
																											 stopPropagation: true // Stops event propagation
																										 }
																									 );
																									}}>
																										<li className="divider"></li>
																										<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Ignore</a></li>
																										<li className="divider"></li>
																										<li><a style={myUniqueFaceSelectStyle_child_where_we_are} href="#!">Blame</a></li>
																										<li className="divider"></li>
																										<li><a style={myUniqueFaceSelectStyle_child_where_we_are} href="#!">Share</a></li>
																										<li className="divider"></li>

																									</ul>
																									<div id={`modal${b}`} className="modal bottom-sheet" ref={()=>{
																										$(document).ready(function(){
																								// the "href" attribute of the modal trigger must specify the modal ID that wants to be triggered
																								$('.modal').modal();
																							});
																									}}>
																										<div className="modal-content">
																											<h4>Modal Header</h4>
																											<p>A bunch of text</p>
																										</div>
																										<div className="modal-footer">
																											<a href="#!" className="modal-action modal-close waves-effect waves-green btn-flat">Agree</a>
																										</div>
																									</div>
																									<p>{
																										timeConverterOf(parseInt(a[3]))
																									}</p>
																									<p className="truncate" dangerouslySetInnerHTML={createMarkup(a[4])}></p>
																									<br />
																									<p>Average rating</p>
																								</div>
																								<div className="card-reveal">
																									<div className="its_ok_shreya_i_am_alright_ok main_agar_samne" style={abToEkPalKiDuriSahiJayeNa}>
																										<span className="">{a[0]}</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>{timeConverter(parseInt(a[3]))}</span><span style={sochNasake} className="card-title grey-text text-darken-4"><i className="material-icons right">close</i></span>

																										<div style={dangerousStyleDiv} dangerouslySetInnerHTML={createMarkup(a[4])}></div>
																										<br />
																										<div style={fatherPeterDayal}>
																											<div style={chandSurajSabYaha}>
																												<img src={a[2]} style={chandSurajSabYaha_image} />
																											</div>
																										</div>
																										<br />
																										<div style={asalamuAlaykaYaRasoolAllahYaNabi}>
																											<div style={allahuYaAllahLaIllah_1}>
																												<div style={mawlayaSaliWaSalimAbdanDflex}>
																													{/*<a className="btn btn-floating "><i className="material-icons">attachment</i></a>*/}
																												</div>
																											</div>
																											<div style={allahuYaAllahLaIllah_2}>
																												<div style={mawlayaSaliWaSalimAbdanDflex}>
																													<a className='dropdown-button btn white black-text _pratibha_capitalize_my_text' href='#' data-activates={"dropdownnabi"+b}>Rate</a>
																													<ul id={'dropdownnabi'+b} className='dropdown-content' ref={() => {
																														$('.dropdown-button').dropdown({
																															 inDuration: 300,
																															 outDuration: 225,
																															 constrainWidth: false, // Does not change width of dropdown to that of the activator
																															 hover: false, // Activate on hover
																															 gutter: 50, // Spacing from edge
																															 belowOrigin: true, // Displays dropdown below the button
																															 alignment: 'right', // Displays dropdown with edge aligned to the left of button
																															 stopPropagation: true // Stops event propagation
																														 }
																													 );
																													}}>
																													<li className="divider"></li>
																													<li><a href="#!" className="black-text">-1</a></li>
																													<li className="divider"></li>
																													<li><a href="#!" className="black-text">0</a></li>
																													<li className="divider"></li>
																													<li><a href="#!" className="black-text">1</a></li>
																													<li className="divider"></li>
																													</ul>
																												</div>
																											</div>
																											<div style={allahuYaAllahLaIllah_3}>
																												<div style={mawlayaSaliWaSalimAbdanDflex}>
																													{/*<a className="btn btn-floating "><i className="material-icons">attachment</i></a>*/}
																												</div>
																											</div>
																										</div>
																										<br />
																										<div style={chandSurajSabYaha_habibKhuda}>
																											<CommentBox />
																										</div>
																									</div>
																								</div>
																							</div>
																						)
																					}else {
																						return false
																					}
																				} )
																			}
																		</div>
																	)
																}
															</div>
														)
													}
												}











//Amazon reviews


const postBoxMainStyle_comment_amazon={width:"100%",height:"100%"};
const texta_cnt_comment_amazon={width:"100%",height:"50%",overflowY:"scroll"};
const texta_after_cnt_comment_amazon={width:"100%",height:"50%"};
const texta_act_style_comment_amazon={width:"99.7%",height:"98.5%",border:"1px solid #e6ecf0",textIndent:"10px",fontSize:"18px",cursor:"auto"};
const dflex_bt_style_comment_amazon={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
//const bt_nabi_rasoola_c={width:"5em",height:"50%",backgroundColor:"transparent",border:"1px solid #e6ecf0",marginRight:"2%",cursor:"pointer"};
const bt_nabi_rasoola_billa_comment_amazon={width:"3em",height:"50%",backgroundColor:"transparent",marginLeft:"0%"};
const bt_nabi_rasoola_nabi_comment_amazon={width:"68%",height:"50%",backgroundColor:"white",border:"none"};
const mawlaya_sali_wa_salim_comment_amazon={width:"10%",height:"48%",backgroundColor:"transparent"};
const khulli_hi_mi_comment_comment_amazon={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"};
const khulli_hi_mi_rabbi_comment_amazon={width:"100%",height:"100%",display:"flex",justifyContent:"flex-start",alignItems:"center"};
//const iman_abdan={border:"1px solid #e6ecf0",cursor:"pointer"}
class CommentBoxAmazon extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			totalChar:256,
			typed:0,
			textaVal:"",
			allahGuide:""
		};
		this._mm_texta_change=this._mm_texta_change.bind(this);
		this._mm_i_believe_you=this._mm_i_believe_you.bind(this);
		this._mm_barak_allah=this._mm_barak_allah.bind(this);
		this.componentWillMount=this.componentWillMount.bind(this);
		this._thinking_about_you=this._thinking_about_you.bind(this);
		this._thinking_about_you_fuck=this._thinking_about_you_fuck.bind(this);
	}
	_thinking_about_you_fuck(evt){
		evt.preventDefault();
		evt.stopPropagation();
		if (evt.target.textContent.length==0) {
			evt.target.textContent="Wana give feedback for this product ??";
		}
	}
	_thinking_about_you(evt){
		evt.preventDefault();
		evt.stopPropagation();
		if (evt.target.textContent=="Wana give feedback for this product ??") {
			evt.target.textContent="";
		}
		//evt.target.textContent="";
	}
	componentDidMount(){
		window.__current_charecter_position_comment=this.state.typed;
		//HTMLCollection.prototype[Symbol.iterator] = Array.prototype.values;
		var mmmuuuuu=document.getElementsByClassName('_moniterable_outside_comment_amazon');
		for (var i=0; i< mmmuuuuu.length; i++) {
			mmmuuuuu[i].textContent="Wana give feedback for this product ??"
		}
		//document.getElementById('_moniterable_outside_comment').textContent="Share your mind stuffs..";
	}
	_mm_radhitu_billahi(evt){
		//ReactDOM.unmountComponentAtNode(document.getElementById('wa_bil_islami_midina'))
		//ReactDOM.render(<EmojiForPost />,document.getElementById('wa_bil_islami_midina'))
		if (document.getElementById('wa_bil_islami_midina_comment_amazon').children[0]==undefined) {
			ReactDOM.render(<EmojiForPost />,document.getElementById('wa_bil_islami_midina_comment_amazon'))
		}else {
			ReactDOM.unmountComponentAtNode(document.getElementById('wa_bil_islami_midina_comment_amazon'))
		}
	}
	_mm_barak_allah(evt){
		evt.preventDefault();
		evt.stopPropagation();
		let who=window.__rasoola.allah[1];
		/*let sammi_meri_waar=document.getElementById('_moniterable_outside_comment').innerHTML;
		//console.log(sammi_meri_waar);
		let bt=btoa(sammi_meri_waar);
		let tb=atob(bt)
		console.log(bt);
		console.log(tb);
		let hulakumwalana=sessionStorage.postMap==undefined?"":JSON.parse(sessionStorage.postMap).vax;
		let khaiyr={content:sammi_meri_waar,who:who,attachment:hulakumwalana,when:`${Date.now()}`}
		console.log(khaiyr);
		Rx.Observable.ajax.post('/saveMyPostWithAttachment',JSON.stringify(khaiyr),{responseType: 'json',contentType:'json'}).map(data=>data.response.All)
		.subscribe(
		function (data) {
			console.log(data);


		},
	function (error) {
			console.log(error);
		}
	);*/
	}
	_mm_i_believe_you(evt){
		evt.preventDefault();
		evt.stopPropagation();
		ReactDOM.unmountComponentAtNode(document.getElementById('_js_root_animation'));
		ReactDOM.render(<AttachWithCommentPopup />,document.getElementById('_js_root_animation'))
	}
	_mm_texta_change(evt){
		evt.preventDefault();
		evt.stopPropagation();
		var that=this;
		/*if (window.__current_charecter_position <256) {
			let vl=evt.target.textContent;
				that.setState({
					typed:window.__current_charecter_position+1
				})
		}else {
			let vaxc=document.getElementById('_moniterable_outside').innerHTML.pop();
		}*/
		/*let vl=evt.target.textContent;
		//alert(vl.length)

		if(vl.length<=256){
			this.setState({
				textaVal:vl,
				typed:vl.length
			})
		}else {
			this.setState({
				textaVal:this.state.textaVal,
				typed:this.state.textaVal.length
			})
		}*/
	}
	componentWillMount(){
		var that=this;
		window.addEventListener("insertEmoji_comment",(evt) => {
			that.setState({
				typed:that.state.typed+1
			})
		},true)
	}
	render(){
		return (
			<div style={postBoxMainStyle_comment_amazon} id="_ni_azur_mustafa_allah_comment_amazon">
				<div className="_moniterable_outside_baap_comment_amazon" style={texta_cnt_comment_amazon}>
					{/*<textarea style={texta_act_style} placeholder="share your mind stuff" value={this.state.textaVal} onChange={this._mm_texta_change}></textarea>*/}
					<div className="z-depth-5 _moniterable_outside_comment_amazon" contentEditable={"true"} style={texta_act_style_comment_amazon} onInput={this._mm_texta_change} onFocus={this._thinking_about_you} onBlur={this._thinking_about_you_fuck}></div>
				</div>
				<div style={texta_after_cnt_comment_amazon}>
					<div style={postBoxMainStyle_comment_amazon}>
						<div style={dflex_bt_style_comment_amazon}>
							{/*<input type="button" style={bt_nabi_rasoola} value="share" onClick={this._mm_barak_allah} />*/}
							<a id="_mohhamadun_saiyidul_walkhari_comment_amazon" className="btn btn-floating "><i className="material-icons">publish</i></a>
							<div id="_mohhamadun_saiyidul_walkhari_1_comment_amazon" style={bt_nabi_rasoola_billa_comment_amazon}>
								<div style={khulli_hi_mi_comment_comment_amazon}>
									<div onClick={this._mm_i_believe_you}>
										<a className="btn btn-floating "><i className="material-icons">attachment</i></a>
									</div>
								</div>
							</div>
							<div id="_mohhamadun_saiyidul_walkhari_2_comment_amazon" style={mawlaya_sali_wa_salim_comment_amazon}>
								<div style={khulli_hi_mi_rabbi_comment_amazon}>
									<div onClick={this._mm_radhitu_billahi}>
										<a className="btn btn-floating "><i className="material-icons">accessibility</i></a>
									</div>
								</div>
							</div>
							<input type="button"  style={bt_nabi_rasoola_nabi_comment_amazon} disabled="true" />
							{/*<input type="button" style={bt_nabi_rasoola_billa} value="attachment" onClick={this._mm_i_believe_you} />*/}


						</div>
					</div>
				</div>
				<div id="wa_bil_islami_midina_comment_amazon">
				</div>
			</div>
		)
	}
}



		class CreateIframeReviewes extends React.Component {
			constructor(props) {
				super(props);
				this.state = {
					url:this.props.Url,
					message:""
				}
				this._close_my_popup=this._close_my_popup.bind(this);
				this.componentWillMount=this.componentWillMount.bind(this);
				this.componentWillUnmount=this.componentWillUnmount.bind(this);
				this._wabil_islamidina=this._wabil_islamidina.bind(this);
			}
			_wabil_islamidina(evt){
				Materialize.toast('Readonly reviews cannot be edited instead you can provide your review here ', 4000)
				ReactDOM.unmountComponentAtNode(document.getElementById('_js_root_animation'))
			}
			_close_my_popup(evt){
				evt.preventDefault();
				evt.stopPropagation();
				ReactDOM.unmountComponentAtNode(document.getElementById('_js_root_animation'))
			}
			componentWillMount(){
				var events = new CustomEvent(
					"opacity",
					{
						detail: {
							message: 0.2,
							time: new Date(),
					},
					bubbles: true,
					cancelable: true
				}
			 );
			 window.dispatchEvent(events);
			}
			componentWillUnmount(){
				var events = new CustomEvent(
					"opacity",
					{
						detail: {
							message: 1,
							time: new Date(),
					},
					bubbles: true,
					cancelable: true
				}
			 );
			 window.dispatchEvent(events);
			}
			render(){
				return (
					<div style={myImagePopupOwnStyle} >
						<div style={sajaDoYeKeshuMujheBajuoMeChhupaLo_cutter}>
							<div style={myImageSidhaSadhaBhola}>
								<span style={whiteSpanningCustomColor} onClick={this._close_my_popup}><i className="large material-icons right">close</i></span>
							</div>
						</div>
						<div style={sajaDoYeKeshuMujheBajuoMeChhupaLo_nflex}>
							<div style={myImageSidhaSadhaBhola_thikana}>
								<div style={iframe_papa_ji} >
									<iframe style={iframe_papa_ji_iframe} src={this.state.url} sandbox="allow-scripts allow-same-origin" onClick={this._wabil_islamidina} ></iframe>
								</div>
							</div>
						</div>
					</div>
				)
			}
		}

		class CreateCrousel extends React.Component {
			constructor(props) {
				super(props);
				this.state = {
					mapper:this.props.Mapper
				}
				this.componentWillReceiveProps=this.componentWillReceiveProps.bind(this);
			}
			componentWillReceiveProps(newProps){
				this.setState({
					mapper:newProps.Mapper
				})
			}
			componentDidMount(){
				$('.carousel').carousel();
			}
			render(){
				return (
					<div className="carousel">
						{
							this.state.mapper.map( (a,b)=>{
								return (
									<a key={b} className="carousel-item" href={`#${b}!`}><img src={a} className="hoho_llll_ppp_pratibha" /></a>
								)
							} )
						}
					</div>
				)
			}
		}


		//proceed payment screen



		const billo_ni_tera_lal_ghaghra_payment=Object.freeze({width:"100%",height:"1200px",zIndex:"15",position:"absolute",backgroundColor:"white",margintop:"100px"});
		const _main_payment_head_shop=Object.freeze({width:"100%",height:"80px",marginBottom:"10px"});
		const _main_payment_body_shop=Object.freeze({width:"100%",height:"1105px"});
		const _tere_mathe_ke_kum_kum_ko_1_as_h_payment=Object.freeze({width:"20%",height:"100%",display:"inline",float:"left"});
		const _tere_mathe_ke_kum_kum_ko_2_as_h_payment=Object.freeze({width:"59%",height:"100%",display:"inline",float:"left"});
		const _tere_mathe_ke_kum_kum_ko_3_as_h_payment=Object.freeze({width:"20%",height:"100%",display:"inline",float:"left"});
		const _hehe_hoho_gazab_ka_swag_payment=Object.freeze({width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"});
		const _hehe_hoho_gazab_ka_swag_right_payment=Object.freeze({width:"100%",height:"100%",display:"flex",justifyContent:"flex-end",alignItems:"center"});
		const _tere_mathe_ke_kum_kum_ko_1_payment=Object.freeze({width:"30%",height:"100%",display:"inline",float:"left"});
		const _tere_mathe_ke_kum_kum_ko_2_payment=Object.freeze({width:"39%",height:"100%",display:"inline",float:"left"});
		const _tere_mathe_ke_kum_kum_ko_3_payment=Object.freeze({width:"30%",height:"100%",display:"inline",float:"left"});
		const _hehe_ho_card_expiry_check={width:"100%",height:"60px"};
		const _hehe_ho_card_expiry_check_1={width:"50%",height:"100%",display:"inline",float:"left"};
		const _hehe_ho_card_expiry_check_2={width:"50%",height:"100%",display:"inline",float:"right"};
		const tempDisFlxCardExp={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center"}


		class PaymentShop extends React.Component {
			constructor(props){
				super(props);
				this.state = {
					myPaymentModeMessage:"thelinkedface payment system",
					g_card_no:"",
					support_msg:"* please note currently we only support credit card payments",
					g_card_cvv:"",
					_myOtpTemp:"",
					g_card_otp:"",
					g_card_amount:this.props.TotalAmount,
					g_card_valid_from:"",
					g_card_valid_upto:"",
					g_card_f_name:"",
					g_card_l_name:"",
					g_card_card_type:"",
					g_card_inr_usd:0.00,
					isMountedMonitor:false,
					itmeQuant:this.props.ItemQuantity,
					itemId:this.props.ItemId,
					itQSeperator:this.props.ItQSeperator
				};
				this._my_card_g_no=this._my_card_g_no.bind(this);
				this.componentDidMount=this.componentDidMount.bind(this);
				this._my_card_g_cvv=this._my_card_g_cvv.bind(this);
				this._let_me_close_my_payment=this._let_me_close_my_payment.bind(this);
				this._my_card_g_otp=this._my_card_g_otp.bind(this);
				this._proceed_to_pay=this._proceed_to_pay.bind(this);
				this._start_to_pay_the_amount_pratibha=this._start_to_pay_the_amount_pratibha.bind(this);
				this._valid_upto_month_record=this._valid_upto_month_record.bind(this);
				this._valid_upto_year_record=this._valid_upto_year_record.bind(this);
				this._my_card_g_f_name=this._my_card_g_f_name.bind(this);
				this._my_card_g_l_name=this._my_card_g_l_name.bind(this);
				this.componentWillMount=this.componentWillMount.bind(this);
			}
			componentWillMount(){
				var that=this;
				$.ajax({
					url:"https://api.fixer.io/latest?base=INR&symbols=USD",
					type:"GET",
					contentType:"json",
					async:true
				}).done((data)=>{
					console.log(data);
					if (that.state.isMountedMonitor&&data!=undefined) {
						let drt=data.rates.USD
						that.setState({
							g_card_inr_usd:drt
						})
						drt=undefined
					}
				}).fail((jqXHR,statusText)=>{
					console.log(statusText);
				})
			}
			_my_card_g_l_name(evt){
				evt.preventDefault();
				evt.stopPropagation();
				let tarText=evt.target.value;
				this.setState({
					g_card_l_name:tarText
				})
			}
			_my_card_g_f_name(evt){
				evt.preventDefault();
				evt.stopPropagation();
				let tarText=evt.target.value;
				this.setState({
					g_card_f_name:tarText
				})
			}
			_valid_upto_year_record(evt){
				evt.preventDefault();
				evt.stopPropagation();
				let tarText=evt.currentTarget.lastChild.innerText.toString();
				this.setState({
					g_card_valid_upto:tarText
				})
			}
			_valid_upto_month_record(evt){
				evt.preventDefault();
				evt.stopPropagation();
				let tarText=evt.currentTarget.lastChild.innerText.toString();
				this.setState({
					g_card_valid_from:tarText
				})
			}
			_start_to_pay_the_amount_pratibha(evt){
				evt.preventDefault();
				evt.stopPropagation();
				var that=this;
				let dSand=JSON.stringify({Me:window.__rasoola.allah[1],Pkey:window.__rasoola.allah[4],CardNo:that.state.g_card_no,CVV:that.state.g_card_cvv,ValidMonth:that.state.g_card_valid_from,ValidYear:that.state.g_card_valid_upto,Money:(that.state.g_card_amount*that.state.g_card_inr_usd).toFixed(2),FirstName:that.state.g_card_f_name,LastName:that.state.g_card_l_name,CardType:that.state.g_card_card_type,ItemId:that.state.itemId,ItemQuantity:`${that.state.itmeQuant} ${that.state.itQSeperator}`})
				$.ajax({
					url:`recieveMyPaymentPratibhaPleaseYouAreOnlyHopeOfMine?data=${dSand}`,
					type:"GET",
					contentType:"json",
					async:true
				}).done((data)=>{
					console.log(data);
					Materialize.toast(`${data.HttpText} - go to My Cart for more details`, 4000)
					ReactDOM.unmountComponentAtNode(document.getElementById('_js_root_animation'))
					var event = new CustomEvent(
						"_update_main_item_container_pratibha",
						{
							detail: {
								message: "hi",
								time: new Date(),
							},
							bubbles: true,
							cancelable: true
						}
					);
					window.dispatchEvent(event);
				}).fail((jqXHR,statusText)=>{
					console.log(statusText);
				})
			}
			_proceed_to_pay(evt){
				evt.preventDefault();
				evt.stopPropagation();
				alert("to do ajax")
			}
			_my_card_g_otp(evt){
				evt.preventDefault();
				evt.stopPropagation();
				this.setState({
						g_card_otp:evt.target.value
					})
			}
			_let_me_close_my_payment(evt){
				evt.preventDefault();
				evt.stopPropagation();
				ReactDOM.unmountComponentAtNode(document.getElementById('_js_root_animation'))
			}
			_my_card_g_cvv(evt){
				evt.preventDefault();
				evt.stopPropagation();
				this.setState({
						g_card_cvv:evt.target.value
					})
			}
			componentDidMount(){
				this.setState({
					isMountedMonitor:true
				})
				var that=this;
				  $('.dropdown-button').dropdown({
      					inDuration: 300,
      					outDuration: 225,
      					constrainWidth: false, // Does not change width of dropdown to that of the activator
      					hover: false, // Activate on hover
      					gutter: 0, // Spacing from edge
      					belowOrigin: false, // Displays dropdown below the button
      					alignment: 'left', // Displays dropdown with edge aligned to the left of button
      					stopPropagation: false // Stops event propagation
    					}
  				  );

						$('input#autocomplete-input_r_card_type_credit').autocomplete({
					    data: {
					      "visa": null,
					      "master": null,
								"mastero":null
					    },
					    limit: 10, // The max amount of results that can be shown at once. Default: Infinity.
					    onAutocomplete: function(val) {
								that.setState({
									g_card_card_type:val
								})
					    },
					    minLength: 0, // The minimum length of the input for the autocomplete to start. Default: 1.
					  });


			}
			_my_card_g_no(evt){
				evt.preventDefault();
				evt.stopPropagation();
				this.setState({
						g_card_no:evt.target.value
					})
			}
			render(){
				return (
					<div style={billo_ni_tera_lal_ghaghra_payment}>
						<div style={_main_payment_head_shop}>
							<div style={_tere_mathe_ke_kum_kum_ko_1_as_h_payment}>
							</div>
							<div style={_tere_mathe_ke_kum_kum_ko_2_as_h_payment}>
								<div style={_hehe_hoho_gazab_ka_swag_payment}>
									<p className="truncate">{
										this.state.myPaymentModeMessage
									}</p>
								</div>
							</div>
							<div style={_tere_mathe_ke_kum_kum_ko_3_as_h_payment}>
								<div style={_hehe_hoho_gazab_ka_swag_right_payment}>
									<i className="material-icons small _design_my_cursor_pratibha" onClick={this._let_me_close_my_payment}>close</i>
								</div>
							</div>
						</div>
						<div style={_main_payment_body_shop}>
							<div style={_tere_mathe_ke_kum_kum_ko_1_payment}>
							</div>
							<div style={_tere_mathe_ke_kum_kum_ko_2_payment}>
								<p className="truncate">{this.state.support_msg}</p>
								<div className="row">
    									<div className="input-field">
										<i className="material-icons prefix">attach_money</i>
      										<input id="g_card_amount_total" type="text" className="validate" disabled={true} />
      										<label for="g_card_amount_total">{`Total amount payable - ${this.state.g_card_amount} (INR)`}</label>
    									</div>
  								</div>
									<div className="row">
	    									<div className="input-field">
											<i className="material-icons prefix">attach_money</i>
	      										<input id="g_card_amount_total_usd" type="text" className="validate" disabled={true} />
	      										<label for="g_card_amount_total_usd">{`Total amount payable - ${this.state.g_card_amount*this.state.g_card_inr_usd} (USD)`}</label>
	    									</div>
	  								</div>
								<div className="row">
    									<div className="input-field">
										<i className="material-icons prefix">credit_card</i>
      										<input id="g_card_no" type="text" className="validate" value={this.state.g_card_no} onChange={this._my_card_g_no} />
      										<label for="g_card_no">Enter card no</label>
    									</div>
  								</div>
									<div className="row">
										<div className="input-field">
											<i className="material-icons prefix">local_shipping</i>
											<input type="text" id="autocomplete-input_r_card_type_credit" className="autocomplete" />
											<label for="autocomplete-input_r_card_type_credit">Card type</label>
										</div>
	  								</div>
									<div className="row">
	    									<div className="input-field">
											<i className="material-icons prefix">credit_card</i>
	      										<input id="g_card_f_name" type="text" className="validate" value={this.state.g_card_f_name} onChange={this._my_card_g_f_name} />
	      										<label for="g_card_f_name">First name on card</label>
	    									</div>
	  								</div>
										<div className="row">
		    									<div className="input-field">
												<i className="material-icons prefix">credit_card</i>
		      										<input id="g_card_l_name" type="text" className="validate" value={this.state.g_card_l_name} onChange={this._my_card_g_l_name} />
		      										<label for="g_card_l_name">Last name on card</label>
		    									</div>
		  								</div>
								<div style={_hehe_ho_card_expiry_check}>
									<div style={_hehe_ho_card_expiry_check_1}>
										<div style={tempDisFlxCardExp}>
											 <a className='dropdown-button btn white black-text destroy_originat_font_adjustment _pratibha_capitalize_my_text' href='#' data-activates='dropdown_card_exp_month'>Valid upto month</a>
  											<ul id='dropdown_card_exp_month' className='dropdown-content'>
													<li className="divider"></li>
  												<li onClick={this._valid_upto_month_record}><a href="#!">01</a></li>
													<li className="divider"></li>
  												<li onClick={this._valid_upto_month_record}><a href="#!">02</a></li>
  												<li className="divider"></li>
													<li onClick={this._valid_upto_month_record}><a href="#!">03</a></li>
  												<li className="divider"></li>
													<li onClick={this._valid_upto_month_record}><a href="#!">04</a></li>
  												<li className="divider"></li>
													<li onClick={this._valid_upto_month_record}><a href="#!">05</a></li>
  												<li className="divider"></li>
													<li onClick={this._valid_upto_month_record}><a href="#!">06</a></li>
  												<li className="divider"></li>
													<li onClick={this._valid_upto_month_record}><a href="#!">07</a></li>
  												<li className="divider"></li>
													<li onClick={this._valid_upto_month_record}><a href="#!">08</a></li>
  												<li className="divider"></li>
													<li onClick={this._valid_upto_month_record}><a href="#!">09</a></li>
  												<li className="divider"></li>
													<li onClick={this._valid_upto_month_record}><a href="#!">10</a></li>
  												<li className="divider"></li>
													<li onClick={this._valid_upto_month_record}><a href="#!">11</a></li>
  												<li className="divider"></li>
													<li onClick={this._valid_upto_month_record}><a href="#!">12</a></li>
  												<li className="divider"></li>
  											</ul>
										</div>
									</div>
									<div style={_hehe_ho_card_expiry_check_2}>
										<div style={tempDisFlxCardExp}>
											<a className='dropdown-button btn white black-text destroy_originat_font_adjustment _pratibha_capitalize_my_text' href='#' data-activates='dropdown_card_exp_year'>Valid upto year</a>
  											 <ul id='dropdown_card_exp_year' className='dropdown-content'>
														<li className="divider"></li>
    												<li onClick={this._valid_upto_year_record}><a href="#!">2018</a></li>
														<li className="divider"></li>
    												<li onClick={this._valid_upto_year_record}><a href="#!">2019</a></li>
    												<li className="divider"></li>
														<li onClick={this._valid_upto_year_record}><a href="#!">2020</a></li>
    												<li className="divider"></li>
														<li onClick={this._valid_upto_year_record}><a href="#!">2021</a></li>
    												<li className="divider"></li>
														<li onClick={this._valid_upto_year_record}><a href="#!">2022</a></li>
    												<li className="divider"></li>
														<li onClick={this._valid_upto_year_record}><a href="#!">2023</a></li>
    												<li className="divider"></li>
														<li onClick={this._valid_upto_year_record}><a href="#!">2024</a></li>
    												<li className="divider"></li>
														<li onClick={this._valid_upto_year_record}><a href="#!">2025</a></li>
    												<li className="divider"></li>
														<li onClick={this._valid_upto_year_record}><a href="#!">2026</a></li>
    												<li className="divider"></li>
														<li onClick={this._valid_upto_year_record}><a href="#!">2027</a></li>
    												<li className="divider"></li>
														<li onClick={this._valid_upto_year_record}><a href="#!">2028</a></li>
    												<li className="divider"></li>
														<li onClick={this._valid_upto_year_record}><a href="#!">2029</a></li>
    												<li className="divider"></li>
  											  </ul>
										</div>
									</div>

								</div>



								{
									(this.state.g_card_valid_from != "" || this.state.g_card_valid_upto != "")?(
										<div style={_hehe_ho_card_expiry_check}>
											<div style={_hehe_ho_card_expiry_check_1}>
												<div style={tempDisFlxCardExp}>
													<p>{this.state.g_card_valid_from}</p>
												</div>
											</div>
											<div style={_hehe_ho_card_expiry_check_2}>
												<div style={tempDisFlxCardExp}>
													<p>{this.state.g_card_valid_upto}</p>
												</div>
											</div>

										</div>
									):false
								}


								<div className="row">
    									<div className="input-field">
										<i className="material-icons prefix">info</i>
      										<input id="g_card_cvv" type="text" className="validate" value={this.state.g_card_cvv} onChange={this._my_card_g_cvv} />
      										<label for="g_card_cvv">Enter cvv</label>
    									</div>
  								</div>
								<div style={_hehe_ho_card_expiry_check}>
									<div style={tempDisFlxCardExp}>
										<a className="waves-effect waves-light btn destroy_originat_font_adjustment white black-text _pratibha_capitalize_my_text" onClick={this._start_to_pay_the_amount_pratibha}>Initiate payment</a>
									</div>
								</div>
								{
									(this.state._myOtpTemp!="")?(
										<div>
											<div className="input-field">
												<i className="material-icons prefix">info</i>
      												<input id="g_card_otp" type="text" className="validate" value={this.state.g_card_otp} onChange={this._my_card_g_otp} />
      												<label for="g_card_otp">Enter otp</label>
    											</div>
											<div style={_hehe_ho_card_expiry_check}>
												<div style={tempDisFlxCardExp}>
													<a className="waves-effect waves-light btn white black-text" onClick={this._proceed_to_pay}>Pay</a>
												</div>
											</div>
										</div>
									):false
								}
							</div>

							<div style={_tere_mathe_ke_kum_kum_ko_3_payment}>
							</div>
						</div>
					</div>
				)
			}
		}



		//end proceed payment screen


		// buy now screen

		const billo_ni_tera_lal_ghaghra_mediator=Object.freeze({width:"100%",height:"1200px",zIndex:"15",position:"absolute",backgroundColor:"white"});

		class BuyNowMediator extends React.Component {
			constructor(props) {
				super(props);
				this.state = {
					myPaymentModeMessage:"Hey there welcome to the item buy system",
					__it_type:this.props.ItType,
					__it_price:this.props.ItPrice,
					__it_pay_method:this.props.ItPayMethod,
					__it_display_text:"",
					__it_quantity:0,
					__it_tot_price:0,
					__it_id:this.props.ItemId,
					__it_q_sep:""
				}
				this._let_me_close_my_payment=this._let_me_close_my_payment.bind(this);
				this.componentDidMount=this.componentDidMount.bind(this);
				this._Change_it_pay_dis_text=this._Change_it_pay_dis_text.bind(this);
			}
			_Change_it_pay_dis_text(evt){
				evt.preventDefault();
				evt.stopPropagation();
				console.log(evt.currentTarget);
				let tarText=evt.currentTarget.lastChild.innerText.toString();
				console.log(tarText);
				switch (tarText) {
					case "credit/debit card":
						ReactDOM.unmountComponentAtNode(document.getElementById('_js_root_animation'))
						ReactDOM.render(<PaymentShop TotalAmount={this.state.__it_tot_price} ItemQuantity={this.state.__it_quantity} ItemId={this.state.__it_id} ItQSeperator={this.state.__it_q_sep} />,document.getElementById('_js_root_animation'))
						break;
					case "cash on delivery":

						break;
					default:
						Materialize.toast(`payment method '${tarText}' is not implemented yet and will be implemented soon`, 4000)
						break;
				}
			}
			componentDidMount(){
				var that=this;
				$('.dropdown-button').dropdown({
						inDuration: 300,
						outDuration: 225,
						constrainWidth: false, // Does not change width of dropdown to that of the activator
						hover: false, // Activate on hover
						gutter: 0, // Spacing from edge
						belowOrigin: false, // Displays dropdown below the button
						alignment: 'left', // Displays dropdown with edge aligned to the left of button
						stopPropagation: true // Stops event propagation
					}
				);


				if (this.state.__it_type=="Weighable") {
					$('input#autocomplete-input_r_it_qt').autocomplete({
				    data: {
				      "1 Kg": null,
				      "2 Kg": null,
							"3 Kg": null,
				      "4 Kg": null,
							"5 Kg": null,
				      "6 Kg": null,
							"7 Kg": null,
				      "8 Kg": null,
							"9 Kg": null,
				      "10 Kg": null,
							"15 Kg": null,
				      "20 Kg": null,
							"25 Kg": null,
				      "30 Kg": null,
							"35 Kg": null,
				      "40 Kg": null,
							"45 Kg": null,
				      "50 Kg": null,
							"55 Kg": null,
				      "60 Kg": null,
							"65 Kg": null,
				      "70 Kg": null,
							"75 Kg": null,
				      "80 Kg": null,
							"85 Kg": null,
				      "90 Kg": null,
							"95 Kg": null,
				      "100 Kg": null,
				    },
				    limit: 10, // The max amount of results that can be shown at once. Default: Infinity.
				    onAutocomplete: function(val) {
								that.setState({
									__it_quantity:parseInt(val.split(' ')[0]),
									__it_tot_price:parseInt(val.split(' ')[0])*that.state.__it_price,
									__it_q_sep:val.split(' ')[1]
								})

				    },
				    minLength: 0, // The minimum length of the input for the autocomplete to start. Default: 1.
				  });
				} else {
					$('input#autocomplete-input_r_it_qt').autocomplete({
				    data: {
				      "1 Ps": null,
				      "2 Ps": null,
							"3 Ps": null,
				      "4 Ps": null,
							"5 Ps": null,
				      "6 Ps": null,
							"7 Ps": null,
				      "8 Ps": null,
							"9 Ps": null,
				      "10 Ps": null,
							"15 Ps": null,
				      "20 Ps": null,
							"25 Ps": null,
				      "30 Ps": null,
							"35 Ps": null,
				      "40 Ps": null,
							"45 Ps": null,
				      "50 Ps": null,
							"55 Ps": null,
				      "60 Ps": null,
							"65 Ps": null,
				      "70 Ps": null,
							"75 Ps": null,
				      "80 Ps": null,
							"85 Ps": null,
				      "90 Ps": null,
							"95 Ps": null,
				      "100 Ps": null,
				    },
				    limit: 10, // The max amount of results that can be shown at once. Default: Infinity.
				    onAutocomplete: function(val) {
								that.setState({
									__it_quantity:parseInt(val.split(' ')[0]),
									__it_tot_price:parseInt(val.split(' ')[0])*that.state.__it_price,
									__it_q_sep:val.split(' ')[1]
								})

				    },
				    minLength: 0, // The minimum length of the input for the autocomplete to start. Default: 1.
				  });
				}


			}
			_let_me_close_my_payment(evt){
				evt.preventDefault();
				evt.stopPropagation();
				ReactDOM.unmountComponentAtNode(document.getElementById('_js_root_animation'))
			}
			render(){
				return (
					<div style={billo_ni_tera_lal_ghaghra_mediator}>
						<div style={_main_payment_head_shop}>
							<div style={_tere_mathe_ke_kum_kum_ko_1_as_h_payment}>
							</div>
							<div style={_tere_mathe_ke_kum_kum_ko_2_as_h_payment}>
								<div style={_hehe_hoho_gazab_ka_swag_payment}>
									<p className="truncate">{
										this.state.myPaymentModeMessage
									}</p>
								</div>
							</div>
							<div style={_tere_mathe_ke_kum_kum_ko_3_as_h_payment}>
								<div style={_hehe_hoho_gazab_ka_swag_right_payment}>
									<i className="material-icons small _design_my_cursor_pratibha" onClick={this._let_me_close_my_payment}>close</i>
								</div>
							</div>
						</div>
						<div style={_main_payment_body_shop}>
							<div style={_tere_mathe_ke_kum_kum_ko_1_payment}>
							</div>
							<div style={_tere_mathe_ke_kum_kum_ko_2_payment}>
								<div class="row">
									<div className="input-field">
										<i className="material-icons prefix">attach_money</i>
										<input id="icon_prefix_quant_sell_pp_price" type="text" className="validate" disabled={true} />
										<label for="icon_prefix_quant_sell_pp_price">{`${(this.state.__it_type=="Weighable")?("Price - "+this.state.__it_price+"/Kg"):("Price - "+this.state.__it_price+"/Ps")}`}</label>
									</div>
								</div>
								<div class="row">
									<div className="input-field">
										<i className="material-icons prefix">filter_9_plus</i>
										<input type="text" id="autocomplete-input_r_it_qt" className="autocomplete" />
										<label for="autocomplete-input_r_it_qt">Please select item quantity you want to buy</label>
									</div>
								</div>
								<div class="row">
									<div className="input-field">
										<i className="material-icons prefix">attach_money</i>
										<input id="icon_prefix_quant_sell_pp_price" type="text" className="validate" disabled={true}  />
										<label for="icon_prefix_quant_sell_pp_price">{`Total payble amount - ${this.state.__it_tot_price} - (INR)`}</label>
									</div>
								</div>
								<p className="truncate">Please select the specified payment method **</p>
								<p className="truncate">** Please note that we currently support only two payment method cod and credit card </p>
								<a className='dropdown-button btn white black-text _pratibha_reset_my_text' href='#' data-activates='dropdown1_aaj_rone_de_mujhe'>payment method</a>
								 <ul id='dropdown1_aaj_rone_de_mujhe' className='dropdown-content'>
									 {
										 this.state.__it_pay_method.map( (a,b)=>{
											 return (
												 <li key={b} onClick={this._Change_it_pay_dis_text}><a href="#!">{a}</a></li>
											 )
										 } )
									 }
								 </ul>
							</div>
							<div style={_tere_mathe_ke_kum_kum_ko_3_payment}>
							</div>
						</div>
					</div>
				)
			}
		}


		// buy now screen end


		//<iframe style={iframe_papa_ji_iframe} src={cReviewUrl} sandbox="allow-scripts allow-same-origin" ></iframe>

		var setInnerHtmlDangerousPratibhaBypass=(html)=>{
			return {__html: html};
		}

		const afganJalebiMasoomFarebi={width:"250px",height:"300px",cursor:"zoom-in"};
		const afganJalebiMasoomFarebi_hoho={cursor:"zoom-in"};
		const widthaArmanoMePehliDafa={width:"100%",height:"120px"};
		const iframe_papa_ji={width:"100%",height:"100%",zIndex:"1"};
		const iframe_papa_ji_iframe={width:"100%",height:"100%",position:"relative",zIndex:"-2"};
		const bharDo_meri_jholi_ya_muhammad={width:"100%",height:"40px"};
		const bharDo_meri_jholi_ya_muhammad_bajrangi={width:"100%",height:"100%",display:"flex",justifyContent:"flex-end",alignItems:"center"};
		const madinaParagraph={cursor:"pointer"};
		const amazonPatola_tab_style={width:"40%",height:"30px",zIndex:"5",marginTop:"0px",position:"absolute",marginBottom:"30px"};
		const amazonPatola_tab_style_beta_1_baap={width:"49%",height:"100%",display:"inline",float:"left"};
		const amazonPatola_tab_style_beta_2_baap={width:"49%",height:"100%",display:"inline",float:"right"};
		const amazonPatola_tab_style_beta_1={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center",backgroundColor:"white",cursor:"pointer"};
		const amazonPatola_tab_style_beta_2={width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center",backgroundColor:"white",cursor:"pointer"};
		const paddingGhumtaObama={paddingTop:"30px"};
		const pratibha_tune_mera_dil_luteya_hoho={overflowY:"scroll"};
		const pratibha_tune_mera_dil_luteya_hoho_me={width:"100%",height:"100%"};
		const sharabi_pike_sach_bolte_pratibha={width:"100%"};
		const _sory_am_not_so_kamjor_please_understand_me={width:"100%"};
		class AmazonLinkedFace extends React.Component {
			constructor(props) {
				super(props);
				this.state = {
					spinMe:true,
					spinMeTlf:true,
					amazonBilla:[],
					tlfBilla:[],
					amazonPatola:"theLinkedFace",
					myFaceSuggest:[]
				};
				this.componentWillMount=this.componentWillMount.bind(this);
				this.componentDidMount=this.componentDidMount.bind(this);
				this._turn_to_allah=this._turn_to_allah.bind(this);
				this._de_de_ya_nabi_mere_dil_ko_dilasa=this._de_de_ya_nabi_mere_dil_ko_dilasa.bind(this);
				this._jab_tak_sunega_na_dilki=this._jab_tak_sunega_na_dilki.bind(this);
				this._tenu_karda_suitSuitHohoTwo=this._tenu_karda_suitSuitHohoTwo.bind(this);
				this._tenu_karda_suitSuitHohoOne=this._tenu_karda_suitSuitHohoOne.bind(this);
				this.componentDidUpdate=this.componentDidUpdate.bind(this);
				this._o_dil_tod_ke_hasti_ho_mera=this._o_dil_tod_ke_hasti_ho_mera.bind(this);
				this._tu_kiti_bewafayi_sajna=this._tu_kiti_bewafayi_sajna.bind(this);
				this._let_me_purchase_this_item_pratibha=this._let_me_purchase_this_item_pratibha.bind(this);
			}
			_let_me_purchase_this_item_pratibha(evt){
				evt.preventDefault();
				evt.stopPropagation();
				console.log("pp bbbggfddssf hhhggffd  fgfg");
				console.log(evt.target);
				console.log(evt.target.parentElement.lastChild);
				let tarVal=JSON.parse(evt.target.parentElement.lastChild.value)
				ReactDOM.unmountComponentAtNode(document.getElementById('_js_root_animation'))
				ReactDOM.render(<BuyNowMediator ItType={tarVal[1]} ItPrice={parseInt(tarVal[4].split(' ')[0])} ItPayMethod={tarVal[26]} ItemId={tarVal[32]} />,document.getElementById('_js_root_animation'))
			}
			_tu_kiti_bewafayi_sajna(evt){
				$('.carousel').carousel();
			}
			_o_dil_tod_ke_hasti_ho_mera(evt){
				evt.preventDefault();
				evt.stopPropagation();
				let tar=evt.currentTarget?evt.currentTarget:evt.target;
				ReactDOM.unmountComponentAtNode(document.getElementById('_js_root_animation'));
				ReactDOM.render(<ImagePopupGnuMakeGolang Url={tar.src} />,document.getElementById('_js_root_animation'));
			}
			componentDidUpdate(prevProps, prevState){
				$('.carousel').carousel();
			}
			_tenu_karda_suitSuitHohoOne(evt){
				evt.preventDefault();
				evt.stopPropagation();
				this.setState({
					amazonPatola:"theLinkedFace"
				})
			}
			_tenu_karda_suitSuitHohoTwo(evt){
				evt.preventDefault();
				evt.stopPropagation();
				this.setState({
					amazonPatola:"other"
				})
			}
			_jab_tak_sunega_na_dilki(evt){
				evt.preventDefault();
				evt.stopPropagation();
				evt.persist();
				let tarr=evt.currentTarget;
				let rc=evt.currentTarget.parentElement.lastChild.value;
				ReactDOM.render(<CreateIframeReviewes Url={rc} />,document.getElementById('_js_root_animation'))
			}
			_de_de_ya_nabi_mere_dil_ko_dilasa(evt){
				evt.preventDefault();
				evt.stopPropagation();
				let rc=evt.currentTarget.src?evt.currentTarget.src:null;
				ReactDOM.unmountComponentAtNode(document.getElementById('_js_root_animation'));
				ReactDOM.render(<ImagePopupGnuMakeGolang Url={rc} />,document.getElementById('_js_root_animation'));
			}
			_turn_to_allah(evt){
				$(document).ready(function(){
		      $('.carousel').carousel();
					$('.dropdown-button').dropdown({
						 inDuration: 300,
						 outDuration: 225,
						 constrainWidth: false, // Does not change width of dropdown to that of the activator
						 hover: false, // Activate on hover
						 gutter: 50, // Spacing from edge
						 belowOrigin: true, // Displays dropdown below the button
						 alignment: 'right', // Displays dropdown with edge aligned to the left of button
						 stopPropagation: true // Stops event propagation
					 });
		    });
			}
			componentDidMount(){
				$('.dropdown-button').dropdown({
					 inDuration: 300,
					 outDuration: 225,
					 constrainWidth: false, // Does not change width of dropdown to that of the activator
					 hover: false, // Activate on hover
					 gutter: 50, // Spacing from edge
					 belowOrigin: true, // Displays dropdown below the button
					 alignment: 'right', // Displays dropdown with edge aligned to the left of button
					 stopPropagation: true // Stops event propagation
				 });
				 $('.carousel').carousel();

			}
			componentWillMount(){
				var that=this;
				let defineMe=JSON.stringify({Me:window.__rasoola.allah[1],Pkey:window.__rasoola.allah[4]});
				$(document).ready(function(){
					$(window).on("amazonArive",function(evt,evtInfo){
						let woman=JSON.parse(evtInfo.Woman);
						let man=JSON.parse(evtInfo.Man);
						let kid=JSON.parse(evtInfo.Kid);
						console.log(man)
						console.log(kid)
						let allData = [];
						allData.push(woman);
						allData.push(man);
						allData.push(kid);
						that.setState({
							amazonBilla:allData,
							spinMe:false
						})
					})
				})



				window.addEventListener('_update_main_item_container_pratibha',(evt)=>{
					$.ajax({
						url:`getMyRelatedItemsToBuyPratibhaPlease?data=${defineMe}`,
						type:"GET",
						dataType:"json",
						contentType:"json",
						async:true
					}).done((data)=>{
						console.log(data);
						console.log("lllllllllllllllllllllllllllllllllllllllooooooooooooooooooooooooooooooogggggggggggggggggg");
						let tlfBillaCont=data.All;
						let prevUpdate=that.state.tlfBilla;
						let newArr=prevUpdate.concat(tlfBillaCont)
						that.setState({
							spinMeTlf:false,
							tlfBilla:newArr
						})
					}).fail((jqXHR,statusText)=>{
						console.log(statusText);
					})
					let mNo=JSON.stringify({me:window.__rasoola.allah[1],PostType:window.__pageType,Pkey:window.__rasoola.allah[4]});
					$.ajax({
						url:`getMyAllRelatedPostBilla?data=${mNo}`,
						type:"GET",
						contentType:"json",
						async:true
					}).done((data)=>{
						console.log(data);
						let updateNeed=data.All;
						let slimdaimanabdan=["face suggestion",window.__rasoola.allah[1]];
						let ranNo=Math.floor((Math.random() * data.length));
						updateNeed.splice(ranNo, 0, slimdaimanabdan);
						let prevUpdate=that.state.tlfBilla;
						let newArr=updateNeed.concat(prevUpdate);
						that.setState({
							tlfBilla:newArr
						});
					}).fail((jqXHR,statusText)=>{
						console.log(statusText);
					})

					let mNoA=JSON.stringify({Me:window.__rasoola.allah[1],Pkey:window.__rasoola.allah[4]});
					$.ajax({
						url:`getMyAllRelatedFacesBilla?data=${mNoA}`,
						type:"GET",
						contentType:"json",
						async:true
					}).done((data)=>{

						console.log(data);
						let updateNeed=data.All
						//let prevUpdate=that.state.tlfBilla;
						//let newArr=updateNeed.concat(prevUpdate);
						that.setState({
							myFaceSuggest:updateNeed
						});
					}).fail((jqXHR,statusText)=>{
						console.log(statusText);
					})
				},true)


				var event = new CustomEvent(
					"_update_main_item_container_pratibha",
					{
						detail: {
							message: "hi",
							time: new Date(),
						},
						bubbles: true,
						cancelable: true
					}
				);
				window.dispatchEvent(event);



			}
			render(){
				return (
								<div>
									<div style={amazonPatola_tab_style}>
										<div style={amazonPatola_tab_style_beta_1_baap}>
											<div className="z-depth-1 truncate" style={amazonPatola_tab_style_beta_1} onClick={this._tenu_karda_suitSuitHohoOne}>
												theLinkedFace
											</div>
										</div>
										<div style={amazonPatola_tab_style_beta_2_baap}>
											<div className="z-depth-1 truncate" style={amazonPatola_tab_style_beta_2} onClick={this._tenu_karda_suitSuitHohoTwo}>
												Other
											</div>
										</div>
									</div>

									<div  style={paddingGhumtaObama}>
									{
										this.state.amazonPatola=="theLinkedFace"?(
											<div>
												{
													this.state.spinMeTlf?(
														<div style={readerSass_sin} >
															<PreloderCircular />
														</div>
													):(
														<div>
															{
																this.state.tlfBilla.map( (a,b) => {

																	//let itemTypeIcon=a[8];
																	/*let displayMyiTypeIcon="";
																	itemTypeIcon.map( (m,n)=>{
																		displayMyiTypeIcon=displayMyiTypeIcon+"<a className=\"carousel-item\" href="+`#${n}!`+"><img src="+m+" /></a>"
																	} )*/
																	if (a.length==33) {
																		return (
																			<div key={b}>
																				<div className="card">
																					<div className="card-image waves-effect waves-block waves-light">
																						<img src={a[8][0]} style={sharabi_pike_sach_bolte_pratibha} />
																					</div>
																					<div className="card-content">
																						<span className="card-title activator grey-text text-darken-4"><i className="material-icons right" onClick={this._tu_kiti_bewafayi_sajna}>more_vert</i></span>
																						<p>{`Item Name - ${a[0]}`}</p>
																						<p>Item Type - {
																							a[1].map( (m,n)=>{
																								if (n==0) {
																									return m
																								}else {
																									return m+" ,"
																								}
																							} )
																						}</p>
																						<p>{`Exp date - ${a[6]}`}</p>
																						<p>{`Total quantity - ${a[3]}`}</p>
																						<p>{`Price - ${a[4]}`}</p>
																						<p>{`Available till - ${a[7]}`}</p>
																					</div>
																					<div className="card-reveal" style={pratibha_tune_mera_dil_luteya_hoho}>
																						<div style={pratibha_tune_mera_dil_luteya_hoho_me}>
																							<span className="card-title grey-text text-darken-4">{`Item Name - ${a[0]}`}<i className="material-icons right">close</i></span>
																							<div className="carousel">
																								{
																									a[8].map( (a,b)=>{
																										return (
																											<a key={b} className="carousel-item" href={`#${b}!`}><img src={a} className="hoho_llll_ppp_pratibha _kar_yaad_wo_jamana_mere_pyar_ka" onClick={this._o_dil_tod_ke_hasti_ho_mera} /></a>
																										)
																									} )
																								}
																							</div>
																							<p>Item type - {
																								a[1].map( (m,n)=>{
																									if (n==0) {
																										return m
																									}else {
																										return m+" ,"
																									}
																								} )
																							}</p>
																							<p>Item category - {
																								a[2].map( (m,n)=>{
																									if (n==0) {
																										return m
																									}else {
																										return m+" ,"
																									}
																								} )
																							}</p>
																							<p>{`Total quantity - ${a[3]}`}</p>
																							<p>{`Price - ${a[4]}`}</p>
																							<p>{`Mfg date - ${a[5]}`}</p>
																							<p>{`Exp date - ${a[6]}`}</p>
																							<p>{`Available till - ${a[7]}`}</p>
																							<p className="truncate">***** -- Delivery details -- *****</p>
																							{
																								(a[20]=="Yes")?(
																									<div style={_sory_am_not_so_kamjor_please_understand_me}>
																										<p>{`Delivery available - ${a[20]}`}</p>
																										<p>{`Most expected delivery duration - ${a[21]} to ${a[22]}`}</p>
																										<p>Please check your area pincode for delivery option</p>
																										<div style={_sory_am_not_so_kamjor_please_understand_me}>
																											<div className="row">
																												<div className="col s12">
																													<div className="input-field inline">
																														<input id="email_offer" type="text" class="validate" />
																														<label for="email_offer" data-error="wrong" data-success="right">pincode</label>
																													</div>
																													<div>
																														<a className="waves-effect waves-light btn white black-text _pratibha_capitalize_my_text">Check</a>
																														<input type="hidden" value={JSON.stringify(a[23])} />
																													</div>
																												</div>
																											</div>
																										</div>
																										<p>{`Average delivery charge - ${a[24]}`}</p>
																										<p>{`Maximum delivery time - ${a[25]}`}</p>
																									</div>
																								):(
																									<p> *No delivery option is available for this product</p>
																								)
																							}
																							<p className="truncate">***** -- Provider delails -- *****</p>

																							<p>{`Shop name - ${a[11]}`}</p>
																							<div style={_sory_am_not_so_kamjor_please_understand_me}>
																								<img className="_lut_lut_ke_saiyan_hun_main_ki_kara" src={a[29]?a[29]:"img-not-available.png"} />
																							</div>
																							<p>Shop type - {
																								a[12].map( (m,n)=>{
																									if (n==0) {
																										return m
																									}else {
																										return m+" ,"
																									}
																								} )
																							}</p>
																							<p>{`Shop started on - ${a[13]}`}</p>
																							<p>{`Shop contact no - ${a[14]}`}</p>
																							<p>Branch pin code - {
																								a[15].map( (m,n)=>{
																									if (n==a[15].length-1) {
																										return m
																									}else {
																										return m+" ,"
																									}
																								} )
																							}</p>
																							<p>{`Shop Address - ${a[16]}`}</p>
																							<p>{`Shop Address - ${a[17]}`}</p>
																							<p>{`Shop open time - ${a[18]}`}</p>
																							<p>{`Shop close time - ${a[19]}`}</p>
																							<p>Payment options - {
																								a[26].map( (m,n)=>{
																									if (n==a[26].length-1) {
																										return m
																									}else {
																										return m+" ,"
																									}
																								} )
																							}</p>
																							<p>{`Collectible booking available - ${a[27]}`}</p>
																							<p>{`Collectible booking preserve duration - ${a[28]}`}</p>
																							{
																								((new Date(a[7])).getTime()>=Date.now())?(
																									<div className="sajan_sajan_teri_dulhan_pp_prat">
																										<div className="_payaliya_teri_hohoho_mujhe_rulaye_pp_prati">
																											<a className="waves-effect waves-light btn _pratibha_capitalize_my_text white black-text" onClick={this._let_me_purchase_this_item_pratibha}>Buy Now</a>
																											<input type="hidden" value={JSON.stringify(a)} />
																										</div>
																									</div>
																								):(
																									<div className="sajan_sajan_teri_dulhan_pp_prat">
																										<div className="_payaliya_teri_hohoho_mujhe_rulaye_pp_prati">
																											<p className="truncate _pratibha_capitalize_my_text"> item is not available to buy currently</p>
																										</div>
																									</div>
																								)
																							}
																						</div>
																					</div>
																				</div>
																			</div>
																		)
																	}else if (a.length==2) {
																		return (
																			<div key={b} style={fHundredStyle_nabiya_salam}>
																			<div id="fHundredStyle_nabiya_salam_same" style={fHundredStyle_nabiya_salam_same}>
																				{
																					this.state.myFaceSuggest.map( (e,f) => {
																						if (e.length>1) {
																							return (

																								<div style={asalam_alayka_ya_rasool_allah} key={f}>
																								<input type="hidden" value={JSON.stringify(e)} />
																								<div id={f} className="card hoverable" style={indi_frnd_face_cont_tlf_pratibha} >
																									<div className="card-image waves-effect waves-block waves-light">
																										<img className="activator" style={faceWalaBhaiya} src={e[3]} />
																									</div>
																									<div className="card-content">
																										<span className="card-title activator grey-text text-darken-4" style={friends_wala_mehboob_tlf_dot_com} onClick={this._proper_patola_pratibha}>{e[0]}</span>
																										<a style={cust_spanning_tree_bt_sawan} className="dropdown-button btn black-text tooltipped" data-activates={`dropdownholo__ch__${f}`} data-position="bottom" data-delay="50" data-tooltip="Click to take some deep action" ref={()=>{
																											$(document).ready(function(){
																												$('.tooltipped').tooltip({delay: 50});
																											});
																										}} ><i className="small material-icons right">more_vert</i></a>
																										<ul style={uuuullllliiiiii} id={`dropdownholo__ch__${f}`} className='dropdown-content' ref={(elem) => {
																											$('.dropdown-button').dropdown({
																												 inDuration: 300,
																												 outDuration: 225,
																												 constrainWidth: true, // Does not change width of dropdown to that of the activator
																												 hover: false, // Activate on hover
																												 gutter: 200, // Spacing from edge
																												 belowOrigin: false, // Displays dropdown below the button
																												 alignment: 'right', // Displays dropdown with edge aligned to the left of button
																												 stopPropagation: true // Stops event propagation
																											 }
																										 );
																										}}>
																											<li className="divider"></li>
																											<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Ignore</a></li>
																											<li className="divider"></li>
																											<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Blame</a></li>
																											<li className="divider"></li>
																											<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Poke</a></li>
																											<li className="divider"></li>
																				  					</ul>

																									</div>
																									<div className="card-reveal" style={lala_lala_lala_dil_ne_ye_kaha_pratibha} >

																											<span style={sochNasake} className="card-title grey-text text-darken-4"><i className="material-icons right" onClick={this._clear_currentGuy_pratibha}>close</i></span>
																											<p className="truncate">{e[0]}</p>
																											<p className="truncate">{e[2]}</p>
																											<p className="truncate">Please select the desire face to link</p>
																											<ul>
																												<li>
																													{/*<form action="#"><p>
																											      <input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_soc" defaultChecked="false"  />
																											      <label for="filled-in-box_tlf_link_soc">Social face</label>
																											    </p></form>*/}
																													<div className="switch" >
																												    <label className="black-text _design_my_font_weight_pratibha">
																												      <input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																												      <span className="lever"></span>
																												      Social Face
																												    </label>
																														<input type="hidden" value="Social Face" />
																												  </div>
																												</li>
																												<li>
																													{/*
																														<form action="#">
																												      <input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_prof" defaultChecked="false"  />
																												      <label for="filled-in-box_tlf_link_prof">Professional face</label>
																												    </form>
																														*/}
																														<div className="switch">
																													    <label className="black-text _design_my_font_weight_pratibha">
																													      <input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																													      <span className="lever"></span>
																													      Professional Face
																													    </label>
																															<input type="hidden" value="Professional Face" />
																													  </div>
																												</li>
																												<li>
																													<div className="switch">
																														<label className="black-text _design_my_font_weight_pratibha">
																															<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																															<span className="lever"></span>
																															Consumer Face
																														</label>
																														<input type="hidden" value="Consumer Face" />
																													</div>
																													{/*
																														<form action="#">
																												      <input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_con" defaultChecked="false"  />
																												      <label for="filled-in-box_tlf_link_con">Consumer face</label>
																												    </form>
																														*/}
																												</li>
																												<li>
																													<div className="switch">
																														<label className="black-text _design_my_font_weight_pratibha">
																															<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																															<span className="lever"></span>
																															Reader Face
																														</label>
																														<input type="hidden" value="Reader Face" />
																													</div>
																													{/*
																														<form action="#">
																												      <input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_read" defaultChecked="false"  />
																												      <label for="filled-in-box_tlf_link_read">Reader face</label>
																												    </form>
																														*/}
																												</li>
																												<li>
																													{/*
																														<form action="#">
																												      <input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_date" defaultChecked="false"  />
																												      <label for="filled-in-box_tlf_link_date">Dater face</label>
																												    </form>
																														*/}
																														<div className="switch">
																															<label className="black-text _design_my_font_weight_pratibha">
																																<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																																<span className="lever"></span>
																																Dater Face
																															</label>
																															<input type="hidden" value="Dater Face" />
																														</div>
																												</li>
																												<li>
																												{/*
																													<form action="#">
																											      <input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_donate" defaultChecked="false" />
																											      <label for="filled-in-box_tlf_link_donate">Donator face</label>
																											    </form>
																													*/}
																													<div className="switch">
																														<label className="black-text _design_my_font_weight_pratibha">
																															<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																															<span className="lever"></span>
																															Donator Face
																														</label>
																														<input type="hidden" value="Donator Face" />
																													</div>
																												</li>
																												<li>
																													{/*
																														<form action="#">
																												      <input type="checkbox" className="filled-in" id="filled-in-box_tlf_link_sin" defaultChecked="false"  />
																												      <label for="filled-in-box_tlf_link_sin">Sinner face</label>
																											    	</form>
																														*/}
																													<div className="switch">
																														<label className="black-text _design_my_font_weight_pratibha">
																															<input type="checkbox" onClick={this._swich_link_face_data_pratibha} />
																															<span className="lever"></span>
																															Sinner Face
																														</label>
																														<input type="hidden" value="Sinner Face" />
																													</div>
																												</li>
																											</ul>
																											<br />
																											<div style={link_my_different_face_pratibha_please}>
																												<input type="button" value="Link face" style={newPlaylistBtStylePratibhaLinkMyFace} className="dropdown-button btn" onClick={this._link_my_selected_face_pratibha_please} />
																											</div>
																									</div>
																								</div>
																								</div>
																							)
																						}else {
																							return false
																						}
																					} )
																				}
																			</div>
																			</div>

																		)
																	}else {
																		return (
																			<div className="card hoverable" key={b} >
																				<div className="card-image">
								      										<img style={zoomInCursorZaanPeBane} src={a[2]} ref={() => {
																						{/*}$(document).ready(function(){
								    													$('.materialboxed').materialbox();
																							//onClick={this._checking_for_img_click}
								  													});*/}
																					}} onClick={this._checking_for_img_click} />
								    										</div>
								    										<div className="card-content">
								      										<span className="card-title activator grey-text text-darken-4 " onClick={this._hacking_into_material}  >{a[0]}</span><a style={cust_spanning_tree_bt} className="dropdown-button btn black-text tooltipped" data-activates={`dropdownAA${b}`} data-position="bottom" data-delay="50" data-tooltip="Click to take some deep action" ref={()=>{
																						$(document).ready(function(){
																							$('.tooltipped').tooltip({delay: 50});
																						});
																					}} ><i className="large material-icons right">more_vert</i></a>
																					<ul style={uuuullllliiiiii} id={`dropdownAA${b}`} className='dropdown-content' ref={() => {
																						$('.dropdown-button').dropdown({
																							 inDuration: 300,
																							 outDuration: 225,
																							 constrainWidth: true, // Does not change width of dropdown to that of the activator
																							 hover: false, // Activate on hover
																							 gutter: 50, // Spacing from edge
																							 belowOrigin: true, // Displays dropdown below the button
																							 alignment: 'right', // Displays dropdown with edge aligned to the left of button
																							 stopPropagation: true // Stops event propagation
																						 }
																					 );
																					}}>
																						<li className="divider"></li>
																						<li><a className="modal-trigger" style={myUniqueFaceSelectStyle_child_where_we_are} href={`#modal${b}`}>Ignore</a></li>
																						<li className="divider"></li>
															    					<li><a style={myUniqueFaceSelectStyle_child_where_we_are} href="#!">Blame</a></li>
																						<li className="divider"></li>
																				    <li><a style={myUniqueFaceSelectStyle_child_where_we_are} href="#!">Share</a></li>
																				    <li className="divider"></li>

															  					</ul>
																					<div id={`modal${b}`} className="modal bottom-sheet" ref={()=>{
																						$(document).ready(function(){
																		    // the "href" attribute of the modal trigger must specify the modal ID that wants to be triggered
																		    $('.modal').modal();
																		  });
																					}}>
																				    <div className="modal-content">
																				      <h4>Modal Header</h4>
																				      <p>A bunch of text</p>
																				    </div>
																				    <div className="modal-footer">
																				      <a href="#!" className="modal-action modal-close waves-effect waves-green btn-flat">Agree</a>
																				    </div>
																				  </div>
								      										<p>{
																						timeConverterOf(parseInt(a[3]))
																					}</p>
																					<p className="truncate" dangerouslySetInnerHTML={createMarkup(a[4])}></p>
																					<br />
																					<p>Average rating</p>
								    										</div>
								    										<div className="card-reveal">
																					<div className="its_ok_shreya_i_am_alright_ok main_agar_samne" style={abToEkPalKiDuriSahiJayeNa}>
									      										<span className="">{a[0]}</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>{timeConverter(parseInt(a[3]))}</span><span style={sochNasake} className="card-title grey-text text-darken-4"><i className="material-icons right">close</i></span>

									      										<div style={dangerousStyleDiv} dangerouslySetInnerHTML={createMarkup(a[4])}></div>
																						<br />
																						<div style={fatherPeterDayal}>
																							<div style={chandSurajSabYaha}>
																								<img src={a[2]} style={chandSurajSabYaha_image} />
																							</div>
																						</div>
																						<br />
																						<div style={asalamuAlaykaYaRasoolAllahYaNabi}>
																							<div style={allahuYaAllahLaIllah_1}>
																								<div style={mawlayaSaliWaSalimAbdanDflex}>
																									{/*<a className="btn btn-floating "><i className="material-icons">attachment</i></a>*/}
																								</div>
																							</div>
																							<div style={allahuYaAllahLaIllah_2}>
																								<div style={mawlayaSaliWaSalimAbdanDflex}>
																									<a className='dropdown-button btn white black-text _pratibha_capitalize_my_text' href='#' data-activates={"dropdownnabi"+b}>Rate</a>
																									<ul id={'dropdownnabi'+b} className='dropdown-content' ref={() => {
																										$('.dropdown-button').dropdown({
																											 inDuration: 300,
																											 outDuration: 225,
																											 constrainWidth: false, // Does not change width of dropdown to that of the activator
																											 hover: false, // Activate on hover
																											 gutter: 50, // Spacing from edge
																											 belowOrigin: true, // Displays dropdown below the button
																											 alignment: 'right', // Displays dropdown with edge aligned to the left of button
																											 stopPropagation: true // Stops event propagation
																										 }
																									 );
																									}}>
																									<li className="divider"></li>
																									<li><a href="#!" className="black-text">-1</a></li>
																									<li className="divider"></li>
																									<li><a href="#!" className="black-text">0</a></li>
																									<li className="divider"></li>
																									<li><a href="#!" className="black-text">1</a></li>
																									<li className="divider"></li>
																									</ul>
																								</div>
																							</div>
																							<div style={allahuYaAllahLaIllah_3}>
																								<div style={mawlayaSaliWaSalimAbdanDflex}>
																									{/*<a className="btn btn-floating "><i className="material-icons">attachment</i></a>*/}
																								</div>
																							</div>
																						</div>
																						<br />
																						<div style={chandSurajSabYaha_habibKhuda}>
																							<CommentBox />
																						</div>
																					</div>
								    										</div>
																			</div>
																		)
																	}


																 } )
															}
														</div>
													)
												}
											</div>
										):(
											<div>
												{
													this.state.spinMe?(
														<div style={readerSass_sin} >
															<PreloderCircular />
														</div>
													):(
														<div>
														{
															this.state.amazonBilla.map( (a,b) => {
																return (
																	<div key={b}>
																		{
																			a.ItemSearchResponse.Items.Item.map( (c,d) => {
																				let r=c.LargeImage?c.LargeImage:c.SmallImage;
																				let s=r?r.URL:null;
																				let pType_pre=c.ItemAttributes?c.ItemAttributes:null;
																				let ptypeTitle=pType_pre.Title?pType_pre.Title:null;
																				let ptypeTitle_na=ptypeTitle?ptypeTitle:"N.A.";
																				let cReview=c.CustomerReviews?c.CustomerReviews:null;
																				let cReviewUrl=(cReview!=null)?((cReview.HasReviews!=null)?cReview.IFrameURL:null):null;
																				console.log(cReviewUrl);
																				let pType=pType_pre.Brand?pType_pre.Brand:null;
																				let pType_na=pType?pType:"N.A.";
																				let pDepartment=pType_pre.Department?pType_pre.Department:null;
																				let pDepartment_na=pDepartment?pDepartment:"N.A.";
																				let pTypeName=pType_pre.ProductTypeName?pType_pre.ProductTypeName:null;
																				let pTypeName_na=pTypeName?pTypeName:"N.A.";
																				let pSize=pType_pre.Size?pType_pre.Size:null;
																				let pSize_na=pSize?pSize:"N.A.";
																				let lPrice=pType_pre.ListPrice?pType_pre.ListPrice:null;
																				let formatedPrice=lPrice?lPrice.FormattedPrice:null;
																				let formatedPrice_na=formatedPrice?formatedPrice:"N.A.";
																				let vp=c.VariationSummary?c.VariationSummary:null;
																				let hp=(vp!=null)?vp.HighestPrice:null;
																				let lp=(vp!=null)?vp.LowestPrice:null;
																				let lpCheck=(lp!=null)?((lp.LowestSalePrice!=null)?lp.LowestSalePrice:null):null
																				let lpMain=(lp!=null)?lp.FormattedPrice:null;
																				let hpMain=(hp!=null)?hp.FormattedPrice:null;
																				let hpNa=hpMain?hpMain:"N.A.";
																				let lpNa=lpMain?hpMain:"N.A.";
																				let hpNaList=(hpNa=="N.A.")?((formatedPrice_na!="N.A.")?formatedPrice_na:"N.A."):hpNa;
																				let lpNaList=(lpNa=="N.A.")?((formatedPrice_na!="N.A.")?formatedPrice_na:"N.A."):lpNa;
																				let imageArrayHolder=[];
																				let imageSet=c.ImageSets?c.ImageSets:null;
																				let imgSet=(imageSet!=null&&imageSet.ImageSet)?imageSet.ImageSet:[];
																				//console.log(imgSet)
																				let ascr=[];

																				ascr.push(imgSet);
																				let imgSetr=(imgSet instanceof Array)?imgSet:ascr
																				imgSetr.map( (m,n)=>{
																					let nnxHeart=m?m:null;
																					let lImage=(nnxHeart!=null)?((nnxHeart.LargeImage!=null)?((nnxHeart.LargeImage.URL!=null)?nnxHeart.LargeImage.URL:null):null):null;
																					imageArrayHolder.push(lImage)
																				} )
																				return (
																					<div key={d} className="card">
																						<div className="card-image waves-effect waves-block waves-light">
																						<img src={s} style={afganJalebiMasoomFarebi_hoho} onClick={this._de_de_ya_nabi_mere_dil_ko_dilasa} />
																						</div>
																						<div className="card-content">
																						<span className="card-title grey-text text-darken-4"><i className="material-icons right">more_vert</i></span>
																						<span className="card-title activator grey-text text-darken-4" onClick={this._turn_to_allah}>{"* Lowest Price - "+lpNaList}</span>
																						<p><a className="black-text" href="#">{"Highest Price - "+hpNaList}</a></p>
																						<p><a className="black-text" href="#">{"Department - "+pDepartment_na}</a></p>
																						<p><a className="black-text" href="#">{"Size - "+pSize_na}</a></p>
																						<p><a className="black-text" href="#">{"Product Type - "+pTypeName_na}</a></p>
																						<p><a className="black-text" href="#">{"Brand Name - "+pType_na}</a></p>
																						</div>
																						<div className="card-reveal">
																							<span className="card-title grey-text text-darken-4"><i className="material-icons right">close</i></span>
																							<span className="grey-text text-darken-4">{ptypeTitle_na}</span>
																							<p>* Available Images On Amazon</p>
																							<div className="carousel" ref={()=>{

																							}}>
																								{
																									imageArrayHolder.map( (x,y)=>{
																										return (
																											<a key={y} className="carousel-item" href="#one!" ref={() => {

																											}}><img src={x} style={afganJalebiMasoomFarebi} onClick={this._de_de_ya_nabi_mere_dil_ko_dilasa} /></a>
																										)
																									} )
																								}
																							</div>
																							<br />
																							{/*
																								<div style={asalamuAlaykaYaRasoolAllahYaNabi}>
																									<div style={allahuYaAllahLaIllah_1}>
																										<div style={mawlayaSaliWaSalimAbdanDflex}>
																											<a className="btn btn-floating "><i className="material-icons">attachment</i></a>
																										</div>
																									</div>
																									<div style={allahuYaAllahLaIllah_2}>
																										<div style={mawlayaSaliWaSalimAbdanDflex}>
																											<a className='dropdown-button btn' href='#' data-activates={"dropdownnabi_utar"+b}>Rate</a>
																											<ul id={'dropdownnabi_utar'+b} className='dropdown-content' ref={() => {
																												$('.dropdown-button').dropdown({
																													 inDuration: 300,
																													 outDuration: 225,
																													 constrainWidth: false, // Does not change width of dropdown to that of the activator
																													 hover: false, // Activate on hover
																													 gutter: 50, // Spacing from edge
																													 belowOrigin: true, // Displays dropdown below the button
																													 alignment: 'right', // Displays dropdown with edge aligned to the left of button
																													 stopPropagation: true // Stops event propagation
																												 }
																											 );
																											}}>
																											<li className="divider"></li>
																											<li><a href="#!">-5</a></li>
																											<li className="divider"></li>
																											<li><a href="#!">-4</a></li>
																											<li className="divider"></li>
																											<li><a href="#!">-3</a></li>
																											<li className="divider"></li>
																											<li><a href="#!">-2</a></li>
																											<li className="divider"></li>
																											<li><a href="#!">-1</a></li>
																											<li className="divider"></li>
																											<li><a href="#!">0</a></li>
																											<li className="divider"></li>
																											<li><a href="#!">1</a></li>
																											<li className="divider"></li>
																											<li><a href="#!">2</a></li>
																											<li className="divider"></li>
																											<li><a href="#!">3</a></li>
																											<li className="divider"></li>
																											<li><a href="#!">4</a></li>
																											<li className="divider"></li>
																											<li><a href="#!">5</a></li>
																											<li className="divider"></li>
																											</ul>
																										</div>
																									</div>
																									<div style={allahuYaAllahLaIllah_3}>
																										<div style={mawlayaSaliWaSalimAbdanDflex}>
																											<a className="btn btn-floating "><i className="material-icons">attachment</i></a>
																										</div>
																									</div>
																								</div>
																								<br />
																								<div style={widthaArmanoMePehliDafa}>
																									<CommentBoxAmazon />
																								</div>
																								<br />
																								*/}
																							<div style={bharDo_meri_jholi_ya_muhammad}>
																								<div style={bharDo_meri_jholi_ya_muhammad_bajrangi}>
																									<p style={madinaParagraph} onClick={this._jab_tak_sunega_na_dilki}>
																										View amazon review for this product
																									</p>
																									<input type="hidden" value={cReviewUrl} />
																								</div>
																							</div>
																							<div className="_iframe_dada">

																							</div>
																						</div>
																					</div>
																				)
																			} )
																		}
																	</div>
																)
															} )
														}
														</div>
													)
												}

											</div>
										)
									}
									</div>

								</div>
				)
			}
		}


		const homeBodyMainStyle={width:"100%",height:"100%",marginTop:"55px",backgroundColor:"white",border:"1px solid lightgrey"};
		const tempContHundred={width:"100%",height:"100%"};
		const switchContStyle={width:"100%",height:"30px",marginBottom:"10px"};
		const internalChangeClickStyle={width:"50%",height:"100%",display:"inline",float:"left"};
		var flexClickableStyle_post=(colorB) =>{
			return {width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center",backgroundColor:colorB,cursor:"pointer"};
		}
		var flexClickableStyle_enjoyment=(colorB) => {
			return {width:"100%",height:"100%",display:"flex",justifyContent:"center",alignItems:"center",backgroundColor:colorB,cursor:"pointer"};
		}
		var _music_and_post=(a) => {
			return{width:"100%",height:a,overflowY:"scroll",backgroundColor:"#f5f8fa"};
		}
		var _music_and_post_billa=(a) => {
			return {width:"100%",height:a};
		}
		const fHundredStyle={width:"100%",marginTop:"10px",marginBottom:"10px"};

		class HomeBodyPartTwo extends React.Component {
			constructor(props){
				super(props);
				this.state = {
					logMsg:"Sign up to Linkedface",
					enjBackColor:"#f5f8fa",
					postBackColor:"white",
					myTarget:"post",
					postBilla:[],
					musicBilla:["am","bm","cm","dm","em","fm"],
					scrH:"960px",
					pageType:window.__pageType
				};
				this._mm_enj_white=this._mm_enj_white.bind(this);
				this._mm_post_white=this._mm_post_white.bind(this);
				this.onPlayerStateChange=this.onPlayerStateChange.bind(this);
				this.componentWillMount=this.componentWillMount.bind(this);
				this.componentDidMount=this.componentDidMount.bind(this);
			}
			onPlayerStateChange(evt){
				var evx=evt;
				var eventsVidAjax = new CustomEvent(
					"ajaxInfoVid",
					{
						detail: {
							message: this.state.urliuri,
							time: new Date(),
					},
					bubbles: true,
					cancelable: true
				}
			 );


			}
			_mm_post_white(evt){
				evt.preventDefault();
				evt.stopPropagation();
				this.setState({
					enjBackColor:"#f5f8fa",
					postBackColor:"white",
					myTarget:"post",
					scrH:"960px"
				});
			}
			_mm_enj_white(evt){
				evt.preventDefault();
				evt.stopPropagation();
				this.setState({
					enjBackColor:"white",
					postBackColor:"#f5f8fa",
					myTarget:"enjoyment",
					scrH:"810px"
				});
			}
			componentWillMount(){
				var that=this;
				$(document).ready(function(){
					$(window).on("pageTypeChanger",function(evt,evtInfo){
						window.__pageType=evtInfo;

						that.setState({
							pageType:evtInfo
						});
						var event = new CustomEvent(
							"opacity",
							{
								detail: {
									message: "0.2",
									time: new Date(),
								},
								bubbles: true,
								cancelable: true
							}
						);
						window.dispatchEvent(event);
						setTimeout(function(){
							var eventx = new CustomEvent(
								"opacity",
								{
									detail: {
										message: "1",
										time: new Date(),
									},
									bubbles: true,
									cancelable: true
								}
							);
							window.dispatchEvent(eventx);
						}, 500);
						$(window).trigger("pageTypeChangerLeftPannel",[evtInfo]);
						$(window).trigger("pageTypeChangerRightPannel",[evtInfo]);
						var dbLola = openDatabase('rita', '1.0', 'Rita DB', 2 * 1024 * 1024);
						dbLola.transaction(function (tx) {
							 tx.executeSql(`DELETE FROM MESSAGES`);
							 tx.executeSql(`DELETE FROM CHATFLAGALL`);
						});
						ReactDOM.unmountComponentAtNode(document.getElementById('_chat_container'));
					});
					$(window).on("socialNavigater",function(evt,evtInfo){
						if(window._la_illahilayi_llala){
							that.setState({
								postBilla:window._la_illahilayi_llala
							})
						}
					});
				});
			}
			componentDidMount(){
				var that=this;
				let mNo=JSON.stringify({me:window.__rasoola.allah[1],PostType:window.__pageType,Pkey:window.__rasoola.allah[4]});

				Rx.Observable.ajax({ url: `/getMyAllRelatedPostBilla?data=${mNo}`, responseType: 'json',method:'GET'}).map(data=>data.response.All)
				.subscribe(
				function (data) {
					console.log("you are the light ,guide of the life");
					console.log(data);
					window._la_illahilayi_llala=data;
					let slimdaimanabdan=["face suggestion",window.__rasoola.allah[1]];
					let ranNo=Math.floor((Math.random() * data.length));
					data.splice(ranNo, 0, slimdaimanabdan);
					console.log("asalam alayka ya rasool allah asalam alayka habibi ya nabi allah");
					console.log(data);;
					that.setState({
						postBilla:data
					})

				},
			function (error) {
					console.log(error);
				}
			);
			function onYouTubeIframeAPIReady(){
			/*player = new YT.Player('existing-iframe-example', {
					events: {
						'onStateChange': that.onPlayerStateChange
					}
			});*/
			}
			//window.player=player;
			//alert(player)
			}
			render(){
				return (
					<div style={homeBodyMainStyle}>
						<div style={tempContHundred}>
							<div style={switchContStyle}>
								<div style={internalChangeClickStyle}>
									<div className="z-depth-1 truncate" style={flexClickableStyle_post(this.state.postBackColor)} onClick={this._mm_post_white}>
										<font size={4}>Posts</font>
									</div>
								</div>
								<div className="z-depth-1 truncate" style={internalChangeClickStyle}>
									<div id="_tlf_global_youtube_music" style={flexClickableStyle_enjoyment(this.state.enjBackColor)} onClick={this._mm_enj_white}>
										<font size={4}>Musics</font>
									</div>
								</div>
							</div>
							{
								this.state.myTarget=="post"?(
									<div style={_music_and_post_billa("200px")}>
										<PostBox PageType={this.state.pageType} />
									</div>
								):(
									<div style={_music_and_post_billa("350px")}>
										<MyEnjoyment />
									</div>
								)
							}
							<div id="_maal_or_katto_s_hs" style={_music_and_post(this.state.scrH)}>
								{
									this.state.pageType=="Social"?(<PostOrEnjoymentMapper Type="post" TestBilla={this.state.postBilla} />):false
								}
								{
									this.state.pageType=="Professional"?(<ProfessionalJobs Type="post" TestBilla={window.__local_job_data!=undefined?window.__local_job_data.listings.listing:[]} />):false
								}
								{
									this.state.pageType=="Writer"?(<ReadersBook Type="post" TestBilla={this.state.postBilla} />):false
								}
								{
									this.state.pageType=="Consumer"?(<AmazonLinkedFace Type="post" TestBilla={this.state.postBilla} />):false
								}
								{
									this.state.pageType=="Dater"?(<DatingLook  Type="post" TestBilla={this.state.postBilla} />):false
								}
								{
									this.state.pageType=="Donator"?(<DonaterLook Type="post" TestBilla={this.state.postBilla} />):false
								}
								{
									this.state.pageType=="Sinner"?(<SinnerLook Type="post" TestBilla={this.state.postBilla} />):false
								}
							</div>
						</div>

					</div>
				)
			}
		}
		ReactDOM.render(<HomeBodyPartTwo />,document.getElementById('_bdy_part_2'));


	</script>
{{end}}
